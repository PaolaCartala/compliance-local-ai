Directory structure:
└── proactive-mgmt-bakergroup-ai-prototype/
    ├── README.md
    ├── components.json
    ├── eslint.config.js
    ├── index.html
    ├── package.json
    ├── postcss.config.js
    ├── tailwind.config.ts
    ├── tsconfig.app.json
    ├── tsconfig.json
    ├── tsconfig.node.json
    ├── vite.config.ts
    ├── database/
    │   └── enhanced_inference_queue.sql
    ├── public/
    │   └── robots.txt
    └── src/
        ├── App.css
        ├── App.tsx
        ├── index.css
        ├── main.tsx
        ├── vite-env.d.ts
        ├── components/
        │   ├── AppSidebar.tsx
        │   ├── ComplianceStatus.tsx
        │   ├── FinancialMetric.tsx
        │   ├── ProtectedRoute.tsx
        │   ├── TemplateCompletionModal.tsx
        │   ├── UserMenu.tsx
        │   ├── chat/
        │   │   ├── ConversationWindow.tsx
        │   │   ├── CustomGPTModal.tsx
        │   │   └── ThreadSidebar.tsx
        │   └── ui/
        │       ├── accordion.tsx
        │       ├── alert-dialog.tsx
        │       ├── alert.tsx
        │       ├── aspect-ratio.tsx
        │       ├── avatar.tsx
        │       ├── badge.tsx
        │       ├── breadcrumb.tsx
        │       ├── button.tsx
        │       ├── calendar.tsx
        │       ├── card.tsx
        │       ├── carousel.tsx
        │       ├── chart.tsx
        │       ├── checkbox.tsx
        │       ├── collapsible.tsx
        │       ├── command.tsx
        │       ├── context-menu.tsx
        │       ├── dialog.tsx
        │       ├── drawer.tsx
        │       ├── dropdown-menu.tsx
        │       ├── form.tsx
        │       ├── hover-card.tsx
        │       ├── input-otp.tsx
        │       ├── input.tsx
        │       ├── label.tsx
        │       ├── menubar.tsx
        │       ├── navigation-menu.tsx
        │       ├── pagination.tsx
        │       ├── popover.tsx
        │       ├── progress.tsx
        │       ├── radio-group.tsx
        │       ├── resizable.tsx
        │       ├── scroll-area.tsx
        │       ├── select.tsx
        │       ├── separator.tsx
        │       ├── sheet.tsx
        │       ├── sidebar.tsx
        │       ├── skeleton.tsx
        │       ├── slider.tsx
        │       ├── sonner.tsx
        │       ├── switch.tsx
        │       ├── table.tsx
        │       ├── tabs.tsx
        │       ├── textarea.tsx
        │       ├── toast.tsx
        │       ├── toaster.tsx
        │       ├── toggle-group.tsx
        │       ├── toggle.tsx
        │       ├── tooltip.tsx
        │       └── use-toast.ts
        ├── contexts/
        │   └── AuthContext.tsx
        ├── data/
        │   ├── mockChatData.ts
        │   └── mockData.ts
        ├── hooks/
        │   ├── use-mobile.tsx
        │   └── use-toast.ts
        ├── layout/
        │   └── MainLayout.tsx
        ├── lib/
        │   └── utils.ts
        ├── pages/
        │   ├── AuditTrail.tsx
        │   ├── Chat.tsx
        │   ├── ClientIntegration.tsx
        │   ├── Dashboard.tsx
        │   ├── FillTemplates.tsx
        │   ├── FlaggedItems.tsx
        │   ├── Index.tsx
        │   ├── Login.tsx
        │   ├── NotFound.tsx
        │   ├── PendingReviews.tsx
        │   ├── ProcessNotes.tsx
        │   ├── ReviewQueue.tsx
        │   ├── Security.tsx
        │   ├── Settings.tsx
        │   └── UpcomingFeatures.tsx
        └── types/
            └── chat.ts

================================================
FILE: README.md
================================================
# Welcome to your Lovable project

## Project info

**URL**: https://lovable.dev/projects/4f4a41ea-e71c-460a-9581-f8647be986a4

## How can I edit this code?

There are several ways of editing your application.

**Use Lovable**

Simply visit the [Lovable Project](https://lovable.dev/projects/4f4a41ea-e71c-460a-9581-f8647be986a4) and start prompting.

Changes made via Lovable will be committed automatically to this repo.

**Use your preferred IDE**

If you want to work locally using your own IDE, you can clone this repo and push changes. Pushed changes will also be reflected in Lovable.

The only requirement is having Node.js & npm installed - [install with nvm](https://github.com/nvm-sh/nvm#installing-and-updating)

Follow these steps:

```sh
# Step 1: Clone the repository using the project's Git URL.
git clone <YOUR_GIT_URL>

# Step 2: Navigate to the project directory.
cd <YOUR_PROJECT_NAME>

# Step 3: Install the necessary dependencies.
npm i

# Step 4: Start the development server with auto-reloading and an instant preview.
npm run dev
```

**Edit a file directly in GitHub**

- Navigate to the desired file(s).
- Click the "Edit" button (pencil icon) at the top right of the file view.
- Make your changes and commit the changes.

**Use GitHub Codespaces**

- Navigate to the main page of your repository.
- Click on the "Code" button (green button) near the top right.
- Select the "Codespaces" tab.
- Click on "New codespace" to launch a new Codespace environment.
- Edit files directly within the Codespace and commit and push your changes once you're done.

## What technologies are used for this project?

This project is built with:

- Vite
- TypeScript
- React
- shadcn-ui
- Tailwind CSS

## How can I deploy this project?

Simply open [Lovable](https://lovable.dev/projects/4f4a41ea-e71c-460a-9581-f8647be986a4) and click on Share -> Publish.

## Can I connect a custom domain to my Lovable project?

Yes, you can!

To connect a domain, navigate to Project > Settings > Domains and click Connect Domain.

Read more here: [Setting up a custom domain](https://docs.lovable.dev/tips-tricks/custom-domain#step-by-step-guide)



================================================
FILE: components.json
================================================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/index.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  }
}



================================================
FILE: eslint.config.js
================================================
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": ["warn", { allowConstantExport: true }],
      "@typescript-eslint/no-unused-vars": "off",
    },
  },
);



================================================
FILE: index.html
================================================
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Baker Group AI Prototype</title>
    <meta name="description" content="SEC-Compliant AI Financial Assistant for Baker Group - Professional note processing and compliance review platform">
    <meta name="author" content="Wealth Management Solutions" />

    <meta property="og:title" content="SEC Compliance AI - Wealth Management Assistant" />
    <meta property="og:description" content="Professional AI-powered meeting note processing and SEC compliance review platform for financial advisors and wealth management firms" />
    <meta property="og:type" content="website" />
    <meta property="og:image" content="https://storage.googleapis.com/gpt-engineer-file-uploads/1neO89qPJFZR9IKqEi9jfpG7WGp1/social-images/social-1757533316799-Screenshot 2025-09-10 154143.png">

    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:title" content="SEC Compliance AI - Wealth Management" />
    <meta name="twitter:description" content="Professional AI assistant for financial advisors ensuring SEC-compliant meeting documentation" />
    <meta name="twitter:image" content="https://storage.googleapis.com/gpt-engineer-file-uploads/1neO89qPJFZR9IKqEi9jfpG7WGp1/social-images/social-1757533316799-Screenshot 2025-09-10 154143.png">
    <link rel="icon" href="/lovable-uploads/5cfbb876-140b-4ac9-bc63-84e5fd416aa6.png" type="image/png">
</head>

  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>



================================================
FILE: package.json
================================================
{
  "name": "vite_react_shadcn_ts",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "build:dev": "vite build --mode development",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.10.0",
    "@radix-ui/react-accordion": "^1.2.11",
    "@radix-ui/react-alert-dialog": "^1.1.14",
    "@radix-ui/react-aspect-ratio": "^1.1.7",
    "@radix-ui/react-avatar": "^1.1.10",
    "@radix-ui/react-checkbox": "^1.3.2",
    "@radix-ui/react-collapsible": "^1.1.11",
    "@radix-ui/react-context-menu": "^2.2.15",
    "@radix-ui/react-dialog": "^1.1.14",
    "@radix-ui/react-dropdown-menu": "^2.1.15",
    "@radix-ui/react-hover-card": "^1.1.14",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-menubar": "^1.1.15",
    "@radix-ui/react-navigation-menu": "^1.2.13",
    "@radix-ui/react-popover": "^1.1.14",
    "@radix-ui/react-progress": "^1.1.7",
    "@radix-ui/react-radio-group": "^1.3.7",
    "@radix-ui/react-scroll-area": "^1.2.9",
    "@radix-ui/react-select": "^2.2.5",
    "@radix-ui/react-separator": "^1.1.7",
    "@radix-ui/react-slider": "^1.3.5",
    "@radix-ui/react-slot": "^1.2.3",
    "@radix-ui/react-switch": "^1.2.5",
    "@radix-ui/react-tabs": "^1.1.12",
    "@radix-ui/react-toast": "^1.2.14",
    "@radix-ui/react-toggle": "^1.1.9",
    "@radix-ui/react-toggle-group": "^1.1.10",
    "@radix-ui/react-tooltip": "^1.2.7",
    "@tanstack/react-query": "^5.83.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "cmdk": "^1.1.1",
    "date-fns": "^3.6.0",
    "embla-carousel-react": "^8.6.0",
    "input-otp": "^1.4.2",
    "lucide-react": "^0.462.0",
    "next-themes": "^0.3.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.61.1",
    "react-resizable-panels": "^2.1.9",
    "react-router-dom": "^6.30.1",
    "recharts": "^2.15.4",
    "sonner": "^1.7.4",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.9",
    "zod": "^3.25.76"
  },
  "devDependencies": {
    "@eslint/js": "^9.32.0",
    "@tailwindcss/typography": "^0.5.16",
    "@types/node": "^22.16.5",
    "@types/react": "^18.3.23",
    "@types/react-dom": "^18.3.7",
    "@vitejs/plugin-react-swc": "^3.11.0",
    "autoprefixer": "^10.4.21",
    "eslint": "^9.32.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^15.15.0",
    "lovable-tagger": "^1.1.9",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.8.3",
    "typescript-eslint": "^8.38.0",
    "vite": "^5.4.19"
  }
}



================================================
FILE: postcss.config.js
================================================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};



================================================
FILE: tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: ["./pages/**/*.{ts,tsx}", "./components/**/*.{ts,tsx}", "./app/**/*.{ts,tsx}", "./src/**/*.{ts,tsx}"],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        
        /* Financial Compliance Color System */
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
          glow: "hsl(var(--primary-glow))",
        },
        
        success: {
          DEFAULT: "hsl(var(--success))",
          foreground: "hsl(var(--success-foreground))",
          light: "hsl(var(--success-light))",
        },
        
        warning: {
          DEFAULT: "hsl(var(--warning))",
          foreground: "hsl(var(--warning-foreground))",
          light: "hsl(var(--warning-light))",
        },
        
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
          subtle: "hsl(var(--card-subtle))",
        },
        
        /* Professional Data Colors */
        neutral: {
          DEFAULT: "hsl(var(--neutral))",
          light: "hsl(var(--neutral-light))",
        },
        
        data: {
          positive: "hsl(var(--data-positive))",
          negative: "hsl(var(--data-negative))",
          neutral: "hsl(var(--data-neutral))",
        },
        
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;



================================================
FILE: tsconfig.app.json
================================================
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": false,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noImplicitAny": false,
    "noFallthroughCasesInSwitch": false,

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}



================================================
FILE: tsconfig.json
================================================
{
  "files": [],
  "references": [{ "path": "./tsconfig.app.json" }, { "path": "./tsconfig.node.json" }],
  "compilerOptions": {
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    },
    "noImplicitAny": false,
    "noUnusedParameters": false,
    "skipLibCheck": true,
    "allowJs": true,
    "noUnusedLocals": false,
    "strictNullChecks": false
  }
}



================================================
FILE: tsconfig.node.json
================================================
{
  "compilerOptions": {
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": false,
    "noUnusedParameters": false,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}



================================================
FILE: vite.config.ts
================================================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react-swc";
import path from "path";
import { componentTagger } from "lovable-tagger";

// https://vitejs.dev/config/
export default defineConfig(({ mode }) => ({
  server: {
    host: "::",
    port: 8080,
  },
  plugins: [react(), mode === "development" && componentTagger()].filter(Boolean),
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
}));



================================================
FILE: database/enhanced_inference_queue.sql
================================================
-- Enhanced InferenceQueue table with comprehensive response metrics
CREATE TABLE InferenceQueue (
    id TEXT PRIMARY KEY,
    request_type TEXT NOT NULL CHECK (request_type IN ('meeting_transcription', 'gpt', 'document_analysis', 'compliance_check')),
    input_data TEXT NOT NULL, -- JSON object with request data
    status TEXT DEFAULT 'pending' CHECK (status IN ('pending', 'processing', 'completed', 'failed')),
    priority INTEGER DEFAULT 5,
    user_id TEXT REFERENCES Users(id),
    client_id TEXT REFERENCES Clients(id),
    
    -- Timing fields
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    started_at TIMESTAMP,
    completed_at TIMESTAMP,
    
    -- Performance metrics
    queue_wait_time_ms INTEGER, -- Time spent waiting in queue
    processing_time_ms INTEGER, -- Actual AI processing time
    total_time_ms INTEGER, -- Total time from creation to completion
    
    -- AI model metrics
    model_used TEXT, -- Which AI model was used (e.g., 'gpt-4', 'whisper-1')
    model_version TEXT, -- Model version for audit trail
    confidence_score REAL, -- AI confidence in result (0-1)
    
    -- Token/usage metrics
    input_tokens INTEGER, -- Number of input tokens
    output_tokens INTEGER, -- Number of output tokens
    total_tokens INTEGER, -- Total tokens used
    
    -- Cost tracking
    cost_estimate_cents INTEGER, -- Estimated cost in cents
    
    -- Quality metrics
    retry_count INTEGER DEFAULT 0, -- Number of retries attempted
    error_count INTEGER DEFAULT 0, -- Number of errors encountered
    
    -- Results and errors
    result_data TEXT, -- JSON object with AI response
    error_message TEXT,
    
    -- Compliance metrics
    sec_compliant BOOLEAN DEFAULT FALSE, -- Whether result meets SEC requirements
    human_review_required BOOLEAN DEFAULT FALSE, -- Whether human review is needed
    
    -- System metrics
    server_id TEXT, -- Which server processed the request
    memory_used_mb INTEGER, -- Memory usage during processing
    cpu_usage_percent REAL -- CPU usage during processing
);

-- Indexes for performance
CREATE INDEX idx_inference_queue_status ON InferenceQueue(status);
CREATE INDEX idx_inference_queue_user ON InferenceQueue(user_id);
CREATE INDEX idx_inference_queue_created ON InferenceQueue(created_at);
CREATE INDEX idx_inference_queue_request_type ON InferenceQueue(request_type);
CREATE INDEX idx_inference_queue_priority ON InferenceQueue(priority DESC);

-- Composite indexes for common queries
CREATE INDEX idx_inference_queue_status_priority ON InferenceQueue(status, priority DESC);
CREATE INDEX idx_inference_queue_user_status ON InferenceQueue(user_id, status);


================================================
FILE: public/robots.txt
================================================
User-agent: Googlebot
Allow: /

User-agent: Bingbot
Allow: /

User-agent: Twitterbot
Allow: /

User-agent: facebookexternalhit
Allow: /

User-agent: *
Allow: /



================================================
FILE: src/App.css
================================================
#root {
  max-width: 1280px;
  margin: 0 auto;
  padding: 2rem;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}



================================================
FILE: src/App.tsx
================================================
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route } from "react-router-dom";
import { AuthProvider } from "./contexts/AuthContext";
import { ProtectedRoute } from "./components/ProtectedRoute";
import { MainLayout } from "./layout/MainLayout";
import Dashboard from "./pages/Dashboard";
import ProcessNotes from "./pages/ProcessNotes";
import ReviewQueue from "./pages/ReviewQueue";
import PendingReviews from "./pages/PendingReviews";
import FlaggedItems from "./pages/FlaggedItems";
import Security from "./pages/Security";
import Settings from "./pages/Settings";
import AuditTrail from "./pages/AuditTrail";
import Chat from "./pages/Chat";
import ClientIntegration from "./pages/ClientIntegration";
import FillTemplates from "./pages/FillTemplates";
import NotFound from "./pages/NotFound";
import Login from "./pages/Login";
import UpcomingFeatures from "./pages/UpcomingFeatures";

const queryClient = new QueryClient();

const App = () => (
  <QueryClientProvider client={queryClient}>
    <TooltipProvider>
      <Toaster />
      <Sonner />
      <BrowserRouter>
        <AuthProvider>
          <Routes>
            <Route path="/login" element={<Login />} />
            <Route path="/*" element={
              <ProtectedRoute>
                <MainLayout>
                  <Routes>
                    <Route path="/" element={<Dashboard />} />
                    <Route path="/process" element={<ProcessNotes />} />
                    <Route path="/review" element={<ReviewQueue />} />
                    <Route path="/review/pending" element={<PendingReviews />} />
                    <Route path="/review/flagged" element={<FlaggedItems />} />
                    <Route path="/security" element={<Security />} />
                    <Route path="/settings" element={<Settings />} />
                    <Route path="/audit" element={<AuditTrail />} />
                    <Route path="/chat" element={<Chat />} />
                    <Route path="/clients" element={<ClientIntegration />} />
                    <Route path="/features" element={<UpcomingFeatures />} />
                    <Route path="/templates" element={<FillTemplates />} />
                    {/* ADD ALL CUSTOM ROUTES ABOVE THE CATCH-ALL "*" ROUTE */}
                    <Route path="*" element={<NotFound />} />
                  </Routes>
                </MainLayout>
              </ProtectedRoute>
            } />
          </Routes>
        </AuthProvider>
      </BrowserRouter>
    </TooltipProvider>
  </QueryClientProvider>
);

export default App;



================================================
FILE: src/index.css
================================================
@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Financial Compliance Design System - All colors MUST be HSL */

@layer base {
  :root {
    /* Core Brand Colors - Financial Compliance Theme */
    --background: 210 17% 98%;
    --foreground: 215 25% 27%;

    /* Trust Blue - Primary brand color for financial services */
    --primary: 223 84% 31%;
    --primary-foreground: 0 0% 98%;
    --primary-glow: 223 84% 45%;

    /* Approval Green - For compliance and success states */
    --success: 158 64% 52%;
    --success-foreground: 0 0% 98%;
    --success-light: 158 64% 90%;

    /* Review Orange - For items needing attention */
    --warning: 25 95% 53%;
    --warning-foreground: 0 0% 98%;
    --warning-light: 25 95% 90%;

    /* Compliance Red - For violations and errors */
    --destructive: 0 84% 60%;
    --destructive-foreground: 0 0% 98%;

    /* Professional Grays */
    --muted: 210 17% 95%;
    --muted-foreground: 215 16% 47%;
    --neutral: 215 25% 27%;
    --neutral-light: 215 25% 85%;

    /* Card and Surface Colors */
    --card: 0 0% 100%;
    --card-foreground: 215 25% 27%;
    --card-subtle: 210 17% 99%;

    /* Interactive Elements */
    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 223 84% 31%;
    --accent: 210 17% 95%;
    --accent-foreground: 215 25% 27%;

    /* Popover and Dropdown */
    --popover: 0 0% 100%;
    --popover-foreground: 215 25% 27%;

    /* Secondary Action Colors */
    --secondary: 210 17% 95%;
    --secondary-foreground: 215 25% 27%;

    /* Design System Radius */
    --radius: 0.75rem;

    /* Financial Data Colors */
    --data-positive: 158 64% 52%;
    --data-negative: 0 84% 60%;
    --data-neutral: 215 16% 47%;

    /* Gradients for Premium Feel */
    --gradient-primary: linear-gradient(135deg, hsl(223 84% 31%), hsl(223 84% 45%));
    --gradient-success: linear-gradient(135deg, hsl(158 64% 52%), hsl(158 64% 60%));
    --gradient-subtle: linear-gradient(180deg, hsl(210 17% 99%), hsl(210 17% 95%));
    --gradient-trust: linear-gradient(135deg, hsl(223 84% 31%) 0%, hsl(215 84% 35%) 100%);

    /* Professional Shadows */
    --shadow-sm: 0 1px 2px 0 hsl(215 25% 27% / 0.05);
    --shadow-md: 0 4px 6px -1px hsl(215 25% 27% / 0.1), 0 2px 4px -1px hsl(215 25% 27% / 0.06);
    --shadow-lg: 0 10px 15px -3px hsl(215 25% 27% / 0.1), 0 4px 6px -2px hsl(215 25% 27% / 0.05);
    --shadow-compliance: 0 0 0 1px hsl(223 84% 31% / 0.1), 0 2px 4px hsl(223 84% 31% / 0.05);

    /* Animations */
    --transition-smooth: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    --transition-bounce: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);

    /* Sidebar - Professional Navigation */
    --sidebar-background: 215 25% 27%;
    --sidebar-foreground: 0 0% 98%;
    --sidebar-primary: 223 84% 31%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 215 25% 35%;
    --sidebar-accent-foreground: 0 0% 98%;
    --sidebar-border: 215 25% 35%;
    --sidebar-ring: 223 84% 45%;
  }

  .dark {
    --background: 215 25% 10%;
    --foreground: 0 0% 98%;

    --card: 215 25% 12%;
    --card-foreground: 0 0% 98%;
    --card-subtle: 215 25% 15%;

    --popover: 215 25% 12%;
    --popover-foreground: 0 0% 98%;

    --primary: 223 84% 45%;
    --primary-foreground: 0 0% 98%;
    --primary-glow: 223 84% 55%;

    --secondary: 215 25% 18%;
    --secondary-foreground: 0 0% 98%;

    --muted: 215 25% 18%;
    --muted-foreground: 215 16% 65%;

    --accent: 215 25% 18%;
    --accent-foreground: 0 0% 98%;

    --border: 215 25% 18%;
    --input: 215 25% 18%;
    --ring: 223 84% 45%;

    --sidebar-background: 215 25% 8%;
    --sidebar-foreground: 0 0% 98%;
    --sidebar-primary: 223 84% 45%;
    --sidebar-primary-foreground: 0 0% 98%;
    --sidebar-accent: 215 25% 15%;
    --sidebar-accent-foreground: 0 0% 98%;
    --sidebar-border: 215 25% 15%;
    --sidebar-ring: 223 84% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground font-sans antialiased;
    font-family: 'Inter', system-ui, -apple-system, sans-serif;
  }

  .font-mono {
    font-family: 'JetBrains Mono', 'Courier New', monospace;
  }

  /* Compliance Status Indicators */
  .compliance-approved {
    @apply text-success bg-success-light border border-success/20;
  }

  .compliance-pending {
    @apply text-warning bg-warning-light border border-warning/20;
  }

  .compliance-flagged {
    @apply text-destructive bg-destructive/5 border border-destructive/20;
  }

  /* Professional Data Tables */
  .data-table-header {
    @apply bg-muted/50 text-muted-foreground font-medium text-sm;
  }

  .data-row-hover {
    @apply hover:bg-accent/50 transition-colors cursor-pointer;
  }

  /* Gradient Backgrounds */
  .gradient-primary {
    background: var(--gradient-primary);
  }

  .gradient-trust {
    background: var(--gradient-trust);
  }

  .gradient-subtle {
    background: var(--gradient-subtle);
  }

  /* Professional Shadows */
  .shadow-compliance {
    box-shadow: var(--shadow-compliance);
  }

  /* Financial Status Indicators */
  .status-positive {
    @apply text-success;
  }

  .status-negative {
    @apply text-destructive;
  }

  .status-neutral {
    @apply text-muted-foreground;
  }

  /* Text clamping utilities */
  .line-clamp-1 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 1;
  }

  .line-clamp-2 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }

  .line-clamp-3 {
    overflow: hidden;
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 3;
  }
}




================================================
FILE: src/main.tsx
================================================
import { createRoot } from "react-dom/client";
import App from "./App.tsx";
import "./index.css";

createRoot(document.getElementById("root")!).render(<App />);



================================================
FILE: src/vite-env.d.ts
================================================
/// <reference types="vite/client" />



================================================
FILE: src/components/AppSidebar.tsx
================================================
import { useState } from "react";
import { LayoutDashboard, FileText, CheckSquare, MessageSquare, Users, Shield, Settings, Upload, Eye, AlertTriangle, File } from "lucide-react";
import { NavLink, useLocation } from "react-router-dom";
import { Sidebar, SidebarContent, SidebarGroup, SidebarGroupContent, SidebarGroupLabel, SidebarMenu, SidebarMenuButton, SidebarMenuItem, SidebarTrigger, useSidebar, SidebarHeader, SidebarFooter } from "@/components/ui/sidebar";
import { ComplianceStatus } from "./ComplianceStatus";
const mainItems = [{
  title: "Chat",
  url: "/chat",
  icon: MessageSquare
}, {
  title: "Process Notes",
  url: "/process",
  icon: Upload
}, {
  title: "Fill Templates",
  url: "/templates",
  icon: File
}];

const dashboardItems = [{
  title: "Dashboard",
  url: "/",
  icon: LayoutDashboard
}];

const complianceItems = [{
  title: "Audit Trail",
  url: "/audit",
  icon: Eye
}, {
  title: "Security",
  url: "/security",
  icon: Shield
}];

const upcomingItems = [{
  title: "Upcoming Features",
  url: "/features",
  icon: Users
}];

const reviewItems = [{
  title: "Review Queue",
  url: "/review",
  icon: CheckSquare
}, {
  title: "Pending Reviews",
  url: "/review/pending",
  icon: AlertTriangle,
  count: 5
}, {
  title: "Flagged Items",
  url: "/review/flagged",
  icon: Shield,
  count: 2
}];
const adminItems = [{
  title: "Settings",
  url: "/settings",
  icon: Settings
}];
export function AppSidebar() {
  const {
    state
  } = useSidebar();
  const location = useLocation();
  const currentPath = location.pathname;
  const collapsed = state === "collapsed";
  const isActive = (path: string) => {
    if (path === "/") return currentPath === "/";
    return currentPath.startsWith(path);
  };
  const getNavClass = (path: string) => isActive(path) ? "bg-sidebar-accent text-sidebar-accent-foreground font-medium border-r-2 border-primary" : "hover:bg-sidebar-accent/50 text-sidebar-foreground";
  return <Sidebar className="border-r border-sidebar-border">
      <SidebarHeader className="border-b border-sidebar-border p-4">
        <div className="flex items-center gap-3">
          <div className="w-8 h-8 bg-primary rounded-lg flex items-center justify-center">
            <img src="/lovable-uploads/5cfbb876-140b-4ac9-bc63-84e5fd416aa6.png" className="w-5 h-5" alt="Baker Group Logo" />
          </div>
          {!collapsed && <div>
              <h2 className="text-sm font-semibold text-sidebar-foreground">SEC Compliance AI</h2>
              <p className="text-xs text-sidebar-foreground/70">The Baker Group</p>
            </div>}
        </div>
      </SidebarHeader>

      <SidebarContent className="p-2 space-y-4">
        <SidebarGroup>
          <SidebarGroupLabel className="text-sidebar-foreground/70 text-xs font-medium uppercase tracking-wider">
            {!collapsed ? "Home" : ""}
          </SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {dashboardItems.map(item => <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <NavLink to={item.url} className={getNavClass(item.url)}>
                      <item.icon className="w-5 h-5" />
                      {!collapsed && <span>{item.title}</span>}
                    </NavLink>
                  </SidebarMenuButton>
                </SidebarMenuItem>)}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>

        <SidebarGroup>
          <SidebarGroupLabel className="text-sidebar-foreground/70 text-xs font-medium uppercase tracking-wider">
            {!collapsed ? "Main Navigation" : ""}
          </SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {mainItems.map(item => <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <NavLink to={item.url} className={getNavClass(item.url)}>
                      <item.icon className="w-5 h-5" />
                      {!collapsed && <span>{item.title}</span>}
                    </NavLink>
                  </SidebarMenuButton>
                </SidebarMenuItem>)}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>

        <SidebarGroup>
          <SidebarGroupLabel className="text-sidebar-foreground/70 text-xs font-medium uppercase tracking-wider">
            {!collapsed ? "Review Queue" : ""}
          </SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {reviewItems.map(item => <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <NavLink to={item.url} className={getNavClass(item.url)}>
                      <item.icon className="w-5 h-5" />
                      {!collapsed && <div className="flex items-center justify-between w-full">
                          <span>{item.title}</span>
                          {item.count && <span className="bg-warning text-warning-foreground px-2 py-0.5 rounded-full text-xs font-medium">
                              {item.count}
                            </span>}
                        </div>}
                    </NavLink>
                  </SidebarMenuButton>
                </SidebarMenuItem>)}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>

        <SidebarGroup>
          <SidebarGroupLabel className="text-sidebar-foreground/70 text-xs font-medium uppercase tracking-wider">
            {!collapsed ? "Compliance" : ""}
          </SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {complianceItems.map(item => <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <NavLink to={item.url} className={getNavClass(item.url)}>
                      <item.icon className="w-5 h-5" />
                      {!collapsed && <span>{item.title}</span>}
                    </NavLink>
                  </SidebarMenuButton>
                </SidebarMenuItem>)}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>

        <SidebarGroup>
          <SidebarGroupLabel className="text-sidebar-foreground/70 text-xs font-medium uppercase tracking-wider">
            {!collapsed ? "Upcoming Features" : ""}
          </SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {upcomingItems.map(item => <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <NavLink to={item.url} className={getNavClass(item.url)}>
                      <item.icon className="w-5 h-5" />
                      {!collapsed && <span>{item.title}</span>}
                    </NavLink>
                  </SidebarMenuButton>
                </SidebarMenuItem>)}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>

        <SidebarGroup>
          <SidebarGroupLabel className="text-sidebar-foreground/70 text-xs font-medium uppercase tracking-wider">
            {!collapsed ? "Administration" : ""}
          </SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {adminItems.map(item => <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <NavLink to={item.url} className={getNavClass(item.url)}>
                      <item.icon className="w-5 h-5" />
                      {!collapsed && <span>{item.title}</span>}
                    </NavLink>
                  </SidebarMenuButton>
                </SidebarMenuItem>)}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>

      <SidebarFooter className="border-t border-sidebar-border p-4">
        {!collapsed && <div className="space-y-2">
            <ComplianceStatus status="secure" size="sm" />
            <p className="text-xs text-sidebar-foreground/70">
              AES-256 Encrypted
            </p>
          </div>}
      </SidebarFooter>
    </Sidebar>;
}


================================================
FILE: src/components/ComplianceStatus.tsx
================================================
import { CheckCircle, AlertCircle, XCircle, Clock, Shield } from "lucide-react";
import { cn } from "@/lib/utils";

interface ComplianceStatusProps {
  status: "approved" | "pending" | "flagged" | "in_review" | "secure";
  children?: React.ReactNode;
  showIcon?: boolean;
  size?: "sm" | "default" | "lg";
  className?: string;
}

const statusConfig = {
  approved: {
    icon: CheckCircle,
    className: "compliance-approved",
    text: "Approved"
  },
  pending: {
    icon: Clock,
    className: "compliance-pending",
    text: "Pending Review"
  },
  flagged: {
    icon: XCircle,
    className: "compliance-flagged",
    text: "Compliance Flag"
  },
  in_review: {
    icon: AlertCircle,
    className: "compliance-pending",
    text: "In Review"
  },
  secure: {
    icon: Shield,
    className: "compliance-approved",
    text: "Secure"
  }
};

export function ComplianceStatus({ 
  status, 
  children, 
  showIcon = true, 
  size = "default",
  className 
}: ComplianceStatusProps) {
  const config = statusConfig[status];
  const Icon = config.icon;
  
  const sizeClasses = {
    sm: "px-2 py-1 text-xs",
    default: "px-3 py-1.5 text-sm",
    lg: "px-4 py-2 text-base"
  };
  
  return (
    <span className={cn(
      "inline-flex items-center gap-1.5 rounded-full font-medium transition-all",
      config.className,
      sizeClasses[size],
      className
    )}>
      {showIcon && <Icon className="w-4 h-4" />}
      {children || config.text}
    </span>
  );
}


================================================
FILE: src/components/FinancialMetric.tsx
================================================
import { TrendingUp, TrendingDown, Minus } from "lucide-react";
import { cn } from "@/lib/utils";

interface FinancialMetricProps {
  label: string;
  value: string | number;
  change?: number;
  changeType?: "percentage" | "absolute";
  trend?: "up" | "down" | "neutral";
  format?: "currency" | "percentage" | "number";
  size?: "sm" | "default" | "lg";
  className?: string;
}

export function FinancialMetric({
  label,
  value,
  change,
  changeType = "percentage",
  trend,
  format = "number",
  size = "default",
  className
}: FinancialMetricProps) {
  
  const formatValue = (val: string | number) => {
    if (format === "currency" && typeof val === "number") {
      return new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
      }).format(val);
    }
    
    if (format === "percentage" && typeof val === "number") {
      return `${val}%`;
    }
    
    return val;
  };

  const getTrendColor = (trendType?: "up" | "down" | "neutral") => {
    switch (trendType) {
      case "up":
        return "status-positive";
      case "down":
        return "status-negative";
      default:
        return "status-neutral";
    }
  };

  const getTrendIcon = (trendType?: "up" | "down" | "neutral") => {
    switch (trendType) {
      case "up":
        return TrendingUp;
      case "down":
        return TrendingDown;
      default:
        return Minus;
    }
  };

  const sizeClasses = {
    sm: {
      value: "text-lg font-semibold",
      label: "text-xs text-muted-foreground",
      change: "text-xs"
    },
    default: {
      value: "text-2xl font-bold",
      label: "text-sm text-muted-foreground",
      change: "text-sm"
    },
    lg: {
      value: "text-3xl font-bold",
      label: "text-base text-muted-foreground",
      change: "text-base"
    }
  };

  const TrendIcon = getTrendIcon(trend);

  return (
    <div className={cn("space-y-1", className)}>
      <p className={sizeClasses[size].label}>{label}</p>
      <div className="flex items-end gap-2">
        <span className={cn("font-mono", sizeClasses[size].value)}>
          {formatValue(value)}
        </span>
        {change !== undefined && (
          <div className={cn(
            "flex items-center gap-1",
            sizeClasses[size].change,
            getTrendColor(trend)
          )}>
            <TrendIcon className="w-3 h-3" />
            <span className="font-medium">
              {changeType === "percentage" ? `${change}%` : change}
            </span>
          </div>
        )}
      </div>
    </div>
  );
}


================================================
FILE: src/components/ProtectedRoute.tsx
================================================
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Loader2 } from 'lucide-react';

interface ProtectedRouteProps {
  children: React.ReactNode;
  requiredRole?: string[];
}

export const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ 
  children, 
  requiredRole 
}) => {
  const { isAuthenticated, isLoading, user } = useAuth();
  const location = useLocation();

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="flex items-center space-x-2">
          <Loader2 className="h-6 w-6 animate-spin text-primary" />
          <span className="text-muted-foreground">Authenticating...</span>
        </div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  if (requiredRole && user && !requiredRole.includes(user.role)) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-destructive mb-2">Access Denied</h2>
          <p className="text-muted-foreground">
            You don't have permission to access this resource.
          </p>
        </div>
      </div>
    );
  }

  return <>{children}</>;
};


================================================
FILE: src/components/TemplateCompletionModal.tsx
================================================
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Progress } from '@/components/ui/progress';
import { 
  User, 
  DollarSign, 
  TrendingUp, 
  Shield, 
  Calendar,
  FileText,
  CheckCircle,
  ArrowLeft,
  ArrowRight
} from 'lucide-react';
import { mockClients, mockPortfolios } from '@/data/mockData';

interface TemplateCompletionModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  template: {
    name: string;
    category: string;
  } | null;
}

type Step = 'template' | 'client' | 'portfolio' | 'details' | 'compliance';

export function TemplateCompletionModal({ open, onOpenChange, template }: TemplateCompletionModalProps) {
  const [currentStep, setCurrentStep] = useState<Step>('template');
  const [selectedClient, setSelectedClient] = useState<string>('');
  const [selectedPortfolio, setSelectedPortfolio] = useState<string>('');
  const [meetingDate, setMeetingDate] = useState('');
  const [meetingType, setMeetingType] = useState('');
  const [objectives, setObjectives] = useState('');

  const steps: { key: Step; title: string; description: string }[] = [
    { key: 'template', title: 'Template Details', description: 'Confirm template selection' },
    { key: 'client', title: 'Select Client', description: 'Choose client from CRM' },
    { key: 'portfolio', title: 'Portfolio Review', description: 'Review portfolio data' },
    { key: 'details', title: 'Meeting Details', description: 'Enter meeting information' },
    { key: 'compliance', title: 'Compliance Check', description: 'Verify and complete' }
  ];

  const currentStepIndex = steps.findIndex(step => step.key === currentStep);
  const progressPercent = ((currentStepIndex + 1) / steps.length) * 100;

  const handleNext = () => {
    if (currentStepIndex < steps.length - 1) {
      setCurrentStep(steps[currentStepIndex + 1].key);
    }
  };

  const handleBack = () => {
    if (currentStepIndex > 0) {
      setCurrentStep(steps[currentStepIndex - 1].key);
    }
  };

  const selectedClientData = mockClients.find(client => client.id === selectedClient);
  const selectedPortfolioData = mockPortfolios.find(portfolio => portfolio.client_id === selectedClient);

  const canProceed = () => {
    switch (currentStep) {
      case 'template': return true;
      case 'client': return selectedClient !== '';
      case 'portfolio': return selectedPortfolio !== '';
      case 'details': return meetingDate && meetingType;
      case 'compliance': return true;
      default: return false;
    }
  };

  const handleComplete = () => {
    // Here would be the actual completion logic
    console.log('Template completion:', {
      template,
      selectedClient,
      selectedPortfolio,
      meetingDate,
      meetingType,
      objectives
    });
    onOpenChange(false);
    // Reset form
    setCurrentStep('template');
    setSelectedClient('');
    setSelectedPortfolio('');
    setMeetingDate('');
    setMeetingType('');
    setObjectives('');
  };

  if (!template) return null;

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-3">
            <FileText className="w-5 h-5 text-primary" />
            Complete Template: {template.name}
          </DialogTitle>
        </DialogHeader>

        {/* Progress Bar */}
        <div className="space-y-2">
          <div className="flex justify-between text-sm">
            <span>Step {currentStepIndex + 1} of {steps.length}</span>
            <span>{Math.round(progressPercent)}% Complete</span>
          </div>
          <Progress value={progressPercent} className="w-full" />
          <p className="text-sm text-muted-foreground">
            {steps[currentStepIndex].description}
          </p>
        </div>

        <Separator />

        {/* Step Content */}
        <div className="space-y-6">
          {currentStep === 'template' && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Shield className="w-5 h-5 text-success" />
                  Template Information
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label>Template Name</Label>
                    <p className="font-medium">{template.name}</p>
                  </div>
                  <div>
                    <Label>Category</Label>
                    <Badge variant="secondary">{template.category}</Badge>
                  </div>
                </div>
                <div>
                  <Label>Description</Label>
                  <p className="text-sm text-muted-foreground">
                    SEC-compliant template for standardized documentation and regulatory compliance.
                  </p>
                </div>
              </CardContent>
            </Card>
          )}

          {currentStep === 'client' && (
            <div className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <User className="w-5 h-5 text-primary" />
                    Select Client
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-4">
                    <div>
                      <Label htmlFor="client-select">Client</Label>
                      <Select value={selectedClient} onValueChange={setSelectedClient}>
                        <SelectTrigger>
                          <SelectValue placeholder="Choose a client from CRM" />
                        </SelectTrigger>
                        <SelectContent>
                          {mockClients.map((client) => (
                            <SelectItem key={client.id} value={client.id}>
                              <div className="flex items-center justify-between w-full">
                                <span>{client.name}</span>
                                <span className="text-xs text-muted-foreground ml-2">
                                  {client.account_number}
                                </span>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    {selectedClientData && (
                      <Card className="bg-muted/50">
                        <CardContent className="p-4">
                          <div className="grid grid-cols-2 gap-4 text-sm">
                            <div>
                              <Label>Risk Tolerance</Label>
                              <p>{selectedClientData.risk_tolerance}</p>
                            </div>
                            <div>
                              <Label>Investment Objective</Label>
                              <p>{selectedClientData.investment_objective}</p>
                            </div>
                            <div>
                              <Label>Primary Advisor</Label>
                              <p>{selectedClientData.primary_advisor}</p>
                            </div>
                            <div>
                              <Label>Relationship Type</Label>
                              <p>{selectedClientData.relationship_type}</p>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    )}
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {currentStep === 'portfolio' && selectedPortfolioData && (
            <div className="space-y-4">
              <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <TrendingUp className="w-5 h-5 text-success" />
                    Portfolio Overview
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="grid grid-cols-3 gap-4">
                    <div className="text-center p-4 bg-muted/50 rounded-lg">
                      <DollarSign className="w-8 h-8 mx-auto mb-2 text-primary" />
                      <p className="text-2xl font-bold">
                        ${selectedPortfolioData.total_portfolio_value.toLocaleString()}
                      </p>
                      <p className="text-sm text-muted-foreground">Total Value</p>
                    </div>
                    <div className="text-center p-4 bg-muted/50 rounded-lg">
                      <TrendingUp className="w-8 h-8 mx-auto mb-2 text-success" />
                      <p className="text-2xl font-bold">
                        +{selectedPortfolioData.performance_summary['Year-to-Date']}%
                      </p>
                      <p className="text-sm text-muted-foreground">YTD Performance</p>
                    </div>
                    <div className="text-center p-4 bg-muted/50 rounded-lg">
                      <Shield className="w-8 h-8 mx-auto mb-2 text-neutral" />
                      <p className="text-2xl font-bold">{selectedClientData?.risk_tolerance}</p>
                      <p className="text-sm text-muted-foreground">Risk Profile</p>
                    </div>
                  </div>

                  <div>
                    <Label>Asset Allocation</Label>
                    <div className="grid grid-cols-2 gap-2 text-sm mt-2">
                      {Object.entries(selectedPortfolioData.asset_allocation).map(([asset, percentage]) => (
                        <div key={asset} className="flex justify-between">
                          <span>{asset}</span>
                          <span className="font-medium">{percentage}%</span>
                        </div>
                      ))}
                    </div>
                  </div>

                  <div>
                    <Label htmlFor="portfolio-select">Portfolio Account</Label>
                    <Select value={selectedPortfolio} onValueChange={setSelectedPortfolio}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select portfolio account" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value={selectedPortfolioData.albridge_account}>
                          {selectedPortfolioData.albridge_account} - Primary Account
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </CardContent>
              </Card>
            </div>
          )}

          {currentStep === 'details' && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Calendar className="w-5 h-5 text-primary" />
                  Meeting Details
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="meeting-date">Meeting Date</Label>
                    <Input
                      id="meeting-date"
                      type="date"
                      value={meetingDate}
                      onChange={(e) => setMeetingDate(e.target.value)}
                    />
                  </div>
                  <div>
                    <Label htmlFor="meeting-type">Meeting Type</Label>
                    <Select value={meetingType} onValueChange={setMeetingType}>
                      <SelectTrigger>
                        <SelectValue placeholder="Select meeting type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="quarterly">Quarterly Review</SelectItem>
                        <SelectItem value="annual">Annual Planning</SelectItem>
                        <SelectItem value="initial">Initial Consultation</SelectItem>
                        <SelectItem value="ad-hoc">Ad-hoc Meeting</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
                <div>
                  <Label htmlFor="objectives">Meeting Objectives (Optional)</Label>
                  <Textarea
                    id="objectives"
                    placeholder="Enter meeting objectives and agenda items..."
                    value={objectives}
                    onChange={(e) => setObjectives(e.target.value)}
                    rows={4}
                  />
                </div>
              </CardContent>
            </Card>
          )}

          {currentStep === 'compliance' && (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <CheckCircle className="w-5 h-5 text-success" />
                  Compliance Verification
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-1 gap-4">
                  <div className="flex items-center justify-between p-4 bg-success/10 border border-success/20 rounded-lg">
                    <div className="flex items-center gap-3">
                      <CheckCircle className="w-5 h-5 text-success" />
                      <span>SEC Compliance Requirements</span>
                    </div>
                    <Badge variant="secondary">Verified</Badge>
                  </div>
                  <div className="flex items-center justify-between p-4 bg-success/10 border border-success/20 rounded-lg">
                    <div className="flex items-center gap-3">
                      <CheckCircle className="w-5 h-5 text-success" />
                      <span>Client Data Validation</span>
                    </div>
                    <Badge variant="secondary">Verified</Badge>
                  </div>
                  <div className="flex items-center justify-between p-4 bg-success/10 border border-success/20 rounded-lg">
                    <div className="flex items-center gap-3">
                      <CheckCircle className="w-5 h-5 text-success" />
                      <span>Template Completion Check</span>
                    </div>
                    <Badge variant="secondary">Complete</Badge>
                  </div>
                </div>

                <div className="bg-muted/50 p-4 rounded-lg">
                  <h4 className="font-medium mb-2">Summary</h4>
                  <div className="text-sm space-y-1">
                    <p><strong>Template:</strong> {template.name}</p>
                    <p><strong>Client:</strong> {selectedClientData?.name}</p>
                    <p><strong>Meeting Date:</strong> {meetingDate}</p>
                    <p><strong>Meeting Type:</strong> {meetingType}</p>
                    {objectives && <p><strong>Objectives:</strong> {objectives}</p>}
                  </div>
                </div>
              </CardContent>
            </Card>
          )}
        </div>

        {/* Footer Actions */}
        <Separator />
        <div className="flex items-center justify-between">
          <Button
            variant="outline"
            onClick={handleBack}
            disabled={currentStepIndex === 0}
          >
            <ArrowLeft className="w-4 h-4 mr-2" />
            Back
          </Button>

          <div className="flex gap-2">
            <Button variant="ghost" onClick={() => onOpenChange(false)}>
              Cancel
            </Button>
            {currentStepIndex < steps.length - 1 ? (
              <Button onClick={handleNext} disabled={!canProceed()}>
                Next
                <ArrowRight className="w-4 h-4 ml-2" />
              </Button>
            ) : (
              <Button onClick={handleComplete} disabled={!canProceed()}>
                <CheckCircle className="w-4 h-4 mr-2" />
                Complete Template
              </Button>
            )}
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}


================================================
FILE: src/components/UserMenu.tsx
================================================
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/button';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { Avatar, AvatarFallback } from '@/components/ui/avatar';
import { Badge } from '@/components/ui/badge';
import { User, LogOut, Settings, Shield, Clock } from 'lucide-react';

export const UserMenu = () => {
  const { user, logout } = useAuth();

  if (!user) return null;

  const getInitials = (name: string) => {
    return name
      .split(' ')
      .map(n => n[0])
      .join('')
      .toUpperCase();
  };

  const getRoleBadgeVariant = (role: string) => {
    switch (role) {
      case 'CCO':
        return 'destructive';
      case 'Administrator':
        return 'secondary';
      case 'Financial Planner':
        return 'default';
      case 'Analyst':
        return 'outline';
      default:
        return 'outline';
    }
  };

  const formatLastLogin = (dateString: string) => {
    return new Date(dateString).toLocaleString();
  };

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" className="relative h-10 w-10 rounded-full">
          <Avatar className="h-10 w-10">
            <AvatarFallback className="bg-primary/10 text-primary font-medium">
              {getInitials(user.name)}
            </AvatarFallback>
          </Avatar>
        </Button>
      </DropdownMenuTrigger>
      
      <DropdownMenuContent className="w-80" align="end" forceMount>
        <DropdownMenuLabel className="font-normal">
          <div className="flex flex-col space-y-2">
            <div className="flex items-center space-x-2">
              <p className="text-sm font-medium leading-none">{user.name}</p>
              <Badge variant={getRoleBadgeVariant(user.role)} className="text-xs">
                {user.role}
              </Badge>
            </div>
            <p className="text-xs leading-none text-muted-foreground">
              {user.email}
            </p>
            <div className="flex items-center space-x-1 text-xs text-muted-foreground">
              <Shield className="h-3 w-3" />
              <span>{user.department}</span>
              <span>•</span>
              <span>ID: {user.employeeId}</span>
            </div>
            <div className="flex items-center space-x-1 text-xs text-muted-foreground">
              <Clock className="h-3 w-3" />
              <span>Last login: {formatLastLogin(user.lastLogin)}</span>
            </div>
          </div>
        </DropdownMenuLabel>
        
        <DropdownMenuSeparator />
        
        <DropdownMenuItem className="cursor-pointer">
          <User className="mr-2 h-4 w-4" />
          <span>Profile</span>
        </DropdownMenuItem>
        
        <DropdownMenuItem className="cursor-pointer">
          <Settings className="mr-2 h-4 w-4" />
          <span>Settings</span>
        </DropdownMenuItem>
        
        <DropdownMenuSeparator />
        
        <DropdownMenuItem 
          className="cursor-pointer text-destructive focus:text-destructive"
          onClick={logout}
        >
          <LogOut className="mr-2 h-4 w-4" />
          <span>Log out</span>
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  );
};


================================================
FILE: src/components/chat/ConversationWindow.tsx
================================================
import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card } from '@/components/ui/card';
import { 
  Send, 
  Paperclip, 
  Download,
  Users,
  TrendingUp,
  Shield,
  Brain,
  Calculator,
  PiggyBank,
  ChevronDown,
  Bot,
  User
} from 'lucide-react';
import { Message, CustomGPT, Thread } from '@/types/chat';
import { cn } from '@/lib/utils';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { ComplianceStatus } from '@/components/ComplianceStatus';

interface ConversationWindowProps {
  thread?: Thread;
  messages: Message[];
  customGPTs: CustomGPT[];
  selectedCustomGPTId: string;
  onCustomGPTChange: (customGPTId: string) => void;
  onSendMessage: (content: string, attachments?: File[]) => void;
}

const specializationIcons = {
  crm: Users,
  portfolio: TrendingUp,
  compliance: Shield,
  general: Brain,
  retirement: PiggyBank,
  tax: Calculator
};

export function ConversationWindow({
  thread,
  messages,
  customGPTs,
  selectedCustomGPTId,
  onCustomGPTChange,
  onSendMessage
}: ConversationWindowProps) {
  const [messageInput, setMessageInput] = useState('');
  const [attachments, setAttachments] = useState<File[]>([]);
  const [isTyping, setIsTyping] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  const selectedCustomGPT = customGPTs.find(gpt => gpt.id === selectedCustomGPTId);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  const handleSendMessage = () => {
    if (!messageInput.trim() && attachments.length === 0) return;

    onSendMessage(messageInput, attachments);
    setMessageInput('');
    setAttachments([]);
    
    // Simulate AI typing
    setIsTyping(true);
    setTimeout(() => setIsTyping(false), 2000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files) {
      const newFiles = Array.from(e.target.files);
      setAttachments(prev => [...prev, ...newFiles]);
    }
  };

  const removeAttachment = (index: number) => {
    setAttachments(prev => prev.filter((_, i) => i !== index));
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const formatTime = (timestamp: string) => {
    return new Date(timestamp).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  if (!thread) {
    return (
      <div className="flex-1 flex items-center justify-center bg-gradient-subtle">
        <div className="text-center space-y-4 max-w-md">
          <div className="text-6xl">💬</div>
          <h3 className="text-xl font-semibold">Welcome to SecureChat AI</h3>
          <p className="text-muted-foreground">
            Select an existing thread or start a new conversation with one of your CustomGPT assistants.
          </p>
          <div className="flex items-center justify-center gap-2 text-sm text-muted-foreground">
            <Shield className="w-4 h-4" />
            <span>SEC-Compliant • Audit Trail Enabled</span>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="flex-1 flex flex-col bg-background">
      {/* Header */}
      <div className="border-b p-4 bg-card">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="font-semibold text-lg">{thread.title}</h2>
            <div className="flex items-center gap-2 text-sm text-muted-foreground mt-1">
              <span>{messages.length} messages</span>
              <span>•</span>
              <span>Last activity: {formatTime(thread.updatedAt)}</span>
              {thread.tags && thread.tags.length > 0 && (
                <>
                  <span>•</span>
                  <div className="flex gap-1">
                    {thread.tags.map(tag => (
                      <Badge key={tag} variant="secondary" className="text-xs">
                        {tag}
                      </Badge>
                    ))}
                  </div>
                </>
              )}
            </div>
          </div>
          
          {/* CustomGPT Selector */}
          <div className="flex items-center gap-3">
            <ComplianceStatus status="secure" size="sm" />
            <Select value={selectedCustomGPTId} onValueChange={onCustomGPTChange}>
              <SelectTrigger className="w-48">
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {customGPTs.map(gpt => {
                  const Icon = specializationIcons[gpt.specialization] || Brain;
                  return (
                    <SelectItem key={gpt.id} value={gpt.id}>
                      <div className="flex items-center gap-2">
                        <Icon className="w-4 h-4" />
                        <span>{gpt.name}</span>
                        {!gpt.isActive && <Badge variant="secondary" className="text-xs">Inactive</Badge>}
                      </div>
                    </SelectItem>
                  );
                })}
              </SelectContent>
            </Select>
          </div>
        </div>
      </div>

      {/* Messages */}
      <ScrollArea className="flex-1 p-4">
        <div className="space-y-4 max-w-4xl mx-auto">
          {messages.map((message) => {
            const messageCustomGPT = customGPTs.find(gpt => gpt.id === message.customGPTId);
            const Icon = message.role === 'user' ? User : 
              (messageCustomGPT ? specializationIcons[messageCustomGPT.specialization] || Bot : Bot);

            return (
              <div
                key={message.id}
                className={cn(
                  "flex gap-3",
                  message.role === 'user' ? 'justify-end' : 'justify-start'
                )}
              >
                {message.role === 'assistant' && (
                  <div className="flex-shrink-0 w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
                    <Icon className="w-4 h-4 text-primary" />
                  </div>
                )}

                <Card className={cn(
                  "max-w-2xl p-4",
                  message.role === 'user' 
                    ? "bg-primary text-primary-foreground ml-12" 
                    : "bg-card"
                )}>
                  {/* Message header for assistant */}
                  {message.role === 'assistant' && messageCustomGPT && (
                    <div className="flex items-center gap-2 mb-2 pb-2 border-b">
                      <Badge variant="secondary" className="text-xs">
                        <Icon className="w-3 h-3 mr-1" />
                        {messageCustomGPT.name}
                      </Badge>
                      <span className="text-xs text-muted-foreground">
                        {formatTime(message.timestamp)}
                      </span>
                    </div>
                  )}

                  {/* Message content */}
                  <div className="prose prose-sm max-w-none">
                    {message.content.split('\n').map((line, index) => (
                      <p key={index} className={message.role === 'user' ? 'text-primary-foreground' : ''}>
                        {line}
                      </p>
                    ))}
                  </div>

                  {/* Attachments */}
                  {message.attachments && message.attachments.length > 0 && (
                    <div className="mt-3 pt-3 border-t space-y-2">
                      {message.attachments.map((attachment) => (
                        <div key={attachment.id} className="flex items-center gap-2 text-sm">
                          <Paperclip className="w-4 h-4" />
                          <span className="flex-1 truncate">{attachment.name}</span>
                          <span className="text-xs text-muted-foreground">
                            {formatFileSize(attachment.size)}
                          </span>
                          <Button size="sm" variant="ghost" className="h-6 w-6 p-0">
                            <Download className="w-3 h-3" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  )}

                  {/* MCP Tool Interactions */}
                  {message.mcpToolInteractions && message.mcpToolInteractions.length > 0 && (
                    <div className="mt-3 pt-3 border-t">
                      <div className="text-xs text-muted-foreground mb-2">Tool Interactions:</div>
                      {message.mcpToolInteractions.map((interaction, index) => (
                        <Badge key={index} variant="outline" className="text-xs mr-1 mb-1">
                          {interaction.toolName}: {interaction.action}
                        </Badge>
                      ))}
                    </div>
                  )}

                  {/* Compliance flags */}
                  {message.complianceFlags && message.complianceFlags.length > 0 && (
                    <div className="mt-3 pt-3 border-t">
                      <div className="flex items-center gap-2">
                        <Shield className="w-4 h-4 text-warning" />
                        <span className="text-xs text-warning">Compliance Review Required</span>
                      </div>
                    </div>
                  )}

                  {/* Timestamp for user messages */}
                  {message.role === 'user' && (
                    <div className="text-xs text-primary-foreground/70 mt-2">
                      {formatTime(message.timestamp)}
                    </div>
                  )}
                </Card>

                {message.role === 'user' && (
                  <div className="flex-shrink-0 w-8 h-8 rounded-full bg-secondary flex items-center justify-center">
                    <User className="w-4 h-4 text-secondary-foreground" />
                  </div>
                )}
              </div>
            );
          })}

          {/* Typing indicator */}
          {isTyping && (
            <div className="flex gap-3">
              <div className="flex-shrink-0 w-8 h-8 rounded-full bg-primary/10 flex items-center justify-center">
                <Bot className="w-4 h-4 text-primary animate-pulse" />
              </div>
              <Card className="bg-card p-4">
                <div className="flex items-center gap-2 text-muted-foreground">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 rounded-full bg-muted-foreground animate-bounce" />
                    <div className="w-2 h-2 rounded-full bg-muted-foreground animate-bounce" style={{ animationDelay: '0.1s' }} />
                    <div className="w-2 h-2 rounded-full bg-muted-foreground animate-bounce" style={{ animationDelay: '0.2s' }} />
                  </div>
                  <span className="text-sm">{selectedCustomGPT?.name} is thinking...</span>
                </div>
              </Card>
            </div>
          )}

          <div ref={messagesEndRef} />
        </div>
      </ScrollArea>

      {/* Input Area */}
      <div className="border-t p-4 bg-card">
        <div className="max-w-4xl mx-auto">
          {/* Attachments preview */}
          {attachments.length > 0 && (
            <div className="mb-3 space-y-2">
              {attachments.map((file, index) => (
                <div key={index} className="flex items-center gap-2 p-2 bg-accent/50 rounded text-sm">
                  <Paperclip className="w-4 h-4" />
                  <span className="flex-1 truncate">{file.name}</span>
                  <span className="text-xs text-muted-foreground">{formatFileSize(file.size)}</span>
                  <Button 
                    size="sm" 
                    variant="ghost" 
                    className="h-6 w-6 p-0"
                    onClick={() => removeAttachment(index)}
                  >
                    ×
                  </Button>
                </div>
              ))}
            </div>
          )}

          <div className="flex gap-2">
            <div className="flex-1 relative">
              <Textarea
                ref={textareaRef}
                value={messageInput}
                onChange={(e) => setMessageInput(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder={`Message ${selectedCustomGPT?.name || 'AI Assistant'}...`}
                className="min-h-[60px] max-h-32 resize-none pr-12"
                rows={2}
              />
              <Button
                size="sm"
                variant="ghost"
                className="absolute bottom-2 right-2 h-8 w-8 p-0"
                onClick={() => fileInputRef.current?.click()}
              >
                <Paperclip className="w-4 h-4" />
              </Button>
            </div>
            <Button 
              onClick={handleSendMessage}
              disabled={!messageInput.trim() && attachments.length === 0}
              className="h-[60px] px-6"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>

          <input
            ref={fileInputRef}
            type="file"
            multiple
            accept=".pdf,.doc,.docx,.txt,.xlsx,.xls"
            className="hidden"
            onChange={handleFileSelect}
          />

          <div className="flex items-center justify-between mt-2 text-xs text-muted-foreground">
            <span>Press Enter to send, Shift+Enter for new line</span>
            <div className="flex items-center gap-2">
              <Shield className="w-3 h-3" />
              <span>All conversations are SEC-compliant and audit-logged</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


================================================
FILE: src/components/chat/CustomGPTModal.tsx
================================================
import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Switch } from '@/components/ui/switch';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Users, TrendingUp, Shield, Brain, Calculator, PiggyBank } from 'lucide-react';
import { CustomGPT, SystemPromptTemplate } from '@/types/chat';
import { mockSystemPromptTemplates } from '@/data/mockChatData';
import { useToast } from '@/hooks/use-toast';

interface CustomGPTModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  customGPT?: CustomGPT;
  mode: 'create' | 'edit';
  onSave: (customGPT: CustomGPT) => void;
}

const specializationConfig = {
  crm: { icon: Users, label: 'CRM Assistant', color: 'blue' },
  portfolio: { icon: TrendingUp, label: 'Portfolio Analyzer', color: 'green' },
  compliance: { icon: Shield, label: 'Compliance Monitor', color: 'red' },
  general: { icon: Brain, label: 'General Advisor', color: 'purple' },
  retirement: { icon: PiggyBank, label: 'Retirement Planner', color: 'indigo' },
  tax: { icon: Calculator, label: 'Tax Strategist', color: 'orange' }
};

export function CustomGPTModal({ open, onOpenChange, customGPT, mode, onSave }: CustomGPTModalProps) {
  const { toast } = useToast();
  const [formData, setFormData] = useState<Partial<CustomGPT>>({
    name: customGPT?.name || '',
    description: customGPT?.description || '',
    systemPrompt: customGPT?.systemPrompt || '',
    specialization: customGPT?.specialization || 'general',
    color: customGPT?.color || 'purple',
    icon: customGPT?.icon || 'Brain',
    mcpToolsEnabled: customGPT?.mcpToolsEnabled || {
      redtailCRM: false,
      albridgePortfolio: false,
      blackDiamond: false
    },
    isActive: customGPT?.isActive ?? true
  });

  const [selectedTemplate, setSelectedTemplate] = useState<string>('');

  const handleTemplateSelect = (templateId: string) => {
    const template = mockSystemPromptTemplates.find(t => t.id === templateId);
    if (template) {
      const config = specializationConfig[template.specialization];
      setFormData(prev => ({
        ...prev,
        name: template.name,
        description: template.description,
        systemPrompt: template.prompt,
        specialization: template.specialization,
        color: config.color,
        icon: config.icon.name,
        mcpToolsEnabled: {
          redtailCRM: template.mcpToolsRecommended.redtailCRM,
          albridgePortfolio: template.mcpToolsRecommended.albridgePortfolio,
          blackDiamond: template.mcpToolsRecommended.blackDiamond
        }
      }));
      setSelectedTemplate(templateId);
    }
  };

  const handleSpecializationChange = (specialization: CustomGPT['specialization']) => {
    const config = specializationConfig[specialization];
    setFormData(prev => ({
      ...prev,
      specialization,
      color: config.color,
      icon: config.icon.name
    }));
  };

  const handleSave = () => {
    if (!formData.name || !formData.systemPrompt) {
      toast({
        title: "Validation Error",
        description: "Name and system prompt are required fields.",
        variant: "destructive"
      });
      return;
    }

    const savedGPT: CustomGPT = {
      id: customGPT?.id || `gpt_${Date.now()}`,
      name: formData.name!,
      description: formData.description!,
      systemPrompt: formData.systemPrompt!,
      specialization: formData.specialization!,
      color: formData.color!,
      icon: formData.icon!,
      mcpToolsEnabled: formData.mcpToolsEnabled!,
      isActive: formData.isActive!,
      createdAt: customGPT?.createdAt || new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };

    onSave(savedGPT);
    toast({
      title: mode === 'create' ? "CustomGPT Created" : "CustomGPT Updated",
      description: `${formData.name} has been ${mode === 'create' ? 'created' : 'updated'} successfully.`
    });
    onOpenChange(false);
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle>
            {mode === 'create' ? 'Create New CustomGPT' : 'Edit CustomGPT'}
          </DialogTitle>
        </DialogHeader>

        <Tabs defaultValue="basic" className="space-y-6">
          <TabsList className="grid w-full grid-cols-3">
            <TabsTrigger value="basic">Basic Settings</TabsTrigger>
            <TabsTrigger value="prompt">System Prompt</TabsTrigger>
            <TabsTrigger value="integrations">MCP Integrations</TabsTrigger>
          </TabsList>

          <TabsContent value="basic" className="space-y-6">
            {mode === 'create' && (
              <Card>
                <CardHeader>
                  <CardTitle>Quick Start Templates</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {mockSystemPromptTemplates.map((template) => {
                      const config = specializationConfig[template.specialization];
                      const Icon = config.icon;
                      return (
                        <Card 
                          key={template.id}
                          className={`cursor-pointer transition-colors hover:bg-accent/50 ${
                            selectedTemplate === template.id ? 'ring-2 ring-primary' : ''
                          }`}
                          onClick={() => handleTemplateSelect(template.id)}
                        >
                          <CardContent className="p-4">
                            <div className="flex items-center gap-3 mb-2">
                              <Icon className="w-5 h-5 text-primary" />
                              <h4 className="font-medium">{template.name}</h4>
                            </div>
                            <p className="text-sm text-muted-foreground">{template.description}</p>
                          </CardContent>
                        </Card>
                      );
                    })}
                  </div>
                </CardContent>
              </Card>
            )}

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-4">
                <div>
                  <Label htmlFor="name">Name</Label>
                  <Input
                    id="name"
                    value={formData.name}
                    onChange={(e) => setFormData(prev => ({ ...prev, name: e.target.value }))}
                    placeholder="e.g., Portfolio Analyzer"
                  />
                </div>

                <div>
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="Brief description of this CustomGPT's purpose..."
                    rows={3}
                  />
                </div>

                <div>
                  <Label htmlFor="specialization">Specialization</Label>
                  <Select
                    value={formData.specialization}
                    onValueChange={handleSpecializationChange}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {Object.entries(specializationConfig).map(([key, config]) => {
                        const Icon = config.icon;
                        return (
                          <SelectItem key={key} value={key}>
                            <div className="flex items-center gap-2">
                              <Icon className="w-4 h-4" />
                              {config.label}
                            </div>
                          </SelectItem>
                        );
                      })}
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <div className="space-y-4">
                <div className="p-4 border rounded-lg bg-card-subtle">
                  <h4 className="font-medium mb-3">Preview</h4>
                  <div className="flex items-center gap-3 mb-3">
                    {formData.specialization && (
                      <Badge 
                        className={`bg-${formData.color}-100 text-${formData.color}-700 border-${formData.color}-200`}
                      >
                        {specializationConfig[formData.specialization]?.label}
                      </Badge>
                    )}
                  </div>
                  <h5 className="font-medium">{formData.name || 'Untitled CustomGPT'}</h5>
                  <p className="text-sm text-muted-foreground mt-1">
                    {formData.description || 'No description provided'}
                  </p>
                </div>

                <div className="flex items-center justify-between">
                  <Label htmlFor="isActive">Active Status</Label>
                  <Switch
                    id="isActive"
                    checked={formData.isActive}
                    onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isActive: checked }))}
                  />
                </div>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="prompt" className="space-y-4">
            <div>
              <Label htmlFor="systemPrompt">System Prompt</Label>
              <Textarea
                id="systemPrompt"
                value={formData.systemPrompt}
                onChange={(e) => setFormData(prev => ({ ...prev, systemPrompt: e.target.value }))}
                placeholder="Enter the system prompt that defines this CustomGPT's behavior and expertise..."
                rows={12}
                className="font-mono text-sm"
              />
              <p className="text-sm text-muted-foreground mt-2">
                Define how this CustomGPT should behave, its expertise area, and any specific guidelines for SEC compliance.
              </p>
            </div>
          </TabsContent>

          <TabsContent value="integrations" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>MCP Tool Integrations</CardTitle>
                <p className="text-sm text-muted-foreground">
                  Enable external tool access for enhanced capabilities
                </p>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium">Redtail CRM</h4>
                    <p className="text-sm text-muted-foreground">Access client profiles and relationship data</p>
                  </div>
                  <Switch
                    checked={formData.mcpToolsEnabled?.redtailCRM}
                    onCheckedChange={(checked) => 
                      setFormData(prev => ({
                        ...prev,
                        mcpToolsEnabled: { ...prev.mcpToolsEnabled!, redtailCRM: checked }
                      }))
                    }
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium">Albridge Portfolio</h4>
                    <p className="text-sm text-muted-foreground">Analyze portfolio data and performance</p>
                  </div>
                  <Switch
                    checked={formData.mcpToolsEnabled?.albridgePortfolio}
                    onCheckedChange={(checked) => 
                      setFormData(prev => ({
                        ...prev,
                        mcpToolsEnabled: { ...prev.mcpToolsEnabled!, albridgePortfolio: checked }
                      }))
                    }
                  />
                </div>

                <div className="flex items-center justify-between">
                  <div>
                    <h4 className="font-medium">Black Diamond</h4>
                    <p className="text-sm text-muted-foreground">Advanced portfolio management (Coming Soon)</p>
                  </div>
                  <Switch
                    checked={formData.mcpToolsEnabled?.blackDiamond}
                    onCheckedChange={(checked) => 
                      setFormData(prev => ({
                        ...prev,
                        mcpToolsEnabled: { ...prev.mcpToolsEnabled!, blackDiamond: checked }
                      }))
                    }
                    disabled
                  />
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            Cancel
          </Button>
          <Button onClick={handleSave} className="bg-primary hover:bg-primary/90">
            {mode === 'create' ? 'Create CustomGPT' : 'Save Changes'}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}


================================================
FILE: src/components/chat/ThreadSidebar.tsx
================================================
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Card } from '@/components/ui/card';
import { 
  Plus, 
  Search, 
  MoreVertical, 
  Archive, 
  Trash2, 
  Edit3,
  Filter,
  Users,
  TrendingUp,
  Shield,
  Brain,
  Calculator,
  PiggyBank
} from 'lucide-react';
import { Thread, CustomGPT } from '@/types/chat';
import { cn } from '@/lib/utils';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator
} from '@/components/ui/dropdown-menu';

interface ThreadSidebarProps {
  threads: Thread[];
  customGPTs: CustomGPT[];
  selectedThreadId?: string;
  onThreadSelect: (threadId: string) => void;
  onNewThread: () => void;
  onEditThread: (threadId: string) => void;
  onArchiveThread: (threadId: string) => void;
  onDeleteThread: (threadId: string) => void;
}

const specializationIcons = {
  crm: Users,
  portfolio: TrendingUp,
  compliance: Shield,
  general: Brain,
  retirement: PiggyBank,
  tax: Calculator
};

const specializationColors = {
  crm: 'blue',
  portfolio: 'green', 
  compliance: 'red',
  general: 'purple',
  retirement: 'indigo',
  tax: 'orange'
};

export function ThreadSidebar({
  threads,
  customGPTs,
  selectedThreadId,
  onThreadSelect,
  onNewThread,
  onEditThread,
  onArchiveThread,
  onDeleteThread
}: ThreadSidebarProps) {
  const [searchQuery, setSearchQuery] = useState('');
  const [filterSpecialization, setFilterSpecialization] = useState<string>('all');

  const getCustomGPTForThread = (thread: Thread) => {
    return customGPTs.find(gpt => gpt.id === thread.customGPTId);
  };

  const filteredThreads = threads.filter(thread => {
    const matchesSearch = thread.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      thread.lastMessage?.toLowerCase().includes(searchQuery.toLowerCase());
    
    const customGPT = getCustomGPTForThread(thread);
    const matchesFilter = filterSpecialization === 'all' || 
      customGPT?.specialization === filterSpecialization;
    
    return matchesSearch && matchesFilter && !thread.isArchived;
  });

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);
    
    if (diffInHours < 24) {
      return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
    } else if (diffInHours < 48) {
      return 'Yesterday';
    } else {
      return date.toLocaleDateString();
    }
  };

  return (
    <div className="flex flex-col h-full bg-card border-r">
      {/* Header */}
      <div className="p-4 border-b">
        <div className="flex items-center justify-between mb-4">
          <h3 className="font-semibold">Chat Threads</h3>
          <Button size="sm" onClick={onNewThread} className="bg-primary hover:bg-primary/90">
            <Plus className="w-4 h-4" />
          </Button>
        </div>

        {/* Search */}
        <div className="relative mb-3">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
          <Input
            placeholder="Search threads..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="pl-9"
          />
        </div>

        {/* Filter */}
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" size="sm" className="w-full justify-start">
              <Filter className="w-4 h-4 mr-2" />
              {filterSpecialization === 'all' ? 'All Types' : 
                customGPTs.find(gpt => gpt.specialization === filterSpecialization)?.name || 'All Types'
              }
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="start" className="w-48">
            <DropdownMenuItem onClick={() => setFilterSpecialization('all')}>
              All Types
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            {customGPTs.map(gpt => {
              const Icon = specializationIcons[gpt.specialization] || Brain;
              return (
                <DropdownMenuItem 
                  key={gpt.id}
                  onClick={() => setFilterSpecialization(gpt.specialization)}
                >
                  <Icon className="w-4 h-4 mr-2" />
                  {gpt.name}
                </DropdownMenuItem>
              );
            })}
          </DropdownMenuContent>
        </DropdownMenu>
      </div>

      {/* Threads List */}
      <ScrollArea className="flex-1">
        <div className="p-2 space-y-2">
          {filteredThreads.length === 0 ? (
            <div className="text-center py-8 text-muted-foreground">
              <div className="text-4xl mb-2">💬</div>
              <p className="text-sm">No threads found</p>
              <p className="text-xs">Start a new conversation</p>
            </div>
          ) : (
            filteredThreads.map(thread => {
              const customGPT = getCustomGPTForThread(thread);
              const Icon = customGPT ? specializationIcons[customGPT.specialization] || Brain : Brain;
              const isSelected = thread.id === selectedThreadId;

              return (
                <Card 
                  key={thread.id}
                  className={cn(
                    "p-3 cursor-pointer transition-colors hover:bg-accent/50",
                    isSelected && "ring-2 ring-primary bg-accent/20"
                  )}
                  onClick={() => onThreadSelect(thread.id)}
                >
                  <div className="flex items-start justify-between gap-2">
                    <div className="flex-1 min-w-0 overflow-hidden">
                      {/* Header with badge */}
                      <div className="flex items-center gap-2 mb-1">
                        {customGPT && (
                          <Badge 
                            variant="secondary" 
                            className={cn(
                              "text-xs px-1.5 py-0.5",
                              `bg-${specializationColors[customGPT.specialization]}-100 text-${specializationColors[customGPT.specialization]}-700 border-${specializationColors[customGPT.specialization]}-200`
                            )}
                          >
                            <Icon className="w-3 h-3 mr-1" />
                            {customGPT.name}
                          </Badge>
                        )}
                      </div>

                      {/* Thread title */}
                      <h4 className="font-medium text-sm mb-1 break-words leading-tight line-clamp-2">
                        {thread.title}
                      </h4>

                      {/* Last message preview */}
                      {thread.lastMessage && (
                        <p className="text-xs text-muted-foreground mb-2 break-words leading-tight line-clamp-2">
                          {thread.lastMessage}
                        </p>
                      )}

                      {/* Footer info */}
                      <div className="flex items-center justify-between text-xs text-muted-foreground">
                        <span>{thread.messageCount} messages</span>
                        <span>{formatDate(thread.updatedAt)}</span>
                      </div>
                    </div>

                    {/* Actions */}
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="h-6 w-6 p-0"
                          onClick={(e) => e.stopPropagation()}
                        >
                          <MoreVertical className="w-4 h-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem onClick={() => onEditThread(thread.id)}>
                          <Edit3 className="w-4 h-4 mr-2" />
                          Rename
                        </DropdownMenuItem>
                        <DropdownMenuItem onClick={() => onArchiveThread(thread.id)}>
                          <Archive className="w-4 h-4 mr-2" />
                          Archive
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem 
                          onClick={() => onDeleteThread(thread.id)}
                          className="text-destructive"
                        >
                          <Trash2 className="w-4 h-4 mr-2" />
                          Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  </div>
                </Card>
              );
            })
          )}
        </div>
      </ScrollArea>
    </div>
  );
}


================================================
FILE: src/components/ui/accordion.tsx
================================================
import * as React from "react";
import * as AccordionPrimitive from "@radix-ui/react-accordion";
import { ChevronDown } from "lucide-react";

import { cn } from "@/lib/utils";

const Accordion = AccordionPrimitive.Root;

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item ref={ref} className={cn("border-b", className)} {...props} />
));
AccordionItem.displayName = "AccordionItem";

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className,
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
));
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName;

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
));

AccordionContent.displayName = AccordionPrimitive.Content.displayName;

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent };



================================================
FILE: src/components/ui/alert-dialog.tsx
================================================
import * as React from "react";
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

const AlertDialog = AlertDialogPrimitive.Root;

const AlertDialogTrigger = AlertDialogPrimitive.Trigger;

const AlertDialogPortal = AlertDialogPrimitive.Portal;

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
    ref={ref}
  />
));
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName;

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    />
  </AlertDialogPortal>
));
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName;

const AlertDialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col space-y-2 text-center sm:text-left", className)} {...props} />
);
AlertDialogHeader.displayName = "AlertDialogHeader";

const AlertDialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
);
AlertDialogFooter.displayName = "AlertDialogFooter";

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title ref={ref} className={cn("text-lg font-semibold", className)} {...props} />
));
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName;

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
AlertDialogDescription.displayName = AlertDialogPrimitive.Description.displayName;

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action ref={ref} className={cn(buttonVariants(), className)} {...props} />
));
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName;

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(buttonVariants({ variant: "outline" }), "mt-2 sm:mt-0", className)}
    {...props}
  />
));
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName;

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
};



================================================
FILE: src/components/ui/alert.tsx
================================================
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive: "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div ref={ref} role="alert" className={cn(alertVariants({ variant }), className)} {...props} />
));
Alert.displayName = "Alert";

const AlertTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h5 ref={ref} className={cn("mb-1 font-medium leading-none tracking-tight", className)} {...props} />
  ),
);
AlertTitle.displayName = "AlertTitle";

const AlertDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("text-sm [&_p]:leading-relaxed", className)} {...props} />
  ),
);
AlertDescription.displayName = "AlertDescription";

export { Alert, AlertTitle, AlertDescription };



================================================
FILE: src/components/ui/aspect-ratio.tsx
================================================
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio";

const AspectRatio = AspectRatioPrimitive.Root;

export { AspectRatio };



================================================
FILE: src/components/ui/avatar.tsx
================================================
import * as React from "react";
import * as AvatarPrimitive from "@radix-ui/react-avatar";

import { cn } from "@/lib/utils";

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn("relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full", className)}
    {...props}
  />
));
Avatar.displayName = AvatarPrimitive.Root.displayName;

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image ref={ref} className={cn("aspect-square h-full w-full", className)} {...props} />
));
AvatarImage.displayName = AvatarPrimitive.Image.displayName;

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn("flex h-full w-full items-center justify-center rounded-full bg-muted", className)}
    {...props}
  />
));
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName;

export { Avatar, AvatarImage, AvatarFallback };



================================================
FILE: src/components/ui/badge.tsx
================================================
import * as React from "react";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default: "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary: "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive: "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

export interface BadgeProps extends React.HTMLAttributes<HTMLDivElement>, VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return <div className={cn(badgeVariants({ variant }), className)} {...props} />;
}

export { Badge, badgeVariants };



================================================
FILE: src/components/ui/breadcrumb.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { ChevronRight, MoreHorizontal } from "lucide-react";

import { cn } from "@/lib/utils";

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode;
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />);
Breadcrumb.displayName = "Breadcrumb";

const BreadcrumbList = React.forwardRef<HTMLOListElement, React.ComponentPropsWithoutRef<"ol">>(
  ({ className, ...props }, ref) => (
    <ol
      ref={ref}
      className={cn(
        "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
        className,
      )}
      {...props}
    />
  ),
);
BreadcrumbList.displayName = "BreadcrumbList";

const BreadcrumbItem = React.forwardRef<HTMLLIElement, React.ComponentPropsWithoutRef<"li">>(
  ({ className, ...props }, ref) => (
    <li ref={ref} className={cn("inline-flex items-center gap-1.5", className)} {...props} />
  ),
);
BreadcrumbItem.displayName = "BreadcrumbItem";

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean;
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";

  return <Comp ref={ref} className={cn("transition-colors hover:text-foreground", className)} {...props} />;
});
BreadcrumbLink.displayName = "BreadcrumbLink";

const BreadcrumbPage = React.forwardRef<HTMLSpanElement, React.ComponentPropsWithoutRef<"span">>(
  ({ className, ...props }, ref) => (
    <span
      ref={ref}
      role="link"
      aria-disabled="true"
      aria-current="page"
      className={cn("font-normal text-foreground", className)}
      {...props}
    />
  ),
);
BreadcrumbPage.displayName = "BreadcrumbPage";

const BreadcrumbSeparator = ({ children, className, ...props }: React.ComponentProps<"li">) => (
  <li role="presentation" aria-hidden="true" className={cn("[&>svg]:size-3.5", className)} {...props}>
    {children ?? <ChevronRight />}
  </li>
);
BreadcrumbSeparator.displayName = "BreadcrumbSeparator";

const BreadcrumbEllipsis = ({ className, ...props }: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
);
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis";

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
};



================================================
FILE: src/components/ui/button.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "gradient-primary text-primary-foreground shadow-md hover:shadow-lg hover:scale-105 active:scale-95",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90 shadow-md hover:shadow-lg",
        outline: "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
        
        /* Financial Compliance Variants */
        compliance: "bg-success text-success-foreground hover:bg-success/90 shadow-compliance hover:shadow-lg",
        warning: "bg-warning text-warning-foreground hover:bg-warning/90 shadow-md hover:shadow-lg",
        trust: "gradient-trust text-primary-foreground shadow-lg hover:shadow-xl hover:scale-105 active:scale-95 font-medium",
        professional: "bg-neutral text-white hover:bg-neutral/90 shadow-md hover:shadow-lg border border-neutral-light",
        subtle: "gradient-subtle text-foreground hover:bg-muted border border-border shadow-sm hover:shadow-md",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3 text-xs",
        lg: "h-11 rounded-md px-8 text-base font-medium",
        xl: "h-12 rounded-lg px-10 text-lg font-semibold",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean;
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return <Comp className={cn(buttonVariants({ variant, size, className }))} ref={ref} {...props} />;
  },
);
Button.displayName = "Button";

export { Button, buttonVariants };



================================================
FILE: src/components/ui/calendar.tsx
================================================
import * as React from "react";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { DayPicker } from "react-day-picker";

import { cn } from "@/lib/utils";
import { buttonVariants } from "@/components/ui/button";

export type CalendarProps = React.ComponentProps<typeof DayPicker>;

function Calendar({ className, classNames, showOutsideDays = true, ...props }: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100",
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell: "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(buttonVariants({ variant: "ghost" }), "h-9 w-9 p-0 font-normal aria-selected:opacity-100"),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle: "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ..._props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ..._props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  );
}
Calendar.displayName = "Calendar";

export { Calendar };



================================================
FILE: src/components/ui/card.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Card = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("rounded-lg border bg-card text-card-foreground shadow-sm", className)} {...props} />
));
Card.displayName = "Card";

const CardHeader = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex flex-col space-y-1.5 p-6", className)} {...props} />
  ),
);
CardHeader.displayName = "CardHeader";

const CardTitle = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLHeadingElement>>(
  ({ className, ...props }, ref) => (
    <h3 ref={ref} className={cn("text-2xl font-semibold leading-none tracking-tight", className)} {...props} />
  ),
);
CardTitle.displayName = "CardTitle";

const CardDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => (
    <p ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
  ),
);
CardDescription.displayName = "CardDescription";

const CardContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />,
);
CardContent.displayName = "CardContent";

const CardFooter = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => (
    <div ref={ref} className={cn("flex items-center p-6 pt-0", className)} {...props} />
  ),
);
CardFooter.displayName = "CardFooter";

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent };



================================================
FILE: src/components/ui/carousel.tsx
================================================
import * as React from "react";
import useEmblaCarousel, { type UseEmblaCarouselType } from "embla-carousel-react";
import { ArrowLeft, ArrowRight } from "lucide-react";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";

type CarouselApi = UseEmblaCarouselType[1];
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>;
type CarouselOptions = UseCarouselParameters[0];
type CarouselPlugin = UseCarouselParameters[1];

type CarouselProps = {
  opts?: CarouselOptions;
  plugins?: CarouselPlugin;
  orientation?: "horizontal" | "vertical";
  setApi?: (api: CarouselApi) => void;
};

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0];
  api: ReturnType<typeof useEmblaCarousel>[1];
  scrollPrev: () => void;
  scrollNext: () => void;
  canScrollPrev: boolean;
  canScrollNext: boolean;
} & CarouselProps;

const CarouselContext = React.createContext<CarouselContextProps | null>(null);

function useCarousel() {
  const context = React.useContext(CarouselContext);

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />");
  }

  return context;
}

const Carousel = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement> & CarouselProps>(
  ({ orientation = "horizontal", opts, setApi, plugins, className, children, ...props }, ref) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins,
    );
    const [canScrollPrev, setCanScrollPrev] = React.useState(false);
    const [canScrollNext, setCanScrollNext] = React.useState(false);

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return;
      }

      setCanScrollPrev(api.canScrollPrev());
      setCanScrollNext(api.canScrollNext());
    }, []);

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev();
    }, [api]);

    const scrollNext = React.useCallback(() => {
      api?.scrollNext();
    }, [api]);

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          scrollPrev();
        } else if (event.key === "ArrowRight") {
          event.preventDefault();
          scrollNext();
        }
      },
      [scrollPrev, scrollNext],
    );

    React.useEffect(() => {
      if (!api || !setApi) {
        return;
      }

      setApi(api);
    }, [api, setApi]);

    React.useEffect(() => {
      if (!api) {
        return;
      }

      onSelect(api);
      api.on("reInit", onSelect);
      api.on("select", onSelect);

      return () => {
        api?.off("select", onSelect);
      };
    }, [api, onSelect]);

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation: orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    );
  },
);
Carousel.displayName = "Carousel";

const CarouselContent = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    const { carouselRef, orientation } = useCarousel();

    return (
      <div ref={carouselRef} className="overflow-hidden">
        <div
          ref={ref}
          className={cn("flex", orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col", className)}
          {...props}
        />
      </div>
    );
  },
);
CarouselContent.displayName = "CarouselContent";

const CarouselItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    const { orientation } = useCarousel();

    return (
      <div
        ref={ref}
        role="group"
        aria-roledescription="slide"
        className={cn("min-w-0 shrink-0 grow-0 basis-full", orientation === "horizontal" ? "pl-4" : "pt-4", className)}
        {...props}
      />
    );
  },
);
CarouselItem.displayName = "CarouselItem";

const CarouselPrevious = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(
  ({ className, variant = "outline", size = "icon", ...props }, ref) => {
    const { orientation, scrollPrev, canScrollPrev } = useCarousel();

    return (
      <Button
        ref={ref}
        variant={variant}
        size={size}
        className={cn(
          "absolute h-8 w-8 rounded-full",
          orientation === "horizontal"
            ? "-left-12 top-1/2 -translate-y-1/2"
            : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
          className,
        )}
        disabled={!canScrollPrev}
        onClick={scrollPrev}
        {...props}
      >
        <ArrowLeft className="h-4 w-4" />
        <span className="sr-only">Previous slide</span>
      </Button>
    );
  },
);
CarouselPrevious.displayName = "CarouselPrevious";

const CarouselNext = React.forwardRef<HTMLButtonElement, React.ComponentProps<typeof Button>>(
  ({ className, variant = "outline", size = "icon", ...props }, ref) => {
    const { orientation, scrollNext, canScrollNext } = useCarousel();

    return (
      <Button
        ref={ref}
        variant={variant}
        size={size}
        className={cn(
          "absolute h-8 w-8 rounded-full",
          orientation === "horizontal"
            ? "-right-12 top-1/2 -translate-y-1/2"
            : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
          className,
        )}
        disabled={!canScrollNext}
        onClick={scrollNext}
        {...props}
      >
        <ArrowRight className="h-4 w-4" />
        <span className="sr-only">Next slide</span>
      </Button>
    );
  },
);
CarouselNext.displayName = "CarouselNext";

export { type CarouselApi, Carousel, CarouselContent, CarouselItem, CarouselPrevious, CarouselNext };



================================================
FILE: src/components/ui/chart.tsx
================================================
import * as React from "react";
import * as RechartsPrimitive from "recharts";

import { cn } from "@/lib/utils";

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const;

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode;
    icon?: React.ComponentType;
  } & ({ color?: string; theme?: never } | { color?: never; theme: Record<keyof typeof THEMES, string> });
};

type ChartContextProps = {
  config: ChartConfig;
};

const ChartContext = React.createContext<ChartContextProps | null>(null);

function useChart() {
  const context = React.useContext(ChartContext);

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />");
  }

  return context;
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig;
    children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>["children"];
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId();
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`;

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className,
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  );
});
ChartContainer.displayName = "Chart";

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(([_, config]) => config.theme || config.color);

  if (!colorConfig.length) {
    return null;
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;
    return color ? `  --color-${key}: ${color};` : null;
  })
  .join("\n")}
}
`,
          )
          .join("\n"),
      }}
    />
  );
};

const ChartTooltip = RechartsPrimitive.Tooltip;

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean;
      hideIndicator?: boolean;
      indicator?: "line" | "dot" | "dashed";
      nameKey?: string;
      labelKey?: string;
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref,
  ) => {
    const { config } = useChart();

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null;
      }

      const [item] = payload;
      const key = `${labelKey || item.dataKey || item.name || "value"}`;
      const itemConfig = getPayloadConfigFromPayload(config, item, key);
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label;

      if (labelFormatter) {
        return <div className={cn("font-medium", labelClassName)}>{labelFormatter(value, payload)}</div>;
      }

      if (!value) {
        return null;
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>;
    }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);

    if (!active || !payload?.length) {
      return null;
    }

    const nestLabel = payload.length === 1 && indicator !== "dot";

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className,
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`;
            const itemConfig = getPayloadConfigFromPayload(config, item, key);
            const indicatorColor = color || item.payload.fill || item.color;

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center",
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn("shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]", {
                            "h-2.5 w-2.5": indicator === "dot",
                            "w-1": indicator === "line",
                            "w-0 border-[1.5px] border-dashed bg-transparent": indicator === "dashed",
                            "my-0.5": nestLabel && indicator === "dashed",
                          })}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center",
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">{itemConfig?.label || item.name}</span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            );
          })}
        </div>
      </div>
    );
  },
);
ChartTooltipContent.displayName = "ChartTooltip";

const ChartLegend = RechartsPrimitive.Legend;

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean;
      nameKey?: string;
    }
>(({ className, hideIcon = false, payload, verticalAlign = "bottom", nameKey }, ref) => {
  const { config } = useChart();

  if (!payload?.length) {
    return null;
  }

  return (
    <div
      ref={ref}
      className={cn("flex items-center justify-center gap-4", verticalAlign === "top" ? "pb-3" : "pt-3", className)}
    >
      {payload.map((item) => {
        const key = `${nameKey || item.dataKey || "value"}`;
        const itemConfig = getPayloadConfigFromPayload(config, item, key);

        return (
          <div
            key={item.value}
            className={cn("flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground")}
          >
            {itemConfig?.icon && !hideIcon ? (
              <itemConfig.icon />
            ) : (
              <div
                className="h-2 w-2 shrink-0 rounded-[2px]"
                style={{
                  backgroundColor: item.color,
                }}
              />
            )}
            {itemConfig?.label}
          </div>
        );
      })}
    </div>
  );
});
ChartLegendContent.displayName = "ChartLegend";

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {
  if (typeof payload !== "object" || payload === null) {
    return undefined;
  }

  const payloadPayload =
    "payload" in payload && typeof payload.payload === "object" && payload.payload !== null
      ? payload.payload
      : undefined;

  let configLabelKey: string = key;

  if (key in payload && typeof payload[key as keyof typeof payload] === "string") {
    configLabelKey = payload[key as keyof typeof payload] as string;
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;
  }

  return configLabelKey in config ? config[configLabelKey] : config[key as keyof typeof config];
}

export { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent, ChartStyle };



================================================
FILE: src/components/ui/checkbox.tsx
================================================
import * as React from "react";
import * as CheckboxPrimitive from "@radix-ui/react-checkbox";
import { Check } from "lucide-react";

import { cn } from "@/lib/utils";

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
      className,
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator className={cn("flex items-center justify-center text-current")}>
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
));
Checkbox.displayName = CheckboxPrimitive.Root.displayName;

export { Checkbox };



================================================
FILE: src/components/ui/collapsible.tsx
================================================
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible";

const Collapsible = CollapsiblePrimitive.Root;

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger;

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent;

export { Collapsible, CollapsibleTrigger, CollapsibleContent };



================================================
FILE: src/components/ui/command.tsx
================================================
import * as React from "react";
import { type DialogProps } from "@radix-ui/react-dialog";
import { Command as CommandPrimitive } from "cmdk";
import { Search } from "lucide-react";

import { cn } from "@/lib/utils";
import { Dialog, DialogContent } from "@/components/ui/dialog";

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className,
    )}
    {...props}
  />
));
Command.displayName = CommandPrimitive.displayName;

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  );
};

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    />
  </div>
));

CommandInput.displayName = CommandPrimitive.Input.displayName;

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
));

CommandList.displayName = CommandPrimitive.List.displayName;

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => <CommandPrimitive.Empty ref={ref} className="py-6 text-center text-sm" {...props} />);

CommandEmpty.displayName = CommandPrimitive.Empty.displayName;

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className,
    )}
    {...props}
  />
));

CommandGroup.displayName = CommandPrimitive.Group.displayName;

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator ref={ref} className={cn("-mx-1 h-px bg-border", className)} {...props} />
));
CommandSeparator.displayName = CommandPrimitive.Separator.displayName;

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className,
    )}
    {...props}
  />
));

CommandItem.displayName = CommandPrimitive.Item.displayName;

const CommandShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)} {...props} />;
};
CommandShortcut.displayName = "CommandShortcut";

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
};



================================================
FILE: src/components/ui/context-menu.tsx
================================================
import * as React from "react";
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const ContextMenu = ContextMenuPrimitive.Root;

const ContextMenuTrigger = ContextMenuPrimitive.Trigger;

const ContextMenuGroup = ContextMenuPrimitive.Group;

const ContextMenuPortal = ContextMenuPrimitive.Portal;

const ContextMenuSub = ContextMenuPrimitive.Sub;

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup;

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
));
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName;

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName;

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
));
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName;

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName;

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
));
ContextMenuCheckboxItem.displayName = ContextMenuPrimitive.CheckboxItem.displayName;

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
));
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName;

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold text-foreground", inset && "pl-8", className)}
    {...props}
  />
));
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName;

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-border", className)} {...props} />
));
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName;

const ContextMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)} {...props} />;
};
ContextMenuShortcut.displayName = "ContextMenuShortcut";

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
};



================================================
FILE: src/components/ui/dialog.tsx
================================================
import * as React from "react";
import * as DialogPrimitive from "@radix-ui/react-dialog";
import { X } from "lucide-react";

import { cn } from "@/lib/utils";

const Dialog = DialogPrimitive.Root;

const DialogTrigger = DialogPrimitive.Trigger;

const DialogPortal = DialogPrimitive.Portal;

const DialogClose = DialogPrimitive.Close;

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
  />
));
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName;

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className,
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity data-[state=open]:bg-accent data-[state=open]:text-muted-foreground hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
));
DialogContent.displayName = DialogPrimitive.Content.displayName;

const DialogHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col space-y-1.5 text-center sm:text-left", className)} {...props} />
);
DialogHeader.displayName = "DialogHeader";

const DialogFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
);
DialogFooter.displayName = "DialogFooter";

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
DialogTitle.displayName = DialogPrimitive.Title.displayName;

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
DialogDescription.displayName = DialogPrimitive.Description.displayName;

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
};



================================================
FILE: src/components/ui/drawer.tsx
================================================
import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";

import { cn } from "@/lib/utils";

const Drawer = ({ shouldScaleBackground = true, ...props }: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root shouldScaleBackground={shouldScaleBackground} {...props} />
);
Drawer.displayName = "Drawer";

const DrawerTrigger = DrawerPrimitive.Trigger;

const DrawerPortal = DrawerPrimitive.Portal;

const DrawerClose = DrawerPrimitive.Close;

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay ref={ref} className={cn("fixed inset-0 z-50 bg-black/80", className)} {...props} />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className,
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
));
DrawerContent.displayName = "DrawerContent";

const DrawerHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)} {...props} />
);
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("mt-auto flex flex-col gap-2 p-4", className)} {...props} />
);
DrawerFooter.displayName = "DrawerFooter";

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold leading-none tracking-tight", className)}
    {...props}
  />
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
};



================================================
FILE: src/components/ui/dropdown-menu.tsx
================================================
import * as React from "react";
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const DropdownMenu = DropdownMenuPrimitive.Root;

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger;

const DropdownMenuGroup = DropdownMenuPrimitive.Group;

const DropdownMenuPortal = DropdownMenuPrimitive.Portal;

const DropdownMenuSub = DropdownMenuPrimitive.Sub;

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup;

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent focus:bg-accent",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
));
DropdownMenuSubTrigger.displayName = DropdownMenuPrimitive.SubTrigger.displayName;

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
DropdownMenuSubContent.displayName = DropdownMenuPrimitive.SubContent.displayName;

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
));
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName;

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName;

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
));
DropdownMenuCheckboxItem.displayName = DropdownMenuPrimitive.CheckboxItem.displayName;

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
));
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName;

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props}
  />
));
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName;

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
));
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName;

const DropdownMenuShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest opacity-60", className)} {...props} />;
};
DropdownMenuShortcut.displayName = "DropdownMenuShortcut";

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
};



================================================
FILE: src/components/ui/form.tsx
================================================
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { Slot } from "@radix-ui/react-slot";
import { Controller, ControllerProps, FieldPath, FieldValues, FormProvider, useFormContext } from "react-hook-form";

import { cn } from "@/lib/utils";
import { Label } from "@/components/ui/label";

const Form = FormProvider;

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
> = {
  name: TName;
};

const FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue);

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  );
};

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext);
  const itemContext = React.useContext(FormItemContext);
  const { getFieldState, formState } = useFormContext();

  const fieldState = getFieldState(fieldContext.name, formState);

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>");
  }

  const { id } = itemContext;

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  };
};

type FormItemContextValue = {
  id: string;
};

const FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);

const FormItem = React.forwardRef<HTMLDivElement, React.HTMLAttributes<HTMLDivElement>>(
  ({ className, ...props }, ref) => {
    const id = React.useId();

    return (
      <FormItemContext.Provider value={{ id }}>
        <div ref={ref} className={cn("space-y-2", className)} {...props} />
      </FormItemContext.Provider>
    );
  },
);
FormItem.displayName = "FormItem";

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField();

  return <Label ref={ref} className={cn(error && "text-destructive", className)} htmlFor={formItemId} {...props} />;
});
FormLabel.displayName = "FormLabel";

const FormControl = React.forwardRef<React.ElementRef<typeof Slot>, React.ComponentPropsWithoutRef<typeof Slot>>(
  ({ ...props }, ref) => {
    const { error, formItemId, formDescriptionId, formMessageId } = useFormField();

    return (
      <Slot
        ref={ref}
        id={formItemId}
        aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}
        aria-invalid={!!error}
        {...props}
      />
    );
  },
);
FormControl.displayName = "FormControl";

const FormDescription = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, ...props }, ref) => {
    const { formDescriptionId } = useFormField();

    return <p ref={ref} id={formDescriptionId} className={cn("text-sm text-muted-foreground", className)} {...props} />;
  },
);
FormDescription.displayName = "FormDescription";

const FormMessage = React.forwardRef<HTMLParagraphElement, React.HTMLAttributes<HTMLParagraphElement>>(
  ({ className, children, ...props }, ref) => {
    const { error, formMessageId } = useFormField();
    const body = error ? String(error?.message) : children;

    if (!body) {
      return null;
    }

    return (
      <p ref={ref} id={formMessageId} className={cn("text-sm font-medium text-destructive", className)} {...props}>
        {body}
      </p>
    );
  },
);
FormMessage.displayName = "FormMessage";

export { useFormField, Form, FormItem, FormLabel, FormControl, FormDescription, FormMessage, FormField };



================================================
FILE: src/components/ui/hover-card.tsx
================================================
import * as React from "react";
import * as HoverCardPrimitive from "@radix-ui/react-hover-card";

import { cn } from "@/lib/utils";

const HoverCard = HoverCardPrimitive.Root;

const HoverCardTrigger = HoverCardPrimitive.Trigger;

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName;

export { HoverCard, HoverCardTrigger, HoverCardContent };



================================================
FILE: src/components/ui/input-otp.tsx
================================================
import * as React from "react";
import { OTPInput, OTPInputContext } from "input-otp";
import { Dot } from "lucide-react";

import { cn } from "@/lib/utils";

const InputOTP = React.forwardRef<React.ElementRef<typeof OTPInput>, React.ComponentPropsWithoutRef<typeof OTPInput>>(
  ({ className, containerClassName, ...props }, ref) => (
    <OTPInput
      ref={ref}
      containerClassName={cn("flex items-center gap-2 has-[:disabled]:opacity-50", containerClassName)}
      className={cn("disabled:cursor-not-allowed", className)}
      {...props}
    />
  ),
);
InputOTP.displayName = "InputOTP";

const InputOTPGroup = React.forwardRef<React.ElementRef<"div">, React.ComponentPropsWithoutRef<"div">>(
  ({ className, ...props }, ref) => <div ref={ref} className={cn("flex items-center", className)} {...props} />,
);
InputOTPGroup.displayName = "InputOTPGroup";

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext);
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index];

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className,
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="animate-caret-blink h-4 w-px bg-foreground duration-1000" />
        </div>
      )}
    </div>
  );
});
InputOTPSlot.displayName = "InputOTPSlot";

const InputOTPSeparator = React.forwardRef<React.ElementRef<"div">, React.ComponentPropsWithoutRef<"div">>(
  ({ ...props }, ref) => (
    <div ref={ref} role="separator" {...props}>
      <Dot />
    </div>
  ),
);
InputOTPSeparator.displayName = "InputOTPSeparator";

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator };



================================================
FILE: src/components/ui/input.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className,
        )}
        ref={ref}
        {...props}
      />
    );
  },
);
Input.displayName = "Input";

export { Input };



================================================
FILE: src/components/ui/label.tsx
================================================
import * as React from "react";
import * as LabelPrimitive from "@radix-ui/react-label";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const labelVariants = cva("text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70");

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> & VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root ref={ref} className={cn(labelVariants(), className)} {...props} />
));
Label.displayName = LabelPrimitive.Root.displayName;

export { Label };



================================================
FILE: src/components/ui/menubar.tsx
================================================
import * as React from "react";
import * as MenubarPrimitive from "@radix-ui/react-menubar";
import { Check, ChevronRight, Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const MenubarMenu = MenubarPrimitive.Menu;

const MenubarGroup = MenubarPrimitive.Group;

const MenubarPortal = MenubarPrimitive.Portal;

const MenubarSub = MenubarPrimitive.Sub;

const MenubarRadioGroup = MenubarPrimitive.RadioGroup;

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn("flex h-10 items-center space-x-1 rounded-md border bg-background p-1", className)}
    {...props}
  />
));
Menubar.displayName = MenubarPrimitive.Root.displayName;

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  />
));
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName;

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean;
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[state=open]:bg-accent data-[state=open]:text-accent-foreground focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
));
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName;

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName;

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(({ className, align = "start", alignOffset = -4, sideOffset = 8, ...props }, ref) => (
  <MenubarPrimitive.Portal>
    <MenubarPrimitive.Content
      ref={ref}
      align={align}
      alignOffset={alignOffset}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </MenubarPrimitive.Portal>
));
MenubarContent.displayName = MenubarPrimitive.Content.displayName;

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      inset && "pl-8",
      className,
    )}
    {...props}
  />
));
MenubarItem.displayName = MenubarPrimitive.Item.displayName;

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
));
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName;

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
));
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName;

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean;
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", inset && "pl-8", className)}
    {...props}
  />
));
MenubarLabel.displayName = MenubarPrimitive.Label.displayName;

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
));
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName;

const MenubarShortcut = ({ className, ...props }: React.HTMLAttributes<HTMLSpanElement>) => {
  return <span className={cn("ml-auto text-xs tracking-widest text-muted-foreground", className)} {...props} />;
};
MenubarShortcut.displayname = "MenubarShortcut";

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
};



================================================
FILE: src/components/ui/navigation-menu.tsx
================================================
import * as React from "react";
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu";
import { cva } from "class-variance-authority";
import { ChevronDown } from "lucide-react";

import { cn } from "@/lib/utils";

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn("relative z-10 flex max-w-max flex-1 items-center justify-center", className)}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
));
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName;

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn("group flex flex-1 list-none items-center justify-center space-x-1", className)}
    {...props}
  />
));
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName;

const NavigationMenuItem = NavigationMenuPrimitive.Item;

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50",
);

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
));
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName;

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto",
      className,
    )}
    {...props}
  />
));
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName;

const NavigationMenuLink = NavigationMenuPrimitive.Link;

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className,
      )}
      ref={ref}
      {...props}
    />
  </div>
));
NavigationMenuViewport.displayName = NavigationMenuPrimitive.Viewport.displayName;

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className,
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
));
NavigationMenuIndicator.displayName = NavigationMenuPrimitive.Indicator.displayName;

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
};



================================================
FILE: src/components/ui/pagination.tsx
================================================
import * as React from "react";
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react";

import { cn } from "@/lib/utils";
import { ButtonProps, buttonVariants } from "@/components/ui/button";

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
);
Pagination.displayName = "Pagination";

const PaginationContent = React.forwardRef<HTMLUListElement, React.ComponentProps<"ul">>(
  ({ className, ...props }, ref) => (
    <ul ref={ref} className={cn("flex flex-row items-center gap-1", className)} {...props} />
  ),
);
PaginationContent.displayName = "PaginationContent";

const PaginationItem = React.forwardRef<HTMLLIElement, React.ComponentProps<"li">>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
));
PaginationItem.displayName = "PaginationItem";

type PaginationLinkProps = {
  isActive?: boolean;
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">;

const PaginationLink = ({ className, isActive, size = "icon", ...props }: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className,
    )}
    {...props}
  />
);
PaginationLink.displayName = "PaginationLink";

const PaginationPrevious = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink aria-label="Go to previous page" size="default" className={cn("gap-1 pl-2.5", className)} {...props}>
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
);
PaginationPrevious.displayName = "PaginationPrevious";

const PaginationNext = ({ className, ...props }: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink aria-label="Go to next page" size="default" className={cn("gap-1 pr-2.5", className)} {...props}>
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
);
PaginationNext.displayName = "PaginationNext";

const PaginationEllipsis = ({ className, ...props }: React.ComponentProps<"span">) => (
  <span aria-hidden className={cn("flex h-9 w-9 items-center justify-center", className)} {...props}>
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
);
PaginationEllipsis.displayName = "PaginationEllipsis";

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
};



================================================
FILE: src/components/ui/popover.tsx
================================================
import * as React from "react";
import * as PopoverPrimitive from "@radix-ui/react-popover";

import { cn } from "@/lib/utils";

const Popover = PopoverPrimitive.Root;

const PopoverTrigger = PopoverPrimitive.Trigger;

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className,
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
));
PopoverContent.displayName = PopoverPrimitive.Content.displayName;

export { Popover, PopoverTrigger, PopoverContent };



================================================
FILE: src/components/ui/progress.tsx
================================================
import * as React from "react";
import * as ProgressPrimitive from "@radix-ui/react-progress";

import { cn } from "@/lib/utils";

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn("relative h-4 w-full overflow-hidden rounded-full bg-secondary", className)}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
));
Progress.displayName = ProgressPrimitive.Root.displayName;

export { Progress };



================================================
FILE: src/components/ui/radio-group.tsx
================================================
import * as React from "react";
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";
import { Circle } from "lucide-react";

import { cn } from "@/lib/utils";

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return <RadioGroupPrimitive.Root className={cn("grid gap-2", className)} {...props} ref={ref} />;
});
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName;

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  );
});
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName;

export { RadioGroup, RadioGroupItem };



================================================
FILE: src/components/ui/resizable.tsx
================================================
import { GripVertical } from "lucide-react";
import * as ResizablePrimitive from "react-resizable-panels";

import { cn } from "@/lib/utils";

const ResizablePanelGroup = ({ className, ...props }: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn("flex h-full w-full data-[panel-group-direction=vertical]:flex-col", className)}
    {...props}
  />
);

const ResizablePanel = ResizablePrimitive.Panel;

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean;
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className,
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
);

export { ResizablePanelGroup, ResizablePanel, ResizableHandle };



================================================
FILE: src/components/ui/scroll-area.tsx
================================================
import * as React from "react";
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area";

import { cn } from "@/lib/utils";

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root ref={ref} className={cn("relative overflow-hidden", className)} {...props}>
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">{children}</ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
));
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName;

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" && "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" && "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className,
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
));
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName;

export { ScrollArea, ScrollBar };



================================================
FILE: src/components/ui/select.tsx
================================================
import * as React from "react";
import * as SelectPrimitive from "@radix-ui/react-select";
import { Check, ChevronDown, ChevronUp } from "lucide-react";

import { cn } from "@/lib/utils";

const Select = SelectPrimitive.Root;

const SelectGroup = SelectPrimitive.Group;

const SelectValue = SelectPrimitive.Value;

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className,
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
));
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName;

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
));
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName;

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn("flex cursor-default items-center justify-center py-1", className)}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
));
SelectScrollDownButton.displayName = SelectPrimitive.ScrollDownButton.displayName;

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className,
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]",
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
));
SelectContent.displayName = SelectPrimitive.Content.displayName;

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label ref={ref} className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)} {...props} />
));
SelectLabel.displayName = SelectPrimitive.Label.displayName;

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none data-[disabled]:pointer-events-none data-[disabled]:opacity-50 focus:bg-accent focus:text-accent-foreground",
      className,
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
));
SelectItem.displayName = SelectPrimitive.Item.displayName;

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator ref={ref} className={cn("-mx-1 my-1 h-px bg-muted", className)} {...props} />
));
SelectSeparator.displayName = SelectPrimitive.Separator.displayName;

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
};



================================================
FILE: src/components/ui/separator.tsx
================================================
import * as React from "react";
import * as SeparatorPrimitive from "@radix-ui/react-separator";

import { cn } from "@/lib/utils";

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(({ className, orientation = "horizontal", decorative = true, ...props }, ref) => (
  <SeparatorPrimitive.Root
    ref={ref}
    decorative={decorative}
    orientation={orientation}
    className={cn("shrink-0 bg-border", orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]", className)}
    {...props}
  />
));
Separator.displayName = SeparatorPrimitive.Root.displayName;

export { Separator };



================================================
FILE: src/components/ui/sheet.tsx
================================================
import * as SheetPrimitive from "@radix-ui/react-dialog";
import { cva, type VariantProps } from "class-variance-authority";
import { X } from "lucide-react";
import * as React from "react";

import { cn } from "@/lib/utils";

const Sheet = SheetPrimitive.Root;

const SheetTrigger = SheetPrimitive.Trigger;

const SheetClose = SheetPrimitive.Close;

const SheetPortal = SheetPrimitive.Portal;

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className,
    )}
    {...props}
    ref={ref}
  />
));
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName;

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  },
);

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<React.ElementRef<typeof SheetPrimitive.Content>, SheetContentProps>(
  ({ side = "right", className, children, ...props }, ref) => (
    <SheetPortal>
      <SheetOverlay />
      <SheetPrimitive.Content ref={ref} className={cn(sheetVariants({ side }), className)} {...props}>
        {children}
        <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity data-[state=open]:bg-secondary hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none">
          <X className="h-4 w-4" />
          <span className="sr-only">Close</span>
        </SheetPrimitive.Close>
      </SheetPrimitive.Content>
    </SheetPortal>
  ),
);
SheetContent.displayName = SheetPrimitive.Content.displayName;

const SheetHeader = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col space-y-2 text-center sm:text-left", className)} {...props} />
);
SheetHeader.displayName = "SheetHeader";

const SheetFooter = ({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) => (
  <div className={cn("flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2", className)} {...props} />
);
SheetFooter.displayName = "SheetFooter";

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title ref={ref} className={cn("text-lg font-semibold text-foreground", className)} {...props} />
));
SheetTitle.displayName = SheetPrimitive.Title.displayName;

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description ref={ref} className={cn("text-sm text-muted-foreground", className)} {...props} />
));
SheetDescription.displayName = SheetPrimitive.Description.displayName;

export {
  Sheet,
  SheetClose,
  SheetContent,
  SheetDescription,
  SheetFooter,
  SheetHeader,
  SheetOverlay,
  SheetPortal,
  SheetTitle,
  SheetTrigger,
};



================================================
FILE: src/components/ui/sidebar.tsx
================================================
import * as React from "react";
import { Slot } from "@radix-ui/react-slot";
import { VariantProps, cva } from "class-variance-authority";
import { PanelLeft } from "lucide-react";

import { useIsMobile } from "@/hooks/use-mobile";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";
import { Sheet, SheetContent } from "@/components/ui/sheet";
import { Skeleton } from "@/components/ui/skeleton";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";

const SIDEBAR_COOKIE_NAME = "sidebar:state";
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7;
const SIDEBAR_WIDTH = "16rem";
const SIDEBAR_WIDTH_MOBILE = "18rem";
const SIDEBAR_WIDTH_ICON = "3rem";
const SIDEBAR_KEYBOARD_SHORTCUT = "b";

type SidebarContext = {
  state: "expanded" | "collapsed";
  open: boolean;
  setOpen: (open: boolean) => void;
  openMobile: boolean;
  setOpenMobile: (open: boolean) => void;
  isMobile: boolean;
  toggleSidebar: () => void;
};

const SidebarContext = React.createContext<SidebarContext | null>(null);

function useSidebar() {
  const context = React.useContext(SidebarContext);
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.");
  }

  return context;
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean;
    open?: boolean;
    onOpenChange?: (open: boolean) => void;
  }
>(({ defaultOpen = true, open: openProp, onOpenChange: setOpenProp, className, style, children, ...props }, ref) => {
  const isMobile = useIsMobile();
  const [openMobile, setOpenMobile] = React.useState(false);

  // This is the internal state of the sidebar.
  // We use openProp and setOpenProp for control from outside the component.
  const [_open, _setOpen] = React.useState(defaultOpen);
  const open = openProp ?? _open;
  const setOpen = React.useCallback(
    (value: boolean | ((value: boolean) => boolean)) => {
      const openState = typeof value === "function" ? value(open) : value;
      if (setOpenProp) {
        setOpenProp(openState);
      } else {
        _setOpen(openState);
      }

      // This sets the cookie to keep the sidebar state.
      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`;
    },
    [setOpenProp, open],
  );

  // Helper to toggle the sidebar.
  const toggleSidebar = React.useCallback(() => {
    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open);
  }, [isMobile, setOpen, setOpenMobile]);

  // Adds a keyboard shortcut to toggle the sidebar.
  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === SIDEBAR_KEYBOARD_SHORTCUT && (event.metaKey || event.ctrlKey)) {
        event.preventDefault();
        toggleSidebar();
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [toggleSidebar]);

  // We add a state so that we can do data-state="expanded" or "collapsed".
  // This makes it easier to style the sidebar with Tailwind classes.
  const state = open ? "expanded" : "collapsed";

  const contextValue = React.useMemo<SidebarContext>(
    () => ({
      state,
      open,
      setOpen,
      isMobile,
      openMobile,
      setOpenMobile,
      toggleSidebar,
    }),
    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar],
  );

  return (
    <SidebarContext.Provider value={contextValue}>
      <TooltipProvider delayDuration={0}>
        <div
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH,
              "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
              ...style,
            } as React.CSSProperties
          }
          className={cn("group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar", className)}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      </TooltipProvider>
    </SidebarContext.Provider>
  );
});
SidebarProvider.displayName = "SidebarProvider";

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right";
    variant?: "sidebar" | "floating" | "inset";
    collapsible?: "offcanvas" | "icon" | "none";
  }
>(({ side = "left", variant = "sidebar", collapsible = "offcanvas", className, children, ...props }, ref) => {
  const { isMobile, state, openMobile, setOpenMobile } = useSidebar();

  if (collapsible === "none") {
    return (
      <div
        className={cn("flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground", className)}
        ref={ref}
        {...props}
      >
        {children}
      </div>
    );
  }

  if (isMobile) {
    return (
      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
        <SheetContent
          data-sidebar="sidebar"
          data-mobile="true"
          className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
          style={
            {
              "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
            } as React.CSSProperties
          }
          side={side}
        >
          <div className="flex h-full w-full flex-col">{children}</div>
        </SheetContent>
      </Sheet>
    );
  }

  return (
    <div
      ref={ref}
      className="group peer hidden text-sidebar-foreground md:block"
      data-state={state}
      data-collapsible={state === "collapsed" ? collapsible : ""}
      data-variant={variant}
      data-side={side}
    >
      {/* This is what handles the sidebar gap on desktop */}
      <div
        className={cn(
          "relative h-svh w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear",
          "group-data-[collapsible=offcanvas]:w-0",
          "group-data-[side=right]:rotate-180",
          variant === "floating" || variant === "inset"
            ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
            : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]",
        )}
      />
      <div
        className={cn(
          "fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex",
          side === "left"
            ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
            : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
          // Adjust the padding for floating and inset variants.
          variant === "floating" || variant === "inset"
            ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
            : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
          className,
        )}
        {...props}
      >
        <div
          data-sidebar="sidebar"
          className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
        >
          {children}
        </div>
      </div>
    </div>
  );
});
Sidebar.displayName = "Sidebar";

const SidebarTrigger = React.forwardRef<React.ElementRef<typeof Button>, React.ComponentProps<typeof Button>>(
  ({ className, onClick, ...props }, ref) => {
    const { toggleSidebar } = useSidebar();

    return (
      <Button
        ref={ref}
        data-sidebar="trigger"
        variant="ghost"
        size="icon"
        className={cn("h-7 w-7", className)}
        onClick={(event) => {
          onClick?.(event);
          toggleSidebar();
        }}
        {...props}
      >
        <PanelLeft />
        <span className="sr-only">Toggle Sidebar</span>
      </Button>
    );
  },
);
SidebarTrigger.displayName = "SidebarTrigger";

const SidebarRail = React.forwardRef<HTMLButtonElement, React.ComponentProps<"button">>(
  ({ className, ...props }, ref) => {
    const { toggleSidebar } = useSidebar();

    return (
      <button
        ref={ref}
        data-sidebar="rail"
        aria-label="Toggle Sidebar"
        tabIndex={-1}
        onClick={toggleSidebar}
        title="Toggle Sidebar"
        className={cn(
          "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] group-data-[side=left]:-right-4 group-data-[side=right]:left-0 hover:after:bg-sidebar-border sm:flex",
          "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
          "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
          "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
          "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
          "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
          className,
        )}
        {...props}
      />
    );
  },
);
SidebarRail.displayName = "SidebarRail";

const SidebarInset = React.forwardRef<HTMLDivElement, React.ComponentProps<"main">>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className,
      )}
      {...props}
    />
  );
});
SidebarInset.displayName = "SidebarInset";

const SidebarInput = React.forwardRef<React.ElementRef<typeof Input>, React.ComponentProps<typeof Input>>(
  ({ className, ...props }, ref) => {
    return (
      <Input
        ref={ref}
        data-sidebar="input"
        className={cn(
          "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
          className,
        )}
        {...props}
      />
    );
  },
);
SidebarInput.displayName = "SidebarInput";

const SidebarHeader = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return <div ref={ref} data-sidebar="header" className={cn("flex flex-col gap-2 p-2", className)} {...props} />;
});
SidebarHeader.displayName = "SidebarHeader";

const SidebarFooter = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return <div ref={ref} data-sidebar="footer" className={cn("flex flex-col gap-2 p-2", className)} {...props} />;
});
SidebarFooter.displayName = "SidebarFooter";

const SidebarSeparator = React.forwardRef<React.ElementRef<typeof Separator>, React.ComponentProps<typeof Separator>>(
  ({ className, ...props }, ref) => {
    return (
      <Separator
        ref={ref}
        data-sidebar="separator"
        className={cn("mx-2 w-auto bg-sidebar-border", className)}
        {...props}
      />
    );
  },
);
SidebarSeparator.displayName = "SidebarSeparator";

const SidebarContent = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarContent.displayName = "SidebarContent";

const SidebarGroup = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  );
});
SidebarGroup.displayName = "SidebarGroup";

const SidebarGroupLabel = React.forwardRef<HTMLDivElement, React.ComponentProps<"div"> & { asChild?: boolean }>(
  ({ className, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "div";

    return (
      <Comp
        ref={ref}
        data-sidebar="group-label"
        className={cn(
          "flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
          "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
          className,
        )}
        {...props}
      />
    );
  },
);
SidebarGroupLabel.displayName = "SidebarGroupLabel";

const SidebarGroupAction = React.forwardRef<HTMLButtonElement, React.ComponentProps<"button"> & { asChild?: boolean }>(
  ({ className, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";

    return (
      <Comp
        ref={ref}
        data-sidebar="group-action"
        className={cn(
          "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
          // Increases the hit area of the button on mobile.
          "after:absolute after:-inset-2 after:md:hidden",
          "group-data-[collapsible=icon]:hidden",
          className,
        )}
        {...props}
      />
    );
  },
);
SidebarGroupAction.displayName = "SidebarGroupAction";

const SidebarGroupContent = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(
  ({ className, ...props }, ref) => (
    <div ref={ref} data-sidebar="group-content" className={cn("w-full text-sm", className)} {...props} />
  ),
);
SidebarGroupContent.displayName = "SidebarGroupContent";

const SidebarMenu = React.forwardRef<HTMLUListElement, React.ComponentProps<"ul">>(({ className, ...props }, ref) => (
  <ul ref={ref} data-sidebar="menu" className={cn("flex w-full min-w-0 flex-col gap-1", className)} {...props} />
));
SidebarMenu.displayName = "SidebarMenu";

const SidebarMenuItem = React.forwardRef<HTMLLIElement, React.ComponentProps<"li">>(({ className, ...props }, ref) => (
  <li ref={ref} data-sidebar="menu-item" className={cn("group/menu-item relative", className)} {...props} />
));
SidebarMenuItem.displayName = "SidebarMenuItem";

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    isActive?: boolean;
    tooltip?: string | React.ComponentProps<typeof TooltipContent>;
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(({ asChild = false, isActive = false, variant = "default", size = "default", tooltip, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";
  const { isMobile, state } = useSidebar();

  const button = (
    <Comp
      ref={ref}
      data-sidebar="menu-button"
      data-size={size}
      data-active={isActive}
      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
      {...props}
    />
  );

  if (!tooltip) {
    return button;
  }

  if (typeof tooltip === "string") {
    tooltip = {
      children: tooltip,
    };
  }

  return (
    <Tooltip>
      <TooltipTrigger asChild>{button}</TooltipTrigger>
      <TooltipContent side="right" align="center" hidden={state !== "collapsed" || isMobile} {...tooltip} />
    </Tooltip>
  );
});
SidebarMenuButton.displayName = "SidebarMenuButton";

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean;
    showOnHover?: boolean;
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button";

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform peer-hover/menu-button:text-sidebar-accent-foreground hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className,
      )}
      {...props}
    />
  );
});
SidebarMenuAction.displayName = "SidebarMenuAction";

const SidebarMenuBadge = React.forwardRef<HTMLDivElement, React.ComponentProps<"div">>(
  ({ className, ...props }, ref) => (
    <div
      ref={ref}
      data-sidebar="menu-badge"
      className={cn(
        "pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground",
        "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  ),
);
SidebarMenuBadge.displayName = "SidebarMenuBadge";

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean;
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`;
  }, []);

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("flex h-8 items-center gap-2 rounded-md px-2", className)}
      {...props}
    >
      {showIcon && <Skeleton className="size-4 rounded-md" data-sidebar="menu-skeleton-icon" />}
      <Skeleton
        className="h-4 max-w-[--skeleton-width] flex-1"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  );
});
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton";

const SidebarMenuSub = React.forwardRef<HTMLUListElement, React.ComponentProps<"ul">>(
  ({ className, ...props }, ref) => (
    <ul
      ref={ref}
      data-sidebar="menu-sub"
      className={cn(
        "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  ),
);
SidebarMenuSub.displayName = "SidebarMenuSub";

const SidebarMenuSubItem = React.forwardRef<HTMLLIElement, React.ComponentProps<"li">>(({ ...props }, ref) => (
  <li ref={ref} {...props} />
));
SidebarMenuSubItem.displayName = "SidebarMenuSubItem";

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean;
    size?: "sm" | "md";
    isActive?: boolean;
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a";

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring aria-disabled:pointer-events-none aria-disabled:opacity-50 hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className,
      )}
      {...props}
    />
  );
});
SidebarMenuSubButton.displayName = "SidebarMenuSubButton";

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
};



================================================
FILE: src/components/ui/skeleton.tsx
================================================
import { cn } from "@/lib/utils";

function Skeleton({ className, ...props }: React.HTMLAttributes<HTMLDivElement>) {
  return <div className={cn("animate-pulse rounded-md bg-muted", className)} {...props} />;
}

export { Skeleton };



================================================
FILE: src/components/ui/slider.tsx
================================================
import * as React from "react";
import * as SliderPrimitive from "@radix-ui/react-slider";

import { cn } from "@/lib/utils";

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn("relative flex w-full touch-none select-none items-center", className)}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
));
Slider.displayName = SliderPrimitive.Root.displayName;

export { Slider };



================================================
FILE: src/components/ui/sonner.tsx
================================================
import { useTheme } from "next-themes";
import { Toaster as Sonner, toast } from "sonner";

type ToasterProps = React.ComponentProps<typeof Sonner>;

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme();

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton: "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton: "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  );
};

export { Toaster, toast };



================================================
FILE: src/components/ui/switch.tsx
================================================
import * as React from "react";
import * as SwitchPrimitives from "@radix-ui/react-switch";

import { cn } from "@/lib/utils";

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors data-[state=checked]:bg-primary data-[state=unchecked]:bg-input focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50",
      className,
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0",
      )}
    />
  </SwitchPrimitives.Root>
));
Switch.displayName = SwitchPrimitives.Root.displayName;

export { Switch };



================================================
FILE: src/components/ui/table.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

const Table = React.forwardRef<HTMLTableElement, React.HTMLAttributes<HTMLTableElement>>(
  ({ className, ...props }, ref) => (
    <div className="relative w-full overflow-auto">
      <table ref={ref} className={cn("w-full caption-bottom text-sm", className)} {...props} />
    </div>
  ),
);
Table.displayName = "Table";

const TableHeader = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(
  ({ className, ...props }, ref) => <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />,
);
TableHeader.displayName = "TableHeader";

const TableBody = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(
  ({ className, ...props }, ref) => (
    <tbody ref={ref} className={cn("[&_tr:last-child]:border-0", className)} {...props} />
  ),
);
TableBody.displayName = "TableBody";

const TableFooter = React.forwardRef<HTMLTableSectionElement, React.HTMLAttributes<HTMLTableSectionElement>>(
  ({ className, ...props }, ref) => (
    <tfoot ref={ref} className={cn("border-t bg-muted/50 font-medium [&>tr]:last:border-b-0", className)} {...props} />
  ),
);
TableFooter.displayName = "TableFooter";

const TableRow = React.forwardRef<HTMLTableRowElement, React.HTMLAttributes<HTMLTableRowElement>>(
  ({ className, ...props }, ref) => (
    <tr
      ref={ref}
      className={cn("border-b transition-colors data-[state=selected]:bg-muted hover:bg-muted/50", className)}
      {...props}
    />
  ),
);
TableRow.displayName = "TableRow";

const TableHead = React.forwardRef<HTMLTableCellElement, React.ThHTMLAttributes<HTMLTableCellElement>>(
  ({ className, ...props }, ref) => (
    <th
      ref={ref}
      className={cn(
        "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
        className,
      )}
      {...props}
    />
  ),
);
TableHead.displayName = "TableHead";

const TableCell = React.forwardRef<HTMLTableCellElement, React.TdHTMLAttributes<HTMLTableCellElement>>(
  ({ className, ...props }, ref) => (
    <td ref={ref} className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)} {...props} />
  ),
);
TableCell.displayName = "TableCell";

const TableCaption = React.forwardRef<HTMLTableCaptionElement, React.HTMLAttributes<HTMLTableCaptionElement>>(
  ({ className, ...props }, ref) => (
    <caption ref={ref} className={cn("mt-4 text-sm text-muted-foreground", className)} {...props} />
  ),
);
TableCaption.displayName = "TableCaption";

export { Table, TableHeader, TableBody, TableFooter, TableHead, TableRow, TableCell, TableCaption };



================================================
FILE: src/components/ui/tabs.tsx
================================================
import * as React from "react";
import * as TabsPrimitive from "@radix-ui/react-tabs";

import { cn } from "@/lib/utils";

const Tabs = TabsPrimitive.Root;

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className,
    )}
    {...props}
  />
));
TabsList.displayName = TabsPrimitive.List.displayName;

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
      className,
    )}
    {...props}
  />
));
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName;

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className,
    )}
    {...props}
  />
));
TabsContent.displayName = TabsPrimitive.Content.displayName;

export { Tabs, TabsList, TabsTrigger, TabsContent };



================================================
FILE: src/components/ui/textarea.tsx
================================================
import * as React from "react";

import { cn } from "@/lib/utils";

export interface TextareaProps extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(({ className, ...props }, ref) => {
  return (
    <textarea
      className={cn(
        "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className,
      )}
      ref={ref}
      {...props}
    />
  );
});
Textarea.displayName = "Textarea";

export { Textarea };



================================================
FILE: src/components/ui/toast.tsx
================================================
import * as React from "react";
import * as ToastPrimitives from "@radix-ui/react-toast";
import { cva, type VariantProps } from "class-variance-authority";
import { X } from "lucide-react";

import { cn } from "@/lib/utils";

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className,
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive: "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  },
);

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return <ToastPrimitives.Root ref={ref} className={cn(toastVariants({ variant }), className)} {...props} />;
});
Toast.displayName = ToastPrimitives.Root.displayName;

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors group-[.destructive]:border-muted/40 hover:bg-secondary group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 group-[.destructive]:focus:ring-destructive disabled:pointer-events-none disabled:opacity-50",
      className,
    )}
    {...props}
  />
));
ToastAction.displayName = ToastPrimitives.Action.displayName;

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity group-hover:opacity-100 group-[.destructive]:text-red-300 hover:text-foreground group-[.destructive]:hover:text-red-50 focus:opacity-100 focus:outline-none focus:ring-2 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className,
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
));
ToastClose.displayName = ToastPrimitives.Close.displayName;

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title ref={ref} className={cn("text-sm font-semibold", className)} {...props} />
));
ToastTitle.displayName = ToastPrimitives.Title.displayName;

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description ref={ref} className={cn("text-sm opacity-90", className)} {...props} />
));
ToastDescription.displayName = ToastPrimitives.Description.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

type ToastActionElement = React.ReactElement<typeof ToastAction>;

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
};



================================================
FILE: src/components/ui/toaster.tsx
================================================
import { useToast } from "@/hooks/use-toast";
import { Toast, ToastClose, ToastDescription, ToastProvider, ToastTitle, ToastViewport } from "@/components/ui/toast";

export function Toaster() {
  const { toasts } = useToast();

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && <ToastDescription>{description}</ToastDescription>}
            </div>
            {action}
            <ToastClose />
          </Toast>
        );
      })}
      <ToastViewport />
    </ToastProvider>
  );
}



================================================
FILE: src/components/ui/toggle-group.tsx
================================================
import * as React from "react";
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import { type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";
import { toggleVariants } from "@/components/ui/toggle";

const ToggleGroupContext = React.createContext<VariantProps<typeof toggleVariants>>({
  size: "default",
  variant: "default",
});

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> & VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root ref={ref} className={cn("flex items-center justify-center gap-1", className)} {...props}>
    <ToggleGroupContext.Provider value={{ variant, size }}>{children}</ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
));

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName;

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> & VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext);

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className,
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  );
});

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName;

export { ToggleGroup, ToggleGroupItem };



================================================
FILE: src/components/ui/toggle.tsx
================================================
import * as React from "react";
import * as TogglePrimitive from "@radix-ui/react-toggle";
import { cva, type VariantProps } from "class-variance-authority";

import { cn } from "@/lib/utils";

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline: "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  },
);

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> & VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root ref={ref} className={cn(toggleVariants({ variant, size, className }))} {...props} />
));

Toggle.displayName = TogglePrimitive.Root.displayName;

export { Toggle, toggleVariants };



================================================
FILE: src/components/ui/tooltip.tsx
================================================
import * as React from "react";
import * as TooltipPrimitive from "@radix-ui/react-tooltip";

import { cn } from "@/lib/utils";

const TooltipProvider = TooltipPrimitive.Provider;

const Tooltip = TooltipPrimitive.Root;

const TooltipTrigger = TooltipPrimitive.Trigger;

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className,
    )}
    {...props}
  />
));
TooltipContent.displayName = TooltipPrimitive.Content.displayName;

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider };



================================================
FILE: src/components/ui/use-toast.ts
================================================
import { useToast, toast } from "@/hooks/use-toast";

export { useToast, toast };



================================================
FILE: src/contexts/AuthContext.tsx
================================================
import React, { createContext, useContext, useState, useEffect } from 'react';

export interface User {
  id: string;
  email: string;
  name: string;
  department: string;
  role: 'CCO' | 'Analyst' | 'Administrator' | 'Financial Planner';
  employeeId: string;
  lastLogin: string;
  avatar?: string;
}

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  checkAuth: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// Mock users for demonstration
const mockUsers: Record<string, User> = {
  'sarah.johnson@wealthfirm.com': {
    id: '1',
    email: 'sarah.johnson@wealthfirm.com',
    name: 'Sarah Johnson',
    department: 'Wealth Management',
    role: 'Financial Planner',
    employeeId: 'WF001',
    lastLogin: new Date().toISOString(),
  },
  'jennifer.walsh@wealthfirm.com': {
    id: '2',
    email: 'jennifer.walsh@wealthfirm.com',
    name: 'Jennifer Walsh',
    department: 'Compliance',
    role: 'CCO',
    employeeId: 'WF002',
    lastLogin: new Date().toISOString(),
  },
  'michael.chen@wealthfirm.com': {
    id: '3',
    email: 'michael.chen@wealthfirm.com',
    name: 'Michael Chen',
    department: 'Technology',
    role: 'Administrator',
    employeeId: 'WF003',
    lastLogin: new Date().toISOString(),
  },
};

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  const checkAuth = () => {
    const storedUser = localStorage.getItem('mock_auth_user');
    if (storedUser) {
      try {
        const parsedUser = JSON.parse(storedUser);
        setUser(parsedUser);
      } catch (error) {
        localStorage.removeItem('mock_auth_user');
      }
    }
    setIsLoading(false);
  };

  const login = async (email: string, password: string): Promise<void> => {
    setIsLoading(true);
    
    // Simulate API call delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
    const mockUser = mockUsers[email.toLowerCase()];
    
    if (!mockUser || password !== 'demo123') {
      setIsLoading(false);
      throw new Error('Invalid email or password');
    }
    
    const updatedUser = {
      ...mockUser,
      lastLogin: new Date().toISOString(),
    };
    
    setUser(updatedUser);
    localStorage.setItem('mock_auth_user', JSON.stringify(updatedUser));
    setIsLoading(false);
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('mock_auth_user');
  };

  useEffect(() => {
    checkAuth();
  }, []);

  const value: AuthContextType = {
    user,
    isAuthenticated: !!user,
    isLoading,
    login,
    logout,
    checkAuth,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};


================================================
FILE: src/data/mockChatData.ts
================================================
import { CustomGPT, Thread, Message, SystemPromptTemplate } from "@/types/chat";

export const mockCustomGPTs: CustomGPT[] = [
  {
    id: "gpt_crm_001",
    name: "CRM Assistant",
    description: "Specialized in client relationship management and Redtail CRM integration",
    systemPrompt: "You are a specialized CRM assistant for financial advisors. You help manage client relationships, track communications, and ensure proper documentation for SEC compliance. Always prioritize client confidentiality and regulatory requirements.",
    specialization: "crm",
    color: "blue",
    icon: "Users",
    mcpToolsEnabled: {
      redtailCRM: true,
      albridgePortfolio: false,
      blackDiamond: false
    },
    isActive: true,
    createdAt: "2025-09-01T09:00:00Z",
    updatedAt: "2025-09-05T14:30:00Z"
  },
  {
    id: "gpt_portfolio_001", 
    name: "Portfolio Analyzer",
    description: "Investment analysis and portfolio management with Albridge integration",
    systemPrompt: "You are a specialized portfolio analysis assistant for wealth management. You analyze investment portfolios, provide performance insights, and make SEC-compliant investment recommendations based on client risk tolerance and objectives.",
    specialization: "portfolio",
    color: "green",
    icon: "TrendingUp",
    mcpToolsEnabled: {
      redtailCRM: false,
      albridgePortfolio: true,
      blackDiamond: false
    },
    isActive: true,
    createdAt: "2025-09-01T09:15:00Z",
    updatedAt: "2025-09-08T11:20:00Z"
  },
  {
    id: "gpt_compliance_001",
    name: "Compliance Monitor", 
    description: "SEC compliance oversight and regulatory guidance",
    systemPrompt: "You are a specialized compliance assistant for financial advisory firms. You ensure all communications, recommendations, and documentation meet SEC and FINRA requirements. You flag potential compliance issues and provide regulatory guidance.",
    specialization: "compliance",
    color: "red",
    icon: "Shield",
    mcpToolsEnabled: {
      redtailCRM: true,
      albridgePortfolio: true,
      blackDiamond: false
    },
    isActive: true,
    createdAt: "2025-09-01T09:30:00Z",
    updatedAt: "2025-09-07T16:45:00Z"
  },
  {
    id: "gpt_general_001",
    name: "General Advisor",
    description: "Comprehensive financial planning and advisory assistance",
    systemPrompt: "You are a comprehensive financial planning assistant. You provide holistic financial advice covering investments, retirement planning, tax strategies, and estate planning while maintaining strict SEC compliance standards.",
    specialization: "general",
    color: "purple",
    icon: "Brain", 
    mcpToolsEnabled: {
      redtailCRM: true,
      albridgePortfolio: true,
      blackDiamond: true
    },
    isActive: true,
    createdAt: "2025-09-01T09:45:00Z",
    updatedAt: "2025-09-09T10:15:00Z"
  }
];

export const mockThreads: Thread[] = [
  {
    id: "thread_001",
    title: "Robert J. Smith - Portfolio Review",
    customGPTId: "gpt_portfolio_001",
    createdAt: "2025-09-10T09:30:00Z",
    updatedAt: "2025-09-10T11:45:00Z",
    lastMessage: "Based on the portfolio analysis, I recommend a slight rebalancing to reduce equity overweight...",
    messageCount: 12,
    isArchived: false,
    tags: ["quarterly-review", "rebalancing"]
  },
  {
    id: "thread_002", 
    title: "Maria Gonzalez - CRM Update",
    customGPTId: "gpt_crm_001",
    createdAt: "2025-09-09T14:20:00Z",
    updatedAt: "2025-09-09T16:10:00Z",
    lastMessage: "I've updated the client profile with the new contact information and documented today's call.",
    messageCount: 8,
    isArchived: false,
    tags: ["profile-update", "contact-change"]
  },
  {
    id: "thread_003",
    title: "Compliance Review - Q3 2025",
    customGPTId: "gpt_compliance_001", 
    createdAt: "2025-09-08T10:00:00Z",
    updatedAt: "2025-09-10T08:30:00Z",
    lastMessage: "All client communications this quarter meet SEC documentation requirements. No violations detected.",
    messageCount: 25,
    isArchived: false,
    tags: ["quarterly-review", "sec-compliance"]
  },
  {
    id: "thread_004",
    title: "James Chen - Retirement Planning",
    customGPTId: "gpt_general_001",
    createdAt: "2025-09-07T15:30:00Z", 
    updatedAt: "2025-09-08T12:20:00Z",
    lastMessage: "The 401(k) optimization strategy looks solid. Consider also exploring backdoor Roth IRA options.",
    messageCount: 18,
    isArchived: false,
    tags: ["retirement", "401k", "tax-strategy"]
  },
  {
    id: "thread_005",
    title: "Tax Loss Harvesting Analysis",
    customGPTId: "gpt_portfolio_001",
    createdAt: "2025-09-06T11:15:00Z",
    updatedAt: "2025-09-06T14:30:00Z", 
    lastMessage: "Identified $15,000 in potential tax loss harvesting opportunities for year-end.",
    messageCount: 7,
    isArchived: true,
    tags: ["tax-strategy", "year-end-planning"]
  }
];

export const mockMessages: Message[] = [
  {
    id: "msg_001",
    threadId: "thread_001", 
    content: "Can you analyze Robert Smith's current portfolio performance and recommend any adjustments?",
    role: "user",
    timestamp: "2025-09-10T09:30:00Z",
    attachments: [
      {
        id: "file_001",
        name: "robert_smith_portfolio.xlsx",
        type: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        size: 245760,
        url: "/uploads/robert_smith_portfolio.xlsx",
        uploadedAt: "2025-09-10T09:29:00Z"
      }
    ]
  },
  {
    id: "msg_002",
    threadId: "thread_001",
    content: "I've analyzed Robert Smith's portfolio data from the Excel file. Here's my assessment:\n\n**Current Allocation Analysis:**\n- Large Cap Equity: 35.2% (target: 30-35%)\n- Small Cap Equity: 12.8% (target: 10-15%)\n- International Equity: 22.0% (target: 15-20%)\n- Bonds: 26.6% (target: 25-30%)\n- Cash: 3.4% (target: 5%)\n\n**Key Findings:**\n1. Portfolio is slightly overweight in international equity (+2-7%)\n2. Cash position is below target allocation\n3. Overall performance is strong at 8.4% YTD\n\n**Recommendations:**\n1. Reduce international equity by $25,000\n2. Increase cash position to 5% of portfolio\n3. Consider tax-loss harvesting in underperforming international positions\n\n**Compliance Note:** All recommendations align with client's moderate risk tolerance documented in annual review.",
    role: "assistant",
    timestamp: "2025-09-10T09:35:00Z",
    customGPTId: "gpt_portfolio_001",
    mcpToolInteractions: [
      {
        toolName: "albridge-portfolio",
        action: "fetch_portfolio_data", 
        data: { clientId: "RT_12345", asOfDate: "2025-09-10" },
        timestamp: "2025-09-10T09:34:00Z",
        success: true
      }
    ]
  }
];

export const mockSystemPromptTemplates: SystemPromptTemplate[] = [
  {
    id: "template_001",
    name: "CRM Specialist",
    description: "Client relationship management and communication tracking",
    specialization: "crm",
    prompt: "You are a specialized CRM assistant for financial advisors. You help manage client relationships, track communications, schedule follow-ups, and ensure proper documentation for SEC compliance. Always prioritize client confidentiality and regulatory requirements. When accessing client data, verify permissions and log all interactions for audit trails.",
    mcpToolsRecommended: {
      redtailCRM: true,
      albridgePortfolio: false,
      blackDiamond: false
    }
  },
  {
    id: "template_002", 
    name: "Portfolio Manager",
    description: "Investment analysis and portfolio optimization",
    specialization: "portfolio",
    prompt: "You are a specialized portfolio analysis assistant for wealth management. You analyze investment portfolios, provide performance insights, and make SEC-compliant investment recommendations based on client risk tolerance and objectives. Always consider tax implications, diversification, and regulatory requirements in your analysis.",
    mcpToolsRecommended: {
      redtailCRM: false,
      albridgePortfolio: true,
      blackDiamond: false
    }
  },
  {
    id: "template_003",
    name: "Compliance Officer",
    description: "SEC compliance monitoring and regulatory guidance", 
    specialization: "compliance",
    prompt: "You are a specialized compliance assistant for financial advisory firms. You ensure all communications, recommendations, and documentation meet SEC and FINRA requirements. You flag potential compliance issues, provide regulatory guidance, and maintain audit trails. Always err on the side of caution when interpreting regulations.",
    mcpToolsRecommended: {
      redtailCRM: true,
      albridgePortfolio: true, 
      blackDiamond: false
    }
  },
  {
    id: "template_004",
    name: "Retirement Planner",
    description: "Specialized in retirement and tax-advantaged planning",
    specialization: "retirement",
    prompt: "You are a specialized retirement planning assistant. You help clients optimize their retirement savings strategies, including 401(k), IRA, Roth conversions, and Social Security planning. You provide tax-efficient strategies while ensuring SEC compliance and proper documentation.",
    mcpToolsRecommended: {
      redtailCRM: true,
      albridgePortfolio: true,
      blackDiamond: true
    }
  },
  {
    id: "template_005",
    name: "Tax Strategist", 
    description: "Tax-efficient investment and planning strategies",
    specialization: "tax",
    prompt: "You are a specialized tax strategy assistant for financial planning. You help optimize tax efficiency through investment selection, asset location, tax-loss harvesting, and strategic planning. Always consider current tax law and coordinate with client's tax professional.",
    mcpToolsRecommended: {
      redtailCRM: false,
      albridgePortfolio: true,
      blackDiamond: true
    }
  }
];


================================================
FILE: src/data/mockData.ts
================================================
// Mock data for the SEC-compliant wealth management AI system

// Mock clients data for template completion
export const mockClients = [
  {
    id: "client_001",
    name: "Robert J. Smith",
    account_number: "RTS-789456123",
    redtail_id: "RT_12345",
    date_of_birth: "1975-03-15",
    account_opening_date: "2018-06-12",
    primary_advisor: "Sarah Johnson, CFP",
    relationship_type: "Individual Advisory",
    assets_under_management: "$847,392.18",
    last_annual_review: "2024-09-15",
    next_scheduled_review: "2025-09-15",
    risk_tolerance: "Moderate",
    investment_objective: "Long-term Growth"
  },
  {
    id: "client_002", 
    name: "Maria Gonzalez",
    account_number: "MGZ-234567890",
    redtail_id: "RT_23456",
    date_of_birth: "1982-07-22",
    account_opening_date: "2020-03-10",
    primary_advisor: "Michael Chen, CFP",
    relationship_type: "Joint Advisory",
    assets_under_management: "$1,234,567.89",
    last_annual_review: "2024-08-20",
    next_scheduled_review: "2025-08-20",
    risk_tolerance: "Aggressive",
    investment_objective: "Capital Appreciation"
  },
  {
    id: "client_003",
    name: "James Chen",
    account_number: "JCH-345678901",
    redtail_id: "RT_34567",
    date_of_birth: "1968-11-15",
    account_opening_date: "2015-09-05",
    primary_advisor: "Sarah Johnson, CFP",
    relationship_type: "Individual Advisory",
    assets_under_management: "$2,856,402.34",
    last_annual_review: "2024-07-10",
    next_scheduled_review: "2025-07-10",
    risk_tolerance: "Conservative",
    investment_objective: "Capital Preservation"
  },
  {
    id: "client_004",
    name: "Emily Davis",
    account_number: "EDV-456789012",
    redtail_id: "RT_45678",
    date_of_birth: "1990-04-08",
    account_opening_date: "2022-01-15",
    primary_advisor: "Lisa Wang, CFP",
    relationship_type: "Individual Advisory", 
    assets_under_management: "$456,789.12",
    last_annual_review: "2024-06-01",
    next_scheduled_review: "2025-06-01",
    risk_tolerance: "Moderate Aggressive",
    investment_objective: "Growth and Income"
  }
];

// Mock portfolios data for each client
export const mockPortfolios = [
  {
    client_id: "client_001",
    albridge_account: "ALB_789456123",
    as_of_date: "2025-08-31",
    total_portfolio_value: 847392.18,
    asset_allocation: {
      "US Large Cap Equity": 35.2,
      "US Small Cap Equity": 12.8,
      "International Developed Equity": 15.7,
      "Emerging Markets Equity": 6.3,
      "Investment Grade Bonds": 22.4,
      "High Yield Bonds": 4.2,
      "Cash & Money Market": 3.4
    },
    performance_summary: {
      "Quarter-to-Date": 2.7,
      "Year-to-Date": 8.4,
      "1-Year": 12.1,
      "3-Year Annualized": 7.9,
      "Since Inception": 9.2
    }
  },
  {
    client_id: "client_002",
    albridge_account: "ALB_234567890",
    as_of_date: "2025-08-31",
    total_portfolio_value: 1234567.89,
    asset_allocation: {
      "US Large Cap Equity": 45.5,
      "US Small Cap Equity": 18.2,
      "International Developed Equity": 12.8,
      "Emerging Markets Equity": 8.7,
      "Investment Grade Bonds": 10.3,
      "High Yield Bonds": 2.8,
      "Cash & Money Market": 1.7
    },
    performance_summary: {
      "Quarter-to-Date": 4.2,
      "Year-to-Date": 12.8,
      "1-Year": 18.5,
      "3-Year Annualized": 11.3,
      "Since Inception": 13.7
    }
  },
  {
    client_id: "client_003",
    albridge_account: "ALB_345678901",
    as_of_date: "2025-08-31",
    total_portfolio_value: 2856402.34,
    asset_allocation: {
      "US Large Cap Equity": 25.8,
      "US Small Cap Equity": 5.2,
      "International Developed Equity": 8.7,
      "Emerging Markets Equity": 2.3,
      "Investment Grade Bonds": 45.6,
      "High Yield Bonds": 3.1,
      "Cash & Money Market": 9.3
    },
    performance_summary: {
      "Quarter-to-Date": 1.8,
      "Year-to-Date": 5.2,
      "1-Year": 7.8,
      "3-Year Annualized": 6.1,
      "Since Inception": 7.4
    }
  },
  {
    client_id: "client_004", 
    albridge_account: "ALB_456789012",
    as_of_date: "2025-08-31",
    total_portfolio_value: 456789.12,
    asset_allocation: {
      "US Large Cap Equity": 38.5,
      "US Small Cap Equity": 15.2,
      "International Developed Equity": 18.3,
      "Emerging Markets Equity": 7.8,
      "Investment Grade Bonds": 15.7,
      "High Yield Bonds": 2.9,
      "Cash & Money Market": 1.6
    },
    performance_summary: {
      "Quarter-to-Date": 3.1,
      "Year-to-Date": 9.7,
      "1-Year": 14.2,
      "3-Year Annualized": 8.9,
      "Since Inception": 10.4
    }
  }
];

export const mockMeetingNoteResult = {
  id: "note_001",
  client_information: {
    name: "Robert J. Smith",
    account_number: "RTS-789456123",
    meeting_date: "2025-09-10",
    meeting_type: "Quarterly Review",
    advisor: "Sarah Johnson, CFP"
  },
  discussion_topics: [
    {
      category: "Financial Goals Review",
      content: "Client confirmed retirement goal remains age 65 (15 years). Discussed increasing 401(k) contribution to maximum allowable limit due to recent salary increase.",
      regulatory_notes: "Goal reconfirmation documented per Investment Advisors Act requirements"
    },
    {
      category: "Risk Tolerance Assessment", 
      content: "Client maintains moderate risk tolerance. Recent market volatility has not changed investment timeline or comfort level. Confirmed continued appropriateness of 70/30 equity/bond allocation.",
      regulatory_notes: "Risk tolerance reassessment completed per firm policy"
    },
    {
      category: "Life Events",
      content: "Client mentioned daughter's college enrollment next year. Estimated additional expense of $25,000 annually for 4 years. Discussed 529 plan optimization.",
      regulatory_notes: "Material life event documented affecting financial planning recommendations"
    }
  ],
  recommendations_given: [
    {
      recommendation: "Increase 401(k) contribution from $15,000 to maximum $23,000 annually",
      rationale: "Recent salary increase provides capacity, maximizes tax-deferred growth opportunity",
      implementation: "Client to contact HR to adjust payroll deduction beginning next pay period",
      regulatory_basis: "Recommendation based on client's stated retirement timeline and risk tolerance"
    },
    {
      recommendation: "Establish additional 529 education savings plan with $5,000 initial funding",
      rationale: "Tax-advantaged college savings for daughter's education expenses",
      implementation: "Firm to prepare 529 application for client signature within 5 business days",
      regulatory_basis: "Education planning recommendation based on disclosed life event"
    }
  ],
  action_items: {
    client_responsibilities: [
      "Contact HR to increase 401(k) contribution by October 1, 2025",
      "Provide daughter's school information for 529 plan setup",
      "Review and sign 529 plan application within 7 days"
    ],
    firm_responsibilities: [
      "Prepare 529 education savings plan application by September 15, 2025",
      "Schedule follow-up call in 30 days to confirm 401(k) increase implementation",
      "Update client profile with new contribution levels and education expense timeline"
    ]
  },
  compliance_verification: {
    sec_requirements_met: true,
    fiduciary_standard_applied: true,
    suitability_documented: true,
    conflicts_of_interest: "None disclosed",
    fee_disclosure_current: true
  },
  audit_trail: {
    original_audio_duration: "47 minutes, 23 seconds",
    ai_processing_time: "2 minutes, 15 seconds", 
    ai_confidence_score: 96,
    human_reviewer: "Jennifer Walsh, CCO",
    review_date: "2025-09-10T16:45:00Z",
    approval_status: "approved",
    regulatory_retention_date: "2031-09-10"
  }
};

export const mockCRMIntegration = {
  client_profile: {
    redtail_id: "RT_12345",
    name: "Robert J. Smith",
    date_of_birth: "1975-03-15",
    account_opening_date: "2018-06-12", 
    primary_advisor: "Sarah Johnson, CFP",
    relationship_type: "Individual Advisory",
    assets_under_management: "$847,392.18",
    last_annual_review: "2024-09-15",
    next_scheduled_review: "2025-09-15",
    risk_tolerance: "Moderate",
    investment_objective: "Long-term Growth"
  },
  recent_activities: [
    {
      date: "2025-08-28",
      type: "Phone Call", 
      summary: "Discussed market volatility concerns, reassured client of long-term strategy",
      advisor: "Sarah Johnson"
    },
    {
      date: "2025-07-15",
      type: "Document Review",
      summary: "Client signed updated investment policy statement",
      advisor: "Sarah Johnson"
    }
  ]
};

export const mockPortfolioData = {
  albridge_account: "ALB_789456123",
  as_of_date: "2025-08-31",
  total_portfolio_value: 847392.18,
  asset_allocation: {
    "US Large Cap Equity": 35.2,
    "US Small Cap Equity": 12.8, 
    "International Developed Equity": 15.7,
    "Emerging Markets Equity": 6.3,
    "Investment Grade Bonds": 22.4,
    "High Yield Bonds": 4.2,
    "Cash & Money Market": 3.4
  },
  performance_summary: {
    "Quarter-to-Date": 2.7,
    "Year-to-Date": 8.4, 
    "1-Year": 12.1,
    "3-Year Annualized": 7.9,
    "Since Inception": 9.2
  },
  ai_analysis: {
    observations: [
      "Portfolio allocation closely aligns with moderate risk profile",
      "Performance tracking above target benchmark by 1.3% year-to-date",
      "Cash position appropriate for current market conditions"
    ],
    recommendations: [
      "Consider small rebalancing to target allocation (equity slightly overweight)",
      "Maintain current allocation given strong relative performance",
      "Monitor international exposure given recent currency fluctuations"
    ]
  }
};

export const mockComplianceDashboard = {
  pending_reviews: [
    {
      id: "review_001",
      client_name: "Robert J. Smith",
      meeting_date: "2025-09-10",
      ai_confidence: 96,
      priority: "normal",
      created: "2025-09-10T14:30:00Z",
      regulatory_flags: 0,
      requires_attention: false
    },
    {
      id: "review_002", 
      client_name: "Maria Gonzalez",
      meeting_date: "2025-09-09",
      ai_confidence: 78,
      priority: "high",
      created: "2025-09-09T16:15:00Z", 
      regulatory_flags: 1,
      requires_attention: true,
      flag_reason: "Complex investment recommendation requiring additional documentation"
    },
    {
      id: "review_003",
      client_name: "James Chen",
      meeting_date: "2025-09-09",
      ai_confidence: 92,
      priority: "normal",
      created: "2025-09-09T11:20:00Z",
      regulatory_flags: 0,
      requires_attention: false
    }
  ],
  audit_metrics: {
    notes_processed_today: 12,
    average_ai_confidence: 91,
    human_review_time_avg: "4m 23s",
    sec_compliance_rate: "100%",
    regulatory_flags_total: 3,
    approved_notes: 142,
    pending_approval: 5
  },
  security_status: {
    encryption_status: "Active - AES-256",
    last_security_scan: "2025-09-10T02:00:00Z",
    access_violations: 0,
    audit_trail_integrity: "Verified",
    data_retention_compliance: "Current"
  }
};

export const mockRecentMeetings = [
  {
    id: "meeting_001",
    client_name: "Robert J. Smith",
    date: "2025-09-10",
    type: "Quarterly Review",
    advisor: "Sarah Johnson, CFP",
    status: "approved",
    ai_confidence: 96,
    duration: "47m 23s"
  },
  {
    id: "meeting_002",
    client_name: "Maria Gonzalez", 
    date: "2025-09-09",
    type: "Annual Review",
    advisor: "Michael Chen, CFP",
    status: "pending",
    ai_confidence: 78,
    duration: "1h 15m"
  },
  {
    id: "meeting_003",
    client_name: "James Chen",
    date: "2025-09-09", 
    type: "Investment Review",
    advisor: "Sarah Johnson, CFP",
    status: "in_review",
    ai_confidence: 92,
    duration: "32m 18s"
  },
  {
    id: "meeting_004",
    client_name: "Lisa Rodriguez",
    date: "2025-09-08",
    type: "Risk Assessment",
    advisor: "David Park, CFP",
    status: "approved",
    ai_confidence: 88,
    duration: "28m 45s"
  }
];

// Flagged items mock data
export const mockFlaggedItems = [
  {
    id: "flagged_001",
    client_name: "Maria Gonzalez",
    meeting_date: "2025-09-09",
    ai_confidence: 78,
    priority: "high",
    created: "2025-09-09T16:15:00Z",
    flagged_date: "2025-09-09T16:45:00Z",
    flagged_by: "Jennifer Walsh, CCO",
    flag_reason: "Complex investment recommendation requiring additional documentation",
    flag_category: "Investment Recommendation",
    resolution_status: "pending",
    escalation_level: "supervisor",
    estimated_resolution_time: "2-3 business days"
  },
  {
    id: "flagged_002",
    client_name: "David Thompson",
    meeting_date: "2025-09-08",
    ai_confidence: 65,
    priority: "high",
    created: "2025-09-08T14:20:00Z",
    flagged_date: "2025-09-08T15:00:00Z",
    flagged_by: "Michael Chen, CFP",
    flag_reason: "Insufficient risk tolerance documentation for aggressive portfolio recommendation",
    flag_category: "Risk Assessment",
    resolution_status: "in_progress",
    escalation_level: "compliance_officer",
    estimated_resolution_time: "1-2 business days"
  }
];

// Security mock data
export const mockSecurityData = {
  security_metrics: {
    encryption_status: "Active - AES-256",
    last_security_scan: "2025-09-10T02:00:00Z",
    vulnerability_count: 0,
    access_violations_today: 0,
    failed_login_attempts: 3,
    active_sessions: 12,
    data_retention_compliance: "100%",
    audit_trail_integrity: "Verified"
  },
  recent_security_events: [
    {
      id: "sec_001",
      timestamp: "2025-09-10T09:15:00Z",
      event_type: "login_success",
      user: "sarah.johnson@firm.com",
      ip_address: "192.168.1.45",
      risk_level: "low",
      details: "Successful login from known device"
    },
    {
      id: "sec_002", 
      timestamp: "2025-09-10T08:30:00Z",
      event_type: "failed_login",
      user: "unknown@external.com",
      ip_address: "203.45.67.89",
      risk_level: "medium",
      details: "Failed login attempt - account not found"
    },
    {
      id: "sec_003",
      timestamp: "2025-09-10T07:45:00Z",
      event_type: "data_access",
      user: "jennifer.walsh@firm.com",
      ip_address: "192.168.1.22",
      risk_level: "low",
      details: "Accessed client portfolio data for compliance review"
    }
  ],
  compliance_monitoring: {
    sec_requirements_status: "compliant",
    data_encryption_compliance: "compliant", 
    record_retention_compliance: "compliant",
    access_control_compliance: "compliant",
    audit_trail_compliance: "compliant",
    last_compliance_check: "2025-09-10T06:00:00Z"
  },
  access_control: {
    total_users: 15,
    active_sessions: 12,
    failed_access_attempts: 3,
    privileged_access_reviews: 2,
    role_based_permissions: "enabled",
    two_factor_authentication: "enforced"
  }
};

export const mockTodayStats = {
  meetings_processed: 12,
  pending_reviews: 5,
  compliance_rate: 100,
  avg_confidence: 91,
  flagged_items: 2,
  approved_notes: 7
};


================================================
FILE: src/hooks/use-mobile.tsx
================================================
import * as React from "react";

const MOBILE_BREAKPOINT = 768;

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined);

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`);
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    };
    mql.addEventListener("change", onChange);
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT);
    return () => mql.removeEventListener("change", onChange);
  }, []);

  return !!isMobile;
}



================================================
FILE: src/hooks/use-toast.ts
================================================
import * as React from "react";

import type { ToastActionElement, ToastProps } from "@/components/ui/toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
  title?: React.ReactNode;
  description?: React.ReactNode;
  action?: ToastActionElement;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) => (t.id === action.toast.id ? { ...t, ...action.toast } : t)),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

function toast({ ...props }: Toast) {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState);

  React.useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };



================================================
FILE: src/layout/MainLayout.tsx
================================================
import { SidebarProvider, SidebarTrigger } from "@/components/ui/sidebar";
import { AppSidebar } from "@/components/AppSidebar";
import { UserMenu } from "@/components/UserMenu";
import { Bell, Menu } from "lucide-react";
import { Button } from "@/components/ui/button";

interface MainLayoutProps {
  children: React.ReactNode;
}

export function MainLayout({ children }: MainLayoutProps) {
  return (
    <SidebarProvider>
      <div className="min-h-screen flex w-full">
        <AppSidebar />
        
        <div className="flex-1 flex flex-col">
          {/* Global Header */}
          <header className="h-14 flex items-center justify-between px-6 border-b border-border bg-card/50 backdrop-blur supports-[backdrop-filter]:bg-card/60">
            <div className="flex items-center gap-3">
              <SidebarTrigger />
              <div className="h-4 w-px bg-border" />
              <div className="flex items-center gap-2">
                <span className="text-sm text-muted-foreground">
                  Today: September 10, 2025
                </span>
              </div>
            </div>
            
            <div className="flex items-center gap-3">
              <Button variant="ghost" size="icon" className="relative">
                <Bell className="w-4 h-4" />
                <span className="absolute -top-1 -right-1 w-2 h-2 bg-warning rounded-full"></span>
              </Button>
              
              <div className="flex items-center gap-2 pl-3 border-l border-border">
                <UserMenu />
              </div>
            </div>
          </header>
          
          {/* Main Content */}
          <main className="flex-1">
            {children}
          </main>
        </div>
      </div>
    </SidebarProvider>
  );
}


================================================
FILE: src/lib/utils.ts
================================================
import { clsx, type ClassValue } from "clsx";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}



================================================
FILE: src/pages/AuditTrail.tsx
================================================
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ComplianceStatus } from "@/components/ComplianceStatus";
import { mockMeetingNoteResult, mockComplianceDashboard } from "@/data/mockData";
import { 
  Shield, 
  Clock, 
  User, 
  FileText, 
  Download,
  Search,
  Filter,
  Eye,
  Lock,
  CheckCircle,
  AlertTriangle,
  Calendar,
  Database
} from "lucide-react";

interface AuditEvent {
  id: string;
  timestamp: string;
  event_type: string;
  user: string;
  client_name?: string;
  action: string;
  details: string;
  ip_address?: string;
  status: "success" | "warning" | "error";
  retention_date: string;
}

const mockAuditEvents: AuditEvent[] = [
  {
    id: "audit_001",
    timestamp: "2025-09-10T16:45:00Z",
    event_type: "note_approval",
    user: "Jennifer Walsh, CCO",
    client_name: "Robert J. Smith",
    action: "Approved meeting notes",
    details: "Quarterly review notes approved and posted to Redtail CRM",
    ip_address: "192.168.1.45",
    status: "success",
    retention_date: "2031-09-10"
  },
  {
    id: "audit_002", 
    timestamp: "2025-09-10T16:30:00Z",
    event_type: "ai_processing",
    user: "System AI",
    client_name: "Robert J. Smith",
    action: "AI note generation",
    details: "Meeting transcript processed with 96% confidence score",
    status: "success",
    retention_date: "2031-09-10"
  },
  {
    id: "audit_003",
    timestamp: "2025-09-10T14:30:00Z",
    event_type: "file_upload",
    user: "Sarah Johnson, CFP",
    client_name: "Robert J. Smith",
    action: "Audio file uploaded",
    details: "Meeting recording uploaded (47m 23s duration)",
    ip_address: "192.168.1.23",
    status: "success",
    retention_date: "2031-09-10"
  },
  {
    id: "audit_004",
    timestamp: "2025-09-10T11:15:00Z",
    event_type: "security_scan",
    user: "System Security",
    action: "Security scan completed",
    details: "Daily security scan - no vulnerabilities detected",
    status: "success",
    retention_date: "2026-09-10"
  },
  {
    id: "audit_005",
    timestamp: "2025-09-09T16:45:00Z",
    event_type: "compliance_flag",
    user: "Jennifer Walsh, CCO",
    client_name: "Maria Gonzalez",
    action: "Flagged for review",
    details: "Complex investment recommendation requires additional documentation",
    ip_address: "192.168.1.45",
    status: "warning",
    retention_date: "2031-09-09"
  },
  {
    id: "audit_006",
    timestamp: "2025-09-09T14:20:00Z",
    event_type: "crm_integration",
    user: "System Integration",
    client_name: "James Chen", 
    action: "CRM data sync",
    details: "Client profile synchronized with Redtail CRM",
    status: "success",
    retention_date: "2031-09-09"
  }
];

export default function AuditTrail() {
  const [searchTerm, setSearchTerm] = useState("");
  const [eventTypeFilter, setEventTypeFilter] = useState("all");
  const [statusFilter, setStatusFilter] = useState("all");

  const filteredEvents = mockAuditEvents.filter((event) => {
    const matchesSearch = event.client_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         event.user.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         event.action.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         event.details.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesType = eventTypeFilter === "all" || event.event_type === eventTypeFilter;
    const matchesStatus = statusFilter === "all" || event.status === statusFilter;
    
    return matchesSearch && matchesType && matchesStatus;
  });

  const getStatusIcon = (status: string) => {
    switch (status) {
      case "success":
        return <CheckCircle className="w-4 h-4 text-success" />;
      case "warning":
        return <AlertTriangle className="w-4 h-4 text-warning" />;
      case "error":
        return <AlertTriangle className="w-4 h-4 text-destructive" />;
      default:
        return <Clock className="w-4 h-4 text-muted-foreground" />;
    }
  };

  const getEventIcon = (eventType: string) => {
    switch (eventType) {
      case "note_approval":
        return <CheckCircle className="w-4 h-4 text-success" />;
      case "ai_processing":
        return <Database className="w-4 h-4 text-primary" />;
      case "file_upload":
        return <FileText className="w-4 h-4 text-blue-500" />;
      case "security_scan":
        return <Shield className="w-4 h-4 text-primary" />;
      case "compliance_flag":
        return <AlertTriangle className="w-4 h-4 text-warning" />;
      case "crm_integration":
        return <User className="w-4 h-4 text-green-500" />;
      default:
        return <Clock className="w-4 h-4 text-muted-foreground" />;
    }
  };

  const formatEventType = (type: string) => {
    return type.split('_').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
  };

  return (
    <div className="flex-1 space-y-6 p-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Audit Trail</h1>
          <p className="text-muted-foreground">
            Complete immutable record of all system activities for regulatory compliance
          </p>
        </div>
        
        <div className="flex items-center gap-4">
          <ComplianceStatus status="secure" />
          <Button className="gap-2">
            <Download className="w-4 h-4" />
            Export Report
          </Button>
        </div>
      </div>

      {/* Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="flex items-center p-6">
            <div className="flex items-center gap-4">
              <div className="p-2 bg-primary/10 rounded-lg">
                <FileText className="w-6 h-6 text-primary" />
              </div>
              <div>
                <div className="text-2xl font-bold">142</div>
                <div className="text-sm text-muted-foreground">Events Today</div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="flex items-center p-6">
            <div className="flex items-center gap-4">
              <div className="p-2 bg-success/10 rounded-lg">
                <CheckCircle className="w-6 h-6 text-success" />
              </div>
              <div>
                <div className="text-2xl font-bold">100%</div>
                <div className="text-sm text-muted-foreground">Compliance Rate</div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="flex items-center p-6">
            <div className="flex items-center gap-4">
              <div className="p-2 bg-warning/10 rounded-lg">
                <AlertTriangle className="w-6 h-6 text-warning" />
              </div>
              <div>
                <div className="text-2xl font-bold">3</div>
                <div className="text-sm text-muted-foreground">Flags This Week</div>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="flex items-center p-6">
            <div className="flex items-center gap-4">
              <div className="p-2 bg-primary/10 rounded-lg">
                <Lock className="w-6 h-6 text-primary" />
              </div>
              <div>
                <div className="text-2xl font-bold">6 Years</div>
                <div className="text-sm text-muted-foreground">Retention Period</div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Filters */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Filter className="w-5 h-5" />
            Filters & Search
          </CardTitle>
        </CardHeader>
        <CardContent className="flex items-center gap-4">
          <div className="flex-1">
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
              <Input 
                placeholder="Search events, users, or clients..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>
          </div>
          
          <Select value={eventTypeFilter} onValueChange={setEventTypeFilter}>
            <SelectTrigger className="w-48">
              <SelectValue placeholder="Event Type" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Event Types</SelectItem>
              <SelectItem value="note_approval">Note Approval</SelectItem>
              <SelectItem value="ai_processing">AI Processing</SelectItem>
              <SelectItem value="file_upload">File Upload</SelectItem>
              <SelectItem value="security_scan">Security Scan</SelectItem>
              <SelectItem value="compliance_flag">Compliance Flag</SelectItem>
              <SelectItem value="crm_integration">CRM Integration</SelectItem>
            </SelectContent>
          </Select>

          <Select value={statusFilter} onValueChange={setStatusFilter}>
            <SelectTrigger className="w-32">
              <SelectValue placeholder="Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Status</SelectItem>
              <SelectItem value="success">Success</SelectItem>
              <SelectItem value="warning">Warning</SelectItem>
              <SelectItem value="error">Error</SelectItem>
            </SelectContent>
          </Select>
        </CardContent>
      </Card>

      {/* Audit Events */}
      <Tabs defaultValue="events" className="space-y-4">
        <TabsList>
          <TabsTrigger value="events" className="gap-2">
            <Eye className="w-4 h-4" />
            Audit Events ({filteredEvents.length})
          </TabsTrigger>
          <TabsTrigger value="security" className="gap-2">
            <Shield className="w-4 h-4" />
            Security Log
          </TabsTrigger>
          <TabsTrigger value="compliance" className="gap-2">
            <CheckCircle className="w-4 h-4" />
            Compliance Reports
          </TabsTrigger>
        </TabsList>

        <TabsContent value="events" className="space-y-4">
          {filteredEvents.map((event) => (
            <Card key={event.id} className="border-l-4 border-l-primary/20">
              <CardContent className="p-4">
                <div className="flex items-start justify-between">
                  <div className="flex items-start gap-4 flex-1">
                    <div className="p-2 bg-muted rounded-lg">
                      {getEventIcon(event.event_type)}
                    </div>
                    
                    <div className="flex-1 space-y-1">
                      <div className="flex items-center gap-2">
                        <h4 className="font-medium">{event.action}</h4>
                        <Badge variant="secondary">{formatEventType(event.event_type)}</Badge>
                        {getStatusIcon(event.status)}
                      </div>
                      
                      <p className="text-sm text-muted-foreground">{event.details}</p>
                      
                      <div className="flex items-center gap-4 text-xs text-muted-foreground">
                        <span className="flex items-center gap-1">
                          <User className="w-3 h-3" />
                          {event.user}
                        </span>
                        {event.client_name && (
                          <span>Client: {event.client_name}</span>
                        )}
                        {event.ip_address && (
                          <span>IP: {event.ip_address}</span>
                        )}
                        <span className="flex items-center gap-1">
                          <Calendar className="w-3 h-3" />
                          Retain until: {new Date(event.retention_date).toLocaleDateString()}
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="text-right">
                    <div className="text-sm font-medium">
                      {new Date(event.timestamp).toLocaleDateString()}
                    </div>
                    <div className="text-xs text-muted-foreground">
                      {new Date(event.timestamp).toLocaleTimeString()}
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </TabsContent>

        <TabsContent value="security">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="w-5 h-5" />
                Security Status
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-3">
                  <h4 className="font-medium">Encryption Status</h4>
                  <div className="flex items-center justify-between p-3 bg-success/10 rounded-lg">
                    <span>AES-256 Encryption</span>
                    <ComplianceStatus status="approved" showIcon={false}>Active</ComplianceStatus>
                  </div>
                </div>

                <div className="space-y-3">
                  <h4 className="font-medium">Access Control</h4>
                  <div className="flex items-center justify-between p-3 bg-success/10 rounded-lg">
                    <span>Role-Based Access</span>
                    <ComplianceStatus status="approved" showIcon={false}>Enabled</ComplianceStatus>
                  </div>
                </div>

                <div className="space-y-3">
                  <h4 className="font-medium">Audit Trail Integrity</h4>
                  <div className="flex items-center justify-between p-3 bg-success/10 rounded-lg">
                    <span>Tamper Detection</span>
                    <ComplianceStatus status="approved" showIcon={false}>Verified</ComplianceStatus>
                  </div>
                </div>

                <div className="space-y-3">
                  <h4 className="font-medium">Data Retention</h4>
                  <div className="flex items-center justify-between p-3 bg-success/10 rounded-lg">
                    <span>SEC Compliance</span>
                    <ComplianceStatus status="approved" showIcon={false}>Current</ComplianceStatus>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="compliance">
          <Card>
            <CardContent className="flex items-center justify-center py-12">
              <div className="text-center space-y-3">
                <CheckCircle className="w-12 h-12 text-success mx-auto" />
                <h3 className="text-lg font-medium">100% SEC Compliance Rate</h3>
                <p className="text-muted-foreground">All regulatory requirements met for the current period</p>
                <Button className="mt-4">Generate Compliance Report</Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}


================================================
FILE: src/pages/Chat.tsx
================================================
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Plus, Settings } from 'lucide-react';
import { ThreadSidebar } from '@/components/chat/ThreadSidebar';
import { ConversationWindow } from '@/components/chat/ConversationWindow';
import { CustomGPTModal } from '@/components/chat/CustomGPTModal';
import { 
  mockCustomGPTs as initialCustomGPTs, 
  mockThreads as initialThreads, 
  mockMessages as initialMessages 
} from '@/data/mockChatData';
import { CustomGPT, Thread, Message } from '@/types/chat';
import { useToast } from '@/hooks/use-toast';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';

export default function Chat() {
  const { toast } = useToast();
  
  // State management
  const [customGPTs, setCustomGPTs] = useState<CustomGPT[]>(initialCustomGPTs);
  const [threads, setThreads] = useState<Thread[]>(initialThreads);
  const [messages, setMessages] = useState<Message[]>(initialMessages);
  const [selectedThreadId, setSelectedThreadId] = useState<string>();
  const [selectedCustomGPTId, setSelectedCustomGPTId] = useState<string>(customGPTs[0]?.id || '');
  
  // Modal states
  const [customGPTModalOpen, setCustomGPTModalOpen] = useState(false);
  const [customGPTModalMode, setCustomGPTModalMode] = useState<'create' | 'edit'>('create');
  const [editingCustomGPT, setEditingCustomGPT] = useState<CustomGPT>();

  // Get current thread and its messages
  const currentThread = threads.find(t => t.id === selectedThreadId);
  const threadMessages = selectedThreadId 
    ? messages.filter(m => m.threadId === selectedThreadId)
    : [];

  // Thread management
  const handleNewThread = () => {
    const newThread: Thread = {
      id: `thread_${Date.now()}`,
      title: `New Conversation - ${new Date().toLocaleDateString()}`,
      customGPTId: selectedCustomGPTId,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      messageCount: 0,
      isArchived: false
    };

    setThreads(prev => [newThread, ...prev]);
    setSelectedThreadId(newThread.id);
    
    toast({
      title: "New Thread Created",
      description: "Start your conversation with the selected CustomGPT."
    });
  };

  const handleThreadSelect = (threadId: string) => {
    setSelectedThreadId(threadId);
    const thread = threads.find(t => t.id === threadId);
    if (thread) {
      setSelectedCustomGPTId(thread.customGPTId);
    }
  };

  const handleEditThread = (threadId: string) => {
    // In a real app, this would open a rename dialog
    const newTitle = prompt("Enter new thread title:");
    if (newTitle) {
      setThreads(prev => prev.map(t => 
        t.id === threadId 
          ? { ...t, title: newTitle, updatedAt: new Date().toISOString() }
          : t
      ));
      toast({
        title: "Thread Renamed",
        description: "Thread title updated successfully."
      });
    }
  };

  const handleArchiveThread = (threadId: string) => {
    setThreads(prev => prev.map(t => 
      t.id === threadId 
        ? { ...t, isArchived: true, updatedAt: new Date().toISOString() }
        : t
    ));
    
    if (selectedThreadId === threadId) {
      setSelectedThreadId(undefined);
    }
    
    toast({
      title: "Thread Archived",
      description: "Thread moved to archives."
    });
  };

  const handleDeleteThread = (threadId: string) => {
    if (confirm("Are you sure you want to delete this thread? This action cannot be undone.")) {
      setThreads(prev => prev.filter(t => t.id !== threadId));
      setMessages(prev => prev.filter(m => m.threadId !== threadId));
      
      if (selectedThreadId === threadId) {
        setSelectedThreadId(undefined);
      }
      
      toast({
        title: "Thread Deleted",
        description: "Thread and all messages have been permanently deleted.",
        variant: "destructive"
      });
    }
  };

  // Message handling
  const handleSendMessage = (content: string, attachments?: File[]) => {
    if (!selectedThreadId) return;

    // User message
    const userMessage: Message = {
      id: `msg_${Date.now()}_user`,
      threadId: selectedThreadId,
      content,
      role: 'user',
      timestamp: new Date().toISOString(),
      attachments: attachments?.map(file => ({
        id: `file_${Date.now()}_${file.name}`,
        name: file.name,
        type: file.type,
        size: file.size,
        url: URL.createObjectURL(file),
        uploadedAt: new Date().toISOString()
      }))
    };

    setMessages(prev => [...prev, userMessage]);

    // Update thread
    setThreads(prev => prev.map(t => 
      t.id === selectedThreadId 
        ? { 
            ...t, 
            messageCount: t.messageCount + 1,
            lastMessage: content.substring(0, 100) + (content.length > 100 ? '...' : ''),
            updatedAt: new Date().toISOString() 
          }
        : t
    ));

    // Simulate AI response
    setTimeout(() => {
      const aiMessage: Message = {
        id: `msg_${Date.now()}_ai`,
        threadId: selectedThreadId,
        content: generateMockAIResponse(content, selectedCustomGPTId),
        role: 'assistant',
        timestamp: new Date().toISOString(),
        customGPTId: selectedCustomGPTId,
        mcpToolInteractions: Math.random() > 0.5 ? [
          {
            toolName: 'redtail-crm',
            action: 'fetch_client_data',
            data: { query: content },
            timestamp: new Date().toISOString(),
            success: true
          }
        ] : undefined
      };

      setMessages(prev => [...prev, aiMessage]);
      setThreads(prev => prev.map(t => 
        t.id === selectedThreadId 
          ? { 
              ...t, 
              messageCount: t.messageCount + 1,
              lastMessage: aiMessage.content.substring(0, 100) + (aiMessage.content.length > 100 ? '...' : ''),
              updatedAt: new Date().toISOString() 
            }
          : t
      ));
    }, 1500);
  };

  // CustomGPT management
  const handleCreateCustomGPT = () => {
    setCustomGPTModalMode('create');
    setEditingCustomGPT(undefined);
    setCustomGPTModalOpen(true);
  };

  const handleEditCustomGPT = (customGPT: CustomGPT) => {
    setCustomGPTModalMode('edit');
    setEditingCustomGPT(customGPT);
    setCustomGPTModalOpen(true);
  };

  const handleSaveCustomGPT = (customGPT: CustomGPT) => {
    if (customGPTModalMode === 'create') {
      setCustomGPTs(prev => [...prev, customGPT]);
      setSelectedCustomGPTId(customGPT.id);
    } else {
      setCustomGPTs(prev => prev.map(gpt => 
        gpt.id === customGPT.id ? customGPT : gpt
      ));
    }
  };

  // Mock AI response generator
  const generateMockAIResponse = (userMessage: string, customGPTId: string): string => {
    const customGPT = customGPTs.find(gpt => gpt.id === customGPTId);
    const responses = {
      crm: "I've accessed the client's profile from Redtail CRM. Based on their interaction history, I can see they last contacted us on...",
      portfolio: "I've analyzed the portfolio data from Albridge. The current allocation shows... I recommend the following adjustments:",
      compliance: "I've reviewed this request for SEC compliance. All recommendations align with regulatory requirements. Documentation has been updated in the audit trail.",
      general: "Based on my comprehensive analysis incorporating both CRM data and portfolio information, here's my recommendation...",
      retirement: "For retirement planning, I've calculated the optimal contribution strategy based on current tax brackets and projected retirement needs...",
      tax: "From a tax efficiency perspective, I recommend the following strategies to minimize your tax liability while maximizing long-term growth..."
    };

    return responses[customGPT?.specialization || 'general'] || "I understand your request. Let me analyze this information and provide you with a comprehensive response...";
  };

  return (
    <div className="flex h-screen bg-background">
      {/* Left Sidebar - Threads */}
      <div className="w-80 border-r">
        <ThreadSidebar
          threads={threads}
          customGPTs={customGPTs}
          selectedThreadId={selectedThreadId}
          onThreadSelect={handleThreadSelect}
          onNewThread={handleNewThread}
          onEditThread={handleEditThread}
          onArchiveThread={handleArchiveThread}
          onDeleteThread={handleDeleteThread}
        />
      </div>

      {/* Main Chat Area */}
      <div className="flex-1 flex flex-col">
        {/* Chat Header */}
        <div className="border-b p-4 bg-card">
          <div className="flex items-center justify-between">
            <h1 className="text-xl font-semibold">SecureChat AI</h1>
            <div className="flex items-center gap-2">
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <Button variant="outline" size="sm">
                    <Settings className="w-4 h-4 mr-2" />
                    Manage CustomGPTs
                  </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end" className="w-48">
                  <DropdownMenuItem onClick={handleCreateCustomGPT}>
                    <Plus className="w-4 h-4 mr-2" />
                    Create New CustomGPT
                  </DropdownMenuItem>
                  <DropdownMenuSeparator />
                  {customGPTs.map(gpt => (
                    <DropdownMenuItem 
                      key={gpt.id}
                      onClick={() => handleEditCustomGPT(gpt)}
                    >
                      <Settings className="w-4 h-4 mr-2" />
                      Edit {gpt.name}
                    </DropdownMenuItem>
                  ))}
                </DropdownMenuContent>
              </DropdownMenu>
            </div>
          </div>
        </div>

        {/* Conversation Window */}
        <ConversationWindow
          thread={currentThread}
          messages={threadMessages}
          customGPTs={customGPTs}
          selectedCustomGPTId={selectedCustomGPTId}
          onCustomGPTChange={setSelectedCustomGPTId}
          onSendMessage={handleSendMessage}
        />
      </div>

      {/* CustomGPT Management Modal */}
      <CustomGPTModal
        open={customGPTModalOpen}
        onOpenChange={setCustomGPTModalOpen}
        mode={customGPTModalMode}
        customGPT={editingCustomGPT}
        onSave={handleSaveCustomGPT}
      />
    </div>
  );
}


================================================
FILE: src/pages/ClientIntegration.tsx
================================================
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  Users, 
  TrendingUp, 
  Database, 
  Clock, 
  CheckCircle, 
  AlertCircle,
  ExternalLink,
  Cable,
  Shield,
  Zap
} from 'lucide-react';
import { ComplianceStatus } from '@/components/ComplianceStatus';

export default function ClientIntegration() {
  return (
    <div className="min-h-screen bg-gradient-subtle">
      {/* Header */}
      <div className="border-b border-border bg-card">
        <div className="container mx-auto px-6 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-foreground">
                Client Integration Hub
              </h1>
              <p className="text-muted-foreground mt-1">
                CRM and Portfolio Management Integration Center
              </p>
            </div>
            <div className="flex items-center gap-3">
              <ComplianceStatus status="pending" />
              <Badge variant="secondary" className="font-mono">
                <Clock className="w-3 h-3 mr-1" />
                Under Development
              </Badge>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-6 py-8 space-y-8">
        {/* Construction Notice */}
        <Card className="border-warning/20 bg-warning-light/10">
          <CardHeader>
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 rounded-lg bg-warning-light flex items-center justify-center">
                <AlertCircle className="w-6 h-6 text-warning" />
              </div>
              <div>
                <CardTitle className="text-warning">Integration Hub Under Construction</CardTitle>
                <CardDescription>
                  We're building comprehensive MCP (Model Context Protocol) integrations for seamless CRM and portfolio management.
                </CardDescription>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="p-4 rounded-lg bg-card border">
                  <div className="flex items-center gap-2 mb-2">
                    <Clock className="w-4 h-4 text-primary" />
                    <span className="font-medium">Estimated Timeline</span>
                  </div>
                  <p className="text-sm text-muted-foreground">Q1 2026 - Full Integration Launch</p>
                </div>
                
                <div className="p-4 rounded-lg bg-card border">
                  <div className="flex items-center gap-2 mb-2">
                    <Users className="w-4 h-4 text-primary" />
                    <span className="font-medium">Beta Access</span>
                  </div>
                  <p className="text-sm text-muted-foreground">Contact your account manager</p>
                </div>
                
                <div className="p-4 rounded-lg bg-card border">
                  <div className="flex items-center gap-2 mb-2">
                    <Shield className="w-4 h-4 text-primary" />
                    <span className="font-medium">SEC Compliance</span>
                  </div>
                  <p className="text-sm text-muted-foreground">All integrations will be fully compliant</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Planned Integrations */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Redtail CRM Integration */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center">
                    <Users className="w-5 h-5 text-primary" />
                  </div>
                  <div>
                    <CardTitle>Redtail CRM Integration</CardTitle>
                    <CardDescription>Client relationship management and data synchronization</CardDescription>
                  </div>
                </div>
                <Badge variant="secondary">
                  <Cable className="w-3 h-3 mr-1" />
                  MCP Ready
                </Badge>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <h4 className="font-medium text-sm">Planned Features:</h4>
                <ul className="space-y-2 text-sm text-muted-foreground">
                  <li className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-success" />
                    Real-time client profile synchronization
                  </li>
                  <li className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-success" />
                    Automated meeting note integration
                  </li>
                  <li className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-success" />
                    Activity logging and follow-up scheduling
                  </li>
                  <li className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-success" />
                    SEC-compliant communication tracking
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Advanced workflow automation
                  </li>
                </ul>
              </div>
              
              <div className="pt-4 border-t">
                <Button variant="outline" className="w-full" disabled>
                  <ExternalLink className="w-4 h-4 mr-2" />
                  Connect to Redtail (Coming Soon)
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Albridge Portfolio Integration */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 rounded-lg bg-success/10 flex items-center justify-center">
                    <TrendingUp className="w-5 h-5 text-success" />
                  </div>
                  <div>
                    <CardTitle>Albridge Portfolio Integration</CardTitle>
                    <CardDescription>Portfolio analysis and performance monitoring</CardDescription>
                  </div>
                </div>
                <Badge variant="secondary">
                  <Cable className="w-3 h-3 mr-1" />
                  MCP Ready
                </Badge>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <h4 className="font-medium text-sm">Planned Features:</h4>
                <ul className="space-y-2 text-sm text-muted-foreground">
                  <li className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-success" />
                    Live portfolio data and performance metrics
                  </li>
                  <li className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-success" />
                    AI-powered investment analysis
                  </li>
                  <li className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-success" />
                    Risk assessment and rebalancing recommendations
                  </li>
                  <li className="flex items-center gap-2">
                    <CheckCircle className="w-4 h-4 text-success" />
                    Tax-loss harvesting opportunities
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Custom reporting and alerts
                  </li>
                </ul>
              </div>
              
              <div className="pt-4 border-t">
                <Button variant="outline" className="w-full" disabled>
                  <ExternalLink className="w-4 h-4 mr-2" />
                  Connect to Albridge (Coming Soon)
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Black Diamond Future Integration */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-lg bg-neutral/10 flex items-center justify-center">
                  <Database className="w-5 h-5 text-neutral" />
                </div>
                <div>
                  <CardTitle>Black Diamond Integration</CardTitle>
                  <CardDescription>Advanced portfolio management and reporting platform</CardDescription>
                </div>
              </div>
              <Badge variant="outline">
                <Clock className="w-3 h-3 mr-1" />
                Future Phase
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-3">
                <h4 className="font-medium text-sm">Advanced Capabilities:</h4>
                <ul className="space-y-2 text-sm text-muted-foreground">
                  <li className="flex items-center gap-2">
                    <AlertCircle className="w-4 h-4 text-warning" />
                    Comprehensive portfolio management
                  </li>
                  <li className="flex items-center gap-2">
                    <AlertCircle className="w-4 h-4 text-warning" />
                    Advanced performance attribution
                  </li>
                  <li className="flex items-center gap-2">
                    <AlertCircle className="w-4 h-4 text-warning" />
                    Multi-custodial account aggregation
                  </li>
                  <li className="flex items-center gap-2">
                    <AlertCircle className="w-4 h-4 text-warning" />
                    Institutional-grade reporting
                  </li>
                </ul>
              </div>
              
              <div className="p-4 rounded-lg bg-accent/30 border-2 border-dashed border-accent">
                <div className="text-center space-y-2">
                  <Zap className="w-8 h-8 mx-auto text-primary" />
                  <h4 className="font-medium">Coming in 2026</h4>
                  <p className="text-sm text-muted-foreground">
                    Enhanced integration capabilities planned for the next phase of development.
                  </p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* MCP Technology Overview */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Cable className="w-5 h-5" />
              Model Context Protocol (MCP) Technology
            </CardTitle>
            <CardDescription>
              Secure, compliant, and seamless integration framework
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center space-y-2">
                <div className="w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mx-auto">
                  <Shield className="w-6 h-6 text-primary" />
                </div>
                <h4 className="font-medium">SEC Compliant</h4>
                <p className="text-sm text-muted-foreground">
                  All integrations maintain strict regulatory compliance with complete audit trails.
                </p>
              </div>
              
              <div className="text-center space-y-2">
                <div className="w-12 h-12 rounded-lg bg-success/10 flex items-center justify-center mx-auto">
                  <Zap className="w-6 h-6 text-success" />
                </div>
                <h4 className="font-medium">Real-Time</h4>
                <p className="text-sm text-muted-foreground">
                  Live data synchronization for up-to-date client and portfolio information.
                </p>
              </div>
              
              <div className="text-center space-y-2">
                <div className="w-12 h-12 rounded-lg bg-warning/10 flex items-center justify-center mx-auto">
                  <Cable className="w-6 h-6 text-warning" />
                </div>
                <h4 className="font-medium">Seamless</h4>
                <p className="text-sm text-muted-foreground">
                  Unified experience across all platforms with intelligent context sharing.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Contact Information */}
        <Card className="border-primary/20 bg-primary/5">
          <CardHeader>
            <CardTitle>Stay Updated</CardTitle>
            <CardDescription>
              Get notified when integration features become available
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex items-center justify-between">
              <div className="space-y-1">
                <p className="text-sm font-medium">Ready to get started?</p>
                <p className="text-sm text-muted-foreground">
                  Contact your account manager to join the beta testing program and be among the first to experience these powerful integrations.
                </p>
              </div>
              <Button className="bg-primary hover:bg-primary/90">
                <ExternalLink className="w-4 h-4 mr-2" />
                Contact Sales
              </Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


================================================
FILE: src/pages/Dashboard.tsx
================================================
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  FileText, 
  Clock, 
  CheckCircle, 
  AlertTriangle, 
  Upload,
  TrendingUp,
  Users,
  Shield
} from "lucide-react";
import { ComplianceStatus } from "@/components/ComplianceStatus";
import { FinancialMetric } from "@/components/FinancialMetric";
import { mockTodayStats, mockRecentMeetings, mockComplianceDashboard } from "@/data/mockData";

export default function Dashboard() {
  const { pending_reviews, audit_metrics, security_status } = mockComplianceDashboard;

  return (
    <div className="min-h-screen bg-gradient-subtle">
      {/* Header */}
      <div className="border-b border-border bg-card">
        <div className="container mx-auto px-6 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-foreground">
                SEC Compliance Dashboard
              </h1>
              <p className="text-muted-foreground mt-1">
                AI Financial Assistant for Wealth Management
              </p>
            </div>
            <div className="flex items-center gap-3">
              <ComplianceStatus status="secure" />
              <Button variant="trust" size="lg">
                <Upload className="w-4 h-4" />
                Process New Notes
              </Button>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-6 py-8 space-y-8">
        {/* Key Metrics */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
          <Card className="border-success/20 bg-success-light/50">
            <CardHeader className="pb-3">
              <CardTitle className="text-success flex items-center gap-2">
                <CheckCircle className="w-5 h-5" />
                Today's Approved
              </CardTitle>
            </CardHeader>
            <CardContent>
              <FinancialMetric 
                label="Notes Processed"
                value={mockTodayStats.approved_notes}
                trend="up"
                change={12}
                size="lg"
              />
            </CardContent>
          </Card>

          <Card className="border-warning/20 bg-warning-light/50">
            <CardHeader className="pb-3">
              <CardTitle className="text-warning flex items-center gap-2">
                <Clock className="w-5 h-5" />
                Pending Review
              </CardTitle>
            </CardHeader>
            <CardContent>
              <FinancialMetric 
                label="Items in Queue"
                value={mockTodayStats.pending_reviews}
                trend="neutral"
                size="lg"
              />
            </CardContent>
          </Card>

          <Card className="border-primary/20">
            <CardHeader className="pb-3">
              <CardTitle className="text-primary flex items-center gap-2">
                <TrendingUp className="w-5 h-5" />
                AI Confidence
              </CardTitle>
            </CardHeader>
            <CardContent>
              <FinancialMetric 
                label="Average Score"
                value={mockTodayStats.avg_confidence}
                format="percentage"
                trend="up"
                change={3}
                size="lg"
              />
            </CardContent>
          </Card>

          <Card className="border-primary/20">
            <CardHeader className="pb-3">
              <CardTitle className="text-primary flex items-center gap-2">
                <Shield className="w-5 h-5" />
                Compliance Rate
              </CardTitle>
            </CardHeader>
            <CardContent>
              <FinancialMetric 
                label="SEC Standards"
                value={mockTodayStats.compliance_rate}
                format="percentage"
                trend="neutral"
                size="lg"
              />
            </CardContent>
          </Card>
        </div>

        {/* Recent Meetings & Pending Reviews */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Recent Meetings */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="w-5 h-5" />
                Recent Meeting Notes
              </CardTitle>
              <CardDescription>
                Latest processed client meetings with AI analysis
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {mockRecentMeetings.slice(0, 4).map((meeting) => (
                <div key={meeting.id} className="flex items-center justify-between p-3 border rounded-lg data-row-hover">
                  <div className="space-y-1">
                    <div className="flex items-center gap-3">
                      <h4 className="font-medium text-sm">{meeting.client_name}</h4>
                      <ComplianceStatus 
                        status={meeting.status as any} 
                        size="sm"
                      />
                    </div>
                    <div className="flex items-center gap-4 text-xs text-muted-foreground">
                      <span>{meeting.type}</span>
                      <span>•</span>
                      <span>{meeting.date}</span>
                      <span>•</span>
                      <span>{meeting.duration}</span>
                    </div>
                  </div>
                  <div className="text-right space-y-1">
                    <Badge variant="secondary" className="font-mono text-xs">
                      {meeting.ai_confidence}% AI
                    </Badge>
                    <p className="text-xs text-muted-foreground">{meeting.advisor}</p>
                  </div>
                </div>
              ))}
              <div className="pt-2">
                <Button variant="outline" className="w-full">
                  View All Meetings
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Compliance Queue */}
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <AlertTriangle className="w-5 h-5" />
                Compliance Review Queue
              </CardTitle>
              <CardDescription>
                Items requiring human review and approval
              </CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              {pending_reviews.map((review) => (
                <div key={review.id} className="flex items-center justify-between p-3 border rounded-lg data-row-hover">
                  <div className="space-y-1">
                    <div className="flex items-center gap-3">
                      <h4 className="font-medium text-sm">{review.client_name}</h4>
                      {review.requires_attention && (
                        <Badge variant="destructive" className="text-xs">
                          High Priority
                        </Badge>
                      )}
                    </div>
                    <div className="flex items-center gap-4 text-xs text-muted-foreground">
                      <span>Meeting: {review.meeting_date}</span>
                      <span>•</span>
                      <span>AI: {review.ai_confidence}%</span>
                      {review.regulatory_flags > 0 && (
                        <>
                          <span>•</span>
                          <span className="text-warning">{review.regulatory_flags} flags</span>
                        </>
                      )}
                    </div>
                  </div>
                  <Button variant="compliance" size="sm">
                    Review
                  </Button>
                </div>
              ))}
              <div className="pt-2">
                <Button variant="trust" className="w-full">
                  Open Review Queue
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Security & System Status */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Shield className="w-5 h-5" />
              Security & System Status
            </CardTitle>
            <CardDescription>
              Real-time security monitoring and compliance verification
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="space-y-3">
                <h4 className="font-medium text-sm">Data Security</h4>
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span>Encryption Status</span>
                    <ComplianceStatus status="secure" size="sm">
                      {security_status.encryption_status}
                    </ComplianceStatus>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span>Access Violations</span>
                    <Badge variant="secondary" className="font-mono">
                      {security_status.access_violations}
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span>Audit Trail</span>
                    <ComplianceStatus status="secure" size="sm">
                      {security_status.audit_trail_integrity}
                    </ComplianceStatus>
                  </div>
                </div>
              </div>

              <div className="space-y-3">
                <h4 className="font-medium text-sm">Processing Metrics</h4>
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span>Notes Today</span>
                    <Badge variant="secondary" className="font-mono">
                      {audit_metrics.notes_processed_today}
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span>Avg Review Time</span>
                    <Badge variant="secondary" className="font-mono">
                      {audit_metrics.human_review_time_avg}
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span>SEC Compliance</span>
                    <ComplianceStatus status="approved" size="sm">
                      {audit_metrics.sec_compliance_rate}
                    </ComplianceStatus>
                  </div>
                </div>
              </div>

              <div className="space-y-3">
                <h4 className="font-medium text-sm">Integration Status</h4>
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span>Redtail CRM</span>
                    <ComplianceStatus status="secure" size="sm">
                      Connected
                    </ComplianceStatus>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span>Albridge Portfolio</span>
                    <ComplianceStatus status="secure" size="sm">
                      Active
                    </ComplianceStatus>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span>Black Diamond</span>
                    <ComplianceStatus status="pending" size="sm">
                      Planning
                    </ComplianceStatus>
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


================================================
FILE: src/pages/FillTemplates.tsx
================================================
import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  File, 
  FileText,
  Download,
  Clock,
  CheckCircle,
  Upload,
  Users,
  TrendingUp,
  Shield,
  Plus
} from 'lucide-react';
import { ComplianceStatus } from '@/components/ComplianceStatus';
import { TemplateCompletionModal } from '@/components/TemplateCompletionModal';

export default function FillTemplates() {
  const [modalOpen, setModalOpen] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState<{name: string; category: string} | null>(null);
  const templateCategories = [
    {
      id: 'meeting_notes',
      name: 'Meeting Notes',
      icon: Users,
      color: 'blue',
      templates: [
        { name: 'Quarterly Review Template', status: 'active', uses: 142 },
        { name: 'Annual Planning Template', status: 'active', uses: 89 },
        { name: 'Initial Client Meeting', status: 'active', uses: 56 },
        { name: 'Risk Assessment Review', status: 'draft', uses: 12 }
      ]
    },
    {
      id: 'investment_docs',
      name: 'Investment Documentation',
      icon: TrendingUp,
      color: 'green',
      templates: [
        { name: 'Investment Policy Statement', status: 'active', uses: 78 },
        { name: 'Portfolio Rebalancing Report', status: 'active', uses: 134 },
        { name: 'Risk Tolerance Questionnaire', status: 'active', uses: 67 },
        { name: 'Investment Recommendation Form', status: 'review', uses: 23 }
      ]
    },
    {
      id: 'compliance_forms',
      name: 'Compliance Forms',
      icon: Shield,
      color: 'red',
      templates: [
        { name: 'SEC Compliance Checklist', status: 'active', uses: 89 },
        { name: 'Client Suitability Assessment', status: 'active', uses: 156 },
        { name: 'Trade Authorization Form', status: 'active', uses: 234 },
        { name: 'Regulatory Filing Template', status: 'active', uses: 45 }
      ]
    }
  ];

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'active': return 'success';
      case 'review': return 'warning';
      case 'draft': return 'secondary';
      default: return 'secondary';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'active': return 'Active';
      case 'review': return 'In Review';
      case 'draft': return 'Draft';
      default: return 'Unknown';
    }
  };

  const handleFillTemplate = (templateName: string, categoryName: string) => {
    setSelectedTemplate({ name: templateName, category: categoryName });
    setModalOpen(true);
  };

  return (
    <div className="min-h-screen bg-gradient-subtle">
      {/* Header */}
      <div className="border-b border-border bg-card">
        <div className="container mx-auto px-6 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-foreground">
                Fill Templates
              </h1>
              <p className="text-muted-foreground mt-1">
                Pre-built SEC-compliant document templates for efficient workflow
              </p>
            </div>
            <div className="flex items-center gap-3">
              <ComplianceStatus status="secure" />
              <Button className="bg-primary hover:bg-primary/90">
                <Plus className="w-4 h-4 mr-2" />
                Create Template
              </Button>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-6 py-8 space-y-8">
        {/* Quick Stats */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center">
                  <File className="w-5 h-5 text-primary" />
                </div>
                <div>
                  <p className="text-2xl font-bold">16</p>
                  <p className="text-sm text-muted-foreground">Active Templates</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-4">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-lg bg-success/10 flex items-center justify-center">
                  <CheckCircle className="w-5 h-5 text-success" />
                </div>
                <div>
                  <p className="text-2xl font-bold">1,247</p>
                  <p className="text-sm text-muted-foreground">Documents Created</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-4">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-lg bg-warning/10 flex items-center justify-center">
                  <Clock className="w-5 h-5 text-warning" />
                </div>
                <div>
                  <p className="text-2xl font-bold">4</p>
                  <p className="text-sm text-muted-foreground">Pending Review</p>
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-4">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-lg bg-neutral/10 flex items-center justify-center">
                  <Shield className="w-5 h-5 text-neutral" />
                </div>
                <div>
                  <p className="text-2xl font-bold">100%</p>
                  <p className="text-sm text-muted-foreground">SEC Compliant</p>
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Template Categories */}
        <div className="space-y-8">
          {templateCategories.map((category) => {
            const Icon = category.icon;
            return (
              <Card key={category.id}>
                <CardHeader>
                  <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                      <div className={`w-10 h-10 rounded-lg bg-${category.color}-100 flex items-center justify-center`}>
                        <Icon className={`w-5 h-5 text-${category.color}-600`} />
                      </div>
                      <div>
                        <CardTitle>{category.name}</CardTitle>
                        <CardDescription>
                          {category.templates.length} templates available
                        </CardDescription>
                      </div>
                    </div>
                    <Button variant="outline" size="sm">
                      <Plus className="w-4 h-4 mr-2" />
                      Add Template
                    </Button>
                  </div>
                </CardHeader>
                <CardContent>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    {category.templates.map((template, index) => (
                      <Card key={index} className="hover:shadow-md transition-shadow">
                        <CardContent className="p-4">
                          <div className="flex items-start justify-between gap-3">
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-2">
                                <FileText className="w-4 h-4 text-muted-foreground" />
                                <h4 className="font-medium text-sm">{template.name}</h4>
                              </div>
                              <div className="flex items-center gap-3 text-xs text-muted-foreground mb-3">
                                <Badge 
                                  variant={getStatusColor(template.status) as any}
                                  className="text-xs"
                                >
                                  {getStatusText(template.status)}
                                </Badge>
                                <span>{template.uses} uses</span>
                              </div>
                              <div className="flex gap-2">
                                <Button 
                                  size="sm" 
                                  variant="outline" 
                                  className="h-8 text-xs"
                                  onClick={() => handleFillTemplate(template.name, category.name)}
                                >
                                  <Upload className="w-3 h-3 mr-1" />
                                  Fill
                                </Button>
                                <Button size="sm" variant="ghost" className="h-8 text-xs">
                                  <Download className="w-3 h-3 mr-1" />
                                  Download
                                </Button>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>
                    ))}
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </div>

        {/* Recent Activity */}
        <Card>
          <CardHeader>
            <CardTitle>Recent Template Activity</CardTitle>
            <CardDescription>
              Latest document creation and template usage
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {[
                { template: 'Quarterly Review Template', client: 'Robert J. Smith', time: '2 hours ago', status: 'completed' },
                { template: 'Investment Policy Statement', client: 'Maria Gonzalez', time: '4 hours ago', status: 'completed' },
                { template: 'SEC Compliance Checklist', client: 'System Review', time: '6 hours ago', status: 'completed' },
                { template: 'Risk Assessment Review', client: 'James Chen', time: '1 day ago', status: 'pending' },
              ].map((activity, index) => (
                <div key={index} className="flex items-center justify-between p-3 border rounded-lg data-row-hover">
                  <div className="space-y-1">
                    <h4 className="font-medium text-sm">{activity.template}</h4>
                    <div className="flex items-center gap-4 text-xs text-muted-foreground">
                      <span>Client: {activity.client}</span>
                      <span>•</span>
                      <span>{activity.time}</span>
                    </div>
                  </div>
                  <ComplianceStatus 
                    status={activity.status === 'completed' ? 'approved' : 'pending'} 
                    size="sm"
                  />
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Template Completion Modal */}
        <TemplateCompletionModal 
          open={modalOpen}
          onOpenChange={setModalOpen}
          template={selectedTemplate}
        />
      </div>
    </div>
  );
}


================================================
FILE: src/pages/FlaggedItems.tsx
================================================
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { ComplianceStatus } from "@/components/ComplianceStatus";
import { mockFlaggedItems } from "@/data/mockData";
import { 
  Flag,
  AlertTriangle, 
  Clock, 
  Eye, 
  CheckCircle,
  XCircle,
  User,
  Calendar,
  TrendingUp,
  ArrowUp,
  ArrowLeft,
  MessageSquare
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Link } from "react-router-dom";

export default function FlaggedItems() {
  const [selectedFilter, setSelectedFilter] = useState<string>("all");
  const { toast } = useToast();
  
  const handleResolve = (itemId: string, clientName: string) => {
    toast({
      title: "Item Resolved",
      description: `${clientName} flagged item has been resolved and approved.`,
    });
  };

  const handleEscalate = (itemId: string, clientName: string) => {
    toast({
      title: "Item Escalated",
      description: `${clientName} flagged item has been escalated to supervisor.`,
      variant: "destructive",
    });
  };

  const getPriorityBadge = (priority: string) => {
    return priority === "high" ? (
      <Badge variant="destructive" className="gap-1">
        <AlertTriangle className="w-3 h-3" />
        High Priority
      </Badge>
    ) : (
      <Badge variant="secondary" className="gap-1">
        <Clock className="w-3 h-3" />
        Normal
      </Badge>
    );
  };

  const getResolutionStatusBadge = (status: string) => {
    switch (status) {
      case "pending":
        return <Badge variant="secondary" className="gap-1"><Clock className="w-3 h-3" />Pending</Badge>;
      case "in_progress":
        return <Badge variant="outline" className="gap-1"><TrendingUp className="w-3 h-3" />In Progress</Badge>;
      case "resolved":
        return <Badge variant="default" className="gap-1"><CheckCircle className="w-3 h-3" />Resolved</Badge>;
      default:
        return <Badge variant="secondary">{status}</Badge>;
    }
  };

  const getEscalationBadge = (level: string) => {
    switch (level) {
      case "supervisor":
        return <Badge variant="outline" className="gap-1"><ArrowUp className="w-3 h-3" />Supervisor</Badge>;
      case "compliance_officer":
        return <Badge variant="destructive" className="gap-1"><ArrowUp className="w-3 h-3" />Compliance Officer</Badge>;
      default:
        return <Badge variant="secondary">{level}</Badge>;
    }
  };

  const filteredItems = mockFlaggedItems.filter(item => {
    if (selectedFilter === "all") return true;
    return item.resolution_status === selectedFilter;
  });

  return (
    <div className="flex-1 space-y-6 p-6">
      <div className="flex items-center gap-4">
        <Link to="/review">
          <Button variant="ghost" size="sm" className="gap-2">
            <ArrowLeft className="w-4 h-4" />
            Back to Review Queue
          </Button>
        </Link>
      </div>

      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Flagged Items</h1>
          <p className="text-muted-foreground">
            Review and resolve items requiring additional compliance attention
          </p>
        </div>
        
        <div className="flex items-center gap-4">
          <div className="text-right">
            <div className="text-sm font-medium">
              {filteredItems.length} Flagged Items
            </div>
            <div className="text-xs text-muted-foreground">
              Avg Resolution Time: 2.5 days
            </div>
          </div>
          <ComplianceStatus status="flagged" />
        </div>
      </div>

      <div className="flex items-center gap-4">
        <Select value={selectedFilter} onValueChange={setSelectedFilter}>
          <SelectTrigger className="w-48">
            <SelectValue placeholder="Filter by status" />
          </SelectTrigger>
          <SelectContent>
            <SelectItem value="all">All Items</SelectItem>
            <SelectItem value="pending">Pending</SelectItem>
            <SelectItem value="in_progress">In Progress</SelectItem>
            <SelectItem value="resolved">Resolved</SelectItem>
          </SelectContent>
        </Select>
      </div>

      <div className="space-y-4">
        {filteredItems.map((item) => (
          <Card key={item.id} className="border-l-4 border-l-destructive">
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <div className="space-y-1">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <User className="w-5 h-5" />
                    {item.client_name}
                  </CardTitle>
                  <CardDescription className="flex items-center gap-4">
                    <span className="flex items-center gap-1">
                      <Calendar className="w-4 h-4" />
                      Meeting: {new Date(item.meeting_date).toLocaleDateString()}
                    </span>
                    <span className="flex items-center gap-1">
                      <Flag className="w-4 h-4" />
                      Flagged: {new Date(item.flagged_date).toLocaleDateString()}
                    </span>
                  </CardDescription>
                </div>
                
                <div className="flex items-center gap-2">
                  {getPriorityBadge(item.priority)}
                  {getResolutionStatusBadge(item.resolution_status)}
                </div>
              </div>
            </CardHeader>

            <CardContent className="space-y-4">
              <div className="flex items-start gap-3 p-3 bg-destructive/10 border border-destructive/20 rounded-lg">
                <Flag className="w-5 h-5 text-destructive flex-shrink-0 mt-0.5" />
                <div className="flex-1">
                  <div className="flex items-center justify-between mb-1">
                    <p className="font-medium text-destructive">{item.flag_category}</p>
                    {getEscalationBadge(item.escalation_level)}
                  </div>
                  <p className="text-sm text-muted-foreground">{item.flag_reason}</p>
                  <p className="text-xs text-muted-foreground mt-1">
                    Flagged by: {item.flagged_by} • Est. Resolution: {item.estimated_resolution_time}
                  </p>
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <h4 className="font-medium">Flag Details</h4>
                  <div className="space-y-1 text-sm text-muted-foreground">
                    <div>Category: {item.flag_category}</div>
                    <div>AI Confidence: {item.ai_confidence}%</div>
                    <div>Escalation Level: {item.escalation_level.replace('_', ' ')}</div>
                  </div>
                </div>

                <div className="space-y-2">
                  <h4 className="font-medium">Resolution Timeline</h4>
                  <div className="space-y-1 text-sm text-muted-foreground">
                    <div>Status: {item.resolution_status.replace('_', ' ')}</div>
                    <div>Est. Time: {item.estimated_resolution_time}</div>
                    <div>Created: {new Date(item.created).toLocaleDateString()}</div>
                  </div>
                </div>

                <div className="space-y-2">
                  <h4 className="font-medium">Review Information</h4>
                  <div className="space-y-1 text-sm text-muted-foreground">
                    <div>Flagged By: {item.flagged_by}</div>
                    <div>Meeting Type: Quarterly Review</div>
                    <div>Priority: {item.priority}</div>
                  </div>
                </div>
              </div>

              <Separator />

              <div className="flex items-center justify-between">
                <Button variant="outline" className="gap-2">
                  <Eye className="w-4 h-4" />
                  View Details
                </Button>

                <div className="flex items-center gap-2">
                  <Button 
                    variant="outline" 
                    className="gap-2"
                    onClick={() => handleEscalate(item.id, item.client_name)}
                  >
                    <ArrowUp className="w-4 h-4" />
                    Escalate
                  </Button>
                  
                  <Button 
                    variant="outline" 
                    className="gap-2"
                  >
                    <MessageSquare className="w-4 h-4" />
                    Add Note
                  </Button>
                  
                  <Button 
                    className="gap-2"
                    onClick={() => handleResolve(item.id, item.client_name)}
                  >
                    <CheckCircle className="w-4 h-4" />
                    Resolve & Approve
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {filteredItems.length === 0 && (
        <Card>
          <CardContent className="flex items-center justify-center py-12">
            <div className="text-center space-y-3">
              <CheckCircle className="w-12 h-12 text-success mx-auto" />
              <h3 className="text-lg font-medium">No Flagged Items</h3>
              <p className="text-muted-foreground">
                {selectedFilter === "all" 
                  ? "All items are currently in compliance" 
                  : `No items with status: ${selectedFilter}`}
              </p>
            </div>
          </CardContent>
        </Card>
      )}
    </div>
  );
}


================================================
FILE: src/pages/Index.tsx
================================================
// Update this page (the content is just a fallback if you fail to update the page)

const Index = () => {
  return (
    <div className="flex min-h-screen items-center justify-center bg-background">
      <div className="text-center">
        <h1 className="mb-4 text-4xl font-bold">Welcome to Your Blank App</h1>
        <p className="text-xl text-muted-foreground">Start building your amazing project here!</p>
      </div>
    </div>
  );
};

export default Index;



================================================
FILE: src/pages/Login.tsx
================================================
import { useState } from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Loader2, Building2, Shield, Lock } from 'lucide-react';

const Login = () => {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const { login, isAuthenticated, isLoading } = useAuth();
  const location = useLocation();

  const from = location.state?.from?.pathname || '/';

  if (isAuthenticated) {
    return <Navigate to={from} replace />;
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    try {
      await login(email, password);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Login failed');
    }
  };

  const handleDemoLogin = (userType: string) => {
    switch (userType) {
      case 'advisor':
        setEmail('sarah.johnson@wealthfirm.com');
        break;
      case 'compliance':
        setEmail('jennifer.walsh@wealthfirm.com');
        break;
      case 'admin':
        setEmail('michael.chen@wealthfirm.com');
        break;
    }
    setPassword('demo123');
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 to-secondary/5 p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <div className="flex items-center justify-center mb-4">
            <div className="bg-primary/10 p-3 rounded-full">
              <Building2 className="h-8 w-8 text-primary" />
            </div>
          </div>
          <CardTitle className="text-2xl">Wealth Management Portal</CardTitle>
          <CardDescription>
            Sign in with your Microsoft account to access the SEC-compliant AI Financial Assistant
          </CardDescription>
        </CardHeader>
        
        <CardContent className="space-y-4">
          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}

          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                placeholder="Enter your work email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                required
                disabled={isLoading}
              />
            </div>

            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                placeholder="Enter your password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                required
                disabled={isLoading}
              />
            </div>

            <Button 
              type="submit" 
              className="w-full" 
              disabled={isLoading}
            >
              {isLoading ? (
                <>
                  <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                  Signing in...
                </>
              ) : (
                <>
                  <Lock className="mr-2 h-4 w-4" />
                  Sign in with Microsoft
                </>
              )}
            </Button>
          </form>

          <div className="relative">
            <div className="absolute inset-0 flex items-center">
              <span className="w-full border-t" />
            </div>
            <div className="relative flex justify-center text-xs uppercase">
              <span className="bg-background px-2 text-muted-foreground">
                Demo Accounts
              </span>
            </div>
          </div>

          <div className="grid grid-cols-1 gap-2">
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleDemoLogin('advisor')}
              disabled={isLoading}
            >
              Financial Advisor
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleDemoLogin('compliance')}
              disabled={isLoading}
            >
              Compliance Officer
            </Button>
            <Button
              variant="outline"
              size="sm"
              onClick={() => handleDemoLogin('admin')}
              disabled={isLoading}
            >
              Administrator
            </Button>
          </div>

          <div className="flex items-center justify-center space-x-1 text-xs text-muted-foreground">
            <Shield className="h-3 w-3" />
            <span>SEC compliant • End-to-end encrypted</span>
          </div>

          <p className="text-xs text-muted-foreground text-center">
            Demo password for all accounts: <code className="bg-muted px-1 rounded">demo123</code>
          </p>
        </CardContent>
      </Card>
    </div>
  );
};

export default Login;


================================================
FILE: src/pages/NotFound.tsx
================================================
import { useLocation } from "react-router-dom";
import { useEffect } from "react";
import { Button } from "@/components/ui/button";

const NotFound = () => {
  const location = useLocation();

  useEffect(() => {
    console.error("404 Error: User attempted to access non-existent route:", location.pathname);
  }, [location.pathname]);

  return (
    <div className="flex min-h-[calc(100vh-3.5rem)] items-center justify-center bg-gradient-subtle">
      <div className="text-center space-y-6">
        <div className="space-y-2">
          <h1 className="text-4xl font-bold text-foreground">404</h1>
          <p className="text-xl text-muted-foreground">Page not found</p>
          <p className="text-muted-foreground">The page you're looking for doesn't exist.</p>
        </div>
        <Button variant="trust" size="lg" onClick={() => window.location.href = "/"}>
          Return to Dashboard
        </Button>
      </div>
    </div>
  );
};

export default NotFound;



================================================
FILE: src/pages/PendingReviews.tsx
================================================
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { ComplianceStatus } from "@/components/ComplianceStatus";
import { mockComplianceDashboard, mockMeetingNoteResult } from "@/data/mockData";
import { 
  CheckCircle, 
  AlertTriangle, 
  Clock, 
  Eye, 
  Edit, 
  Flag,
  User,
  Calendar,
  TrendingUp,
  Shield,
  ArrowLeft
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { Link } from "react-router-dom";

export default function PendingReviews() {
  const [selectedReview, setSelectedReview] = useState<string | null>(null);
  const { toast } = useToast();
  
  const handleApprove = (reviewId: string, clientName: string) => {
    toast({
      title: "Review Approved",
      description: `${clientName} meeting notes have been approved and posted to CRM.`,
    });
  };

  const handleFlag = (reviewId: string, clientName: string) => {
    toast({
      title: "Review Flagged", 
      description: `${clientName} meeting notes have been flagged for additional review.`,
      variant: "destructive",
    });
  };

  const getPriorityBadge = (priority: string) => {
    return priority === "high" ? (
      <Badge variant="destructive" className="gap-1">
        <AlertTriangle className="w-3 h-3" />
        High Priority
      </Badge>
    ) : (
      <Badge variant="secondary" className="gap-1">
        <Clock className="w-3 h-3" />
        Normal
      </Badge>
    );
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 90) return "text-success";
    if (confidence >= 80) return "text-warning";
    return "text-destructive";
  };

  return (
    <div className="flex-1 space-y-6 p-6">
      <div className="flex items-center gap-4">
        <Link to="/review">
          <Button variant="ghost" size="sm" className="gap-2">
            <ArrowLeft className="w-4 h-4" />
            Back to Review Queue
          </Button>
        </Link>
      </div>

      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Pending Reviews</h1>
          <p className="text-muted-foreground">
            Review and approve AI-generated meeting notes awaiting compliance verification
          </p>
        </div>
        
        <div className="flex items-center gap-4">
          <div className="text-right">
            <div className="text-sm font-medium">
              {mockComplianceDashboard.pending_reviews.length} Items Pending
            </div>
            <div className="text-xs text-muted-foreground">
              Avg Review Time: {mockComplianceDashboard.audit_metrics.human_review_time_avg}
            </div>
          </div>
          <ComplianceStatus status="pending" />
        </div>
      </div>

      <div className="space-y-4">
        {mockComplianceDashboard.pending_reviews.map((review) => (
          <Card key={review.id} className="border-l-4 border-l-warning">
            <CardHeader className="pb-3">
              <div className="flex items-start justify-between">
                <div className="space-y-1">
                  <CardTitle className="text-lg flex items-center gap-2">
                    <User className="w-5 h-5" />
                    {review.client_name}
                  </CardTitle>
                  <CardDescription className="flex items-center gap-4">
                    <span className="flex items-center gap-1">
                      <Calendar className="w-4 h-4" />
                      {new Date(review.meeting_date).toLocaleDateString()}
                    </span>
                    <span className="flex items-center gap-1">
                      <TrendingUp className="w-4 h-4" />
                      AI Confidence: <span className={getConfidenceColor(review.ai_confidence)}>{review.ai_confidence}%</span>
                    </span>
                  </CardDescription>
                </div>
                
                <div className="flex items-center gap-2">
                  {getPriorityBadge(review.priority)}
                  {review.regulatory_flags > 0 && (
                    <Badge variant="destructive">
                      {review.regulatory_flags} Flag{review.regulatory_flags !== 1 ? 's' : ''}
                    </Badge>
                  )}
                </div>
              </div>
            </CardHeader>

            <CardContent className="space-y-4">
              {review.requires_attention && (
                <div className="flex items-start gap-3 p-3 bg-warning/10 border border-warning/20 rounded-lg">
                  <AlertTriangle className="w-5 h-5 text-warning flex-shrink-0 mt-0.5" />
                  <div>
                    <p className="font-medium text-warning">Requires Attention</p>
                    <p className="text-sm text-muted-foreground">{review.flag_reason}</p>
                  </div>
                </div>
              )}

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <h4 className="font-medium flex items-center gap-2">
                    <Shield className="w-4 h-4" />
                    Compliance Verification
                  </h4>
                  <div className="space-y-1 text-sm">
                    <div className="flex items-center justify-between">
                      <span>SEC Requirements</span>
                      <CheckCircle className="w-4 h-4 text-success" />
                    </div>
                    <div className="flex items-center justify-between">
                      <span>Fiduciary Standard</span>
                      <CheckCircle className="w-4 h-4 text-success" />
                    </div>
                    <div className="flex items-center justify-between">
                      <span>Suitability Review</span>
                      <CheckCircle className="w-4 h-4 text-success" />
                    </div>
                  </div>
                </div>

                <div className="space-y-2">
                  <h4 className="font-medium">Meeting Details</h4>
                  <div className="space-y-1 text-sm text-muted-foreground">
                    <div>Type: Quarterly Review</div>
                    <div>Duration: 47m 23s</div>
                    <div>Advisor: Sarah Johnson, CFP</div>
                  </div>
                </div>

                <div className="space-y-2">
                  <h4 className="font-medium">Processing Info</h4>
                  <div className="space-y-1 text-sm text-muted-foreground">
                    <div>Created: {new Date(review.created).toLocaleString()}</div>
                    <div>Processing Time: 2m 15s</div>
                    <div>Retention: 6 years</div>
                  </div>
                </div>
              </div>

              <Separator />

              <div className="flex items-center justify-between">
                <Button 
                  variant="outline" 
                  className="gap-2"
                  onClick={() => setSelectedReview(review.id)}
                >
                  <Eye className="w-4 h-4" />
                  View Details
                </Button>

                <div className="flex items-center gap-2">
                  <Button 
                    variant="outline" 
                    className="gap-2"
                    onClick={() => handleFlag(review.id, review.client_name)}
                  >
                    <Flag className="w-4 h-4" />
                    Flag
                  </Button>
                  
                  <Button 
                    variant="outline" 
                    className="gap-2"
                  >
                    <Edit className="w-4 h-4" />
                    Edit
                  </Button>
                  
                  <Button 
                    className="gap-2"
                    onClick={() => handleApprove(review.id, review.client_name)}
                  >
                    <CheckCircle className="w-4 h-4" />
                    Approve & Post to CRM
                  </Button>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Detailed Review Modal */}
      {selectedReview && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>Detailed Review - {mockMeetingNoteResult.client_information.name}</CardTitle>
                <Button 
                  variant="ghost" 
                  onClick={() => setSelectedReview(null)}
                >
                  ✕
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-6">
                <div>
                  <h3 className="font-medium mb-2">Discussion Topics</h3>
                  {mockMeetingNoteResult.discussion_topics.map((topic, index) => (
                    <div key={index} className="mb-3 p-3 bg-muted/50 rounded-lg">
                      <h4 className="font-medium text-sm">{topic.category}</h4>
                      <p className="text-sm text-muted-foreground mt-1">{topic.content}</p>
                    </div>
                  ))}
                </div>
                <div>
                  <h3 className="font-medium mb-2">Recommendations</h3>
                  {mockMeetingNoteResult.recommendations_given.map((rec, index) => (
                    <div key={index} className="mb-3 p-3 bg-muted/50 rounded-lg">
                      <h4 className="font-medium text-sm">{rec.recommendation}</h4>
                      <p className="text-sm text-muted-foreground mt-1">{rec.rationale}</p>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}


================================================
FILE: src/pages/ProcessNotes.tsx
================================================
import { useState, useRef } from "react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Upload, Mic, FileText, CheckCircle, Clock, AlertTriangle, User, Calendar, Shield } from "lucide-react";
import { ComplianceStatus } from "@/components/ComplianceStatus";
import { mockMeetingNoteResult, mockCRMIntegration } from "@/data/mockData";
export default function ProcessNotes() {
  const [uploadMethod, setUploadMethod] = useState<"audio" | "text">("text");
  const [processingState, setProcessingState] = useState<"idle" | "processing" | "complete">("idle");
  const [selectedClient, setSelectedClient] = useState("");
  const [meetingType, setMeetingType] = useState("");
  const [meetingNotes, setMeetingNotes] = useState("Meeting with Robert Smith on September 10, 2025. Discussed retirement planning goals and increased 401k contributions. Client mentioned daughter starting college next year. Reviewed current portfolio performance and discussed rebalancing strategy...");
  const fileInputRef = useRef<HTMLInputElement>(null);
  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;
    try {
      const text = await file.text();
      setMeetingNotes(text);
    } catch (error) {
      console.error("Error reading file:", error);
    }
  };
  const handleProcess = () => {
    setProcessingState("processing");
    // Simulate AI processing
    setTimeout(() => {
      setProcessingState("complete");
    }, 3000);
  };
  const clientOptions = [{
    value: "RT_12345",
    label: "Robert J. Smith (RTS-789456123)"
  }, {
    value: "RT_12346",
    label: "Maria Gonzalez (MG-456789123)"
  }, {
    value: "RT_12347",
    label: "James Chen (JC-123456789)"
  }, {
    value: "RT_12348",
    label: "Lisa Rodriguez (LR-987654321)"
  }];
  const meetingTypes = ["Quarterly Review", "Annual Review", "Investment Review", "Risk Assessment", "Financial Planning Session", "Portfolio Rebalancing", "Tax Planning Meeting"];
  return <div className="min-h-screen bg-gradient-subtle">
      {/* Header */}
      <div className="border-b border-border bg-card">
        <div className="container mx-auto px-6 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-foreground">
                Process Meeting Notes
              </h1>
              <p className="text-muted-foreground mt-1">
                Upload audio recordings or text to generate SEC-compliant documentation
              </p>
            </div>
            <ComplianceStatus status="secure" />
          </div>
        </div>
      </div>

      <div className="container mx-auto px-6 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Input Form */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Upload className="w-5 h-5" />
                  Meeting Information
                </CardTitle>
                <CardDescription>
                  Provide client details and meeting context for accurate processing
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-6">
                {/* Client Selection */}
                <div className="space-y-2">
                  <Label htmlFor="client">Client (Redtail CRM Integration)</Label>
                  <Select value={selectedClient} onValueChange={setSelectedClient}>
                    <SelectTrigger>
                      <SelectValue placeholder="Search and select client..." />
                    </SelectTrigger>
                    <SelectContent>
                      {clientOptions.map(client => <SelectItem key={client.value} value={client.value}>
                          <div className="flex items-center gap-2">
                            <User className="w-4 h-4" />
                            {client.label}
                          </div>
                        </SelectItem>)}
                    </SelectContent>
                  </Select>
                  {selectedClient === "RT_12345" && <div className="p-3 bg-success-light/30 border border-success/20 rounded-lg text-sm">
                      <div className="flex items-center gap-2 mb-2">
                        <CheckCircle className="w-4 h-4 text-success" />
                        <span className="font-medium">Client Profile Loaded</span>
                      </div>
                      <div className="grid grid-cols-2 gap-4 text-xs">
                        <div>
                          <p className="text-muted-foreground">AUM</p>
                          <p className="font-medium">{mockCRMIntegration.client_profile.assets_under_management}</p>
                        </div>
                        <div>
                          <p className="text-muted-foreground">Risk Tolerance</p>
                          <p className="font-medium">{mockCRMIntegration.client_profile.risk_tolerance}</p>
                        </div>
                        <div>
                          <p className="text-muted-foreground">Advisor</p>
                          <p className="font-medium">{mockCRMIntegration.client_profile.primary_advisor}</p>
                        </div>
                        <div>
                          <p className="text-muted-foreground">Last Review</p>
                          <p className="font-medium">{mockCRMIntegration.client_profile.last_annual_review}</p>
                        </div>
                      </div>
                    </div>}
                </div>

                {/* Meeting Type */}
                <div className="space-y-2">
                  <Label htmlFor="meeting-type">Meeting Type</Label>
                  <Select value={meetingType} onValueChange={setMeetingType}>
                    <SelectTrigger>
                      <SelectValue placeholder="Select meeting type..." />
                    </SelectTrigger>
                    <SelectContent>
                      {meetingTypes.map(type => <SelectItem key={type} value={type}>
                          <div className="flex items-center gap-2">
                            <Calendar className="w-4 h-4" />
                            {type}
                          </div>
                        </SelectItem>)}
                    </SelectContent>
                  </Select>
                </div>

                {/* Meeting Date */}
                <div className="space-y-2">
                  <Label htmlFor="meeting-date">Meeting Date</Label>
                  <Input type="date" defaultValue="2025-09-10" className="font-mono" />
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  {uploadMethod === "audio" ? <Mic className="w-5 h-5" /> : <FileText className="w-5 h-5" />}
                  Upload Method
                </CardTitle>
                <CardDescription>
                  Choose your preferred input method for meeting notes
                </CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                {/* Method Selection */}
                <div className="flex gap-2">
                  <Button variant="outline" disabled className="flex-1 opacity-50 cursor-not-allowed">
                    <Mic className="w-4 h-4" />
                    Audio Recording (Coming Soon)
                  </Button>
                  <Button variant={uploadMethod === "text" ? "trust" : "outline"} onClick={() => setUploadMethod("text")} className="flex-1">
                    <FileText className="w-4 h-4" />
                    Text Input
                  </Button>
                </div>

                {uploadMethod === "audio" ? <div className="space-y-4">
                    <div className="border-2 border-dashed border-muted-foreground/20 rounded-lg p-8 text-center">
                      <Upload className="w-12 h-12 text-muted-foreground mx-auto mb-4" />
                      <h3 className="font-medium mb-2">Drop audio file here</h3>
                      <p className="text-sm text-muted-foreground mb-4">
                        Supports M4A, WAV, MP3 files from iPhone or other devices
                      </p>
                      <Button variant="outline">
                        Select Audio File
                      </Button>
                    </div>
                    <div className="flex items-center gap-2 text-sm text-muted-foreground">
                      <Shield className="w-4 h-4" />
                      <span>Audio files are processed securely and deleted after transcription</span>
                    </div>
                  </div> : <div className="space-y-4">
                    <Textarea placeholder="Paste your meeting transcript or notes here..." className="min-h-32 font-mono text-sm" value={meetingNotes} onChange={e => setMeetingNotes(e.target.value)} />
                    
                    {/* File Upload Button */}
                    <div className="flex items-center gap-2">
                      <Button variant="outline" size="sm" onClick={() => fileInputRef.current?.click()}>
                        <Upload className="w-4 h-4" />
                        Upload File
                      </Button>
                      <span className="text-sm text-muted-foreground">Upload .txt, .doc, .docx, .md, .rtf files</span>
                      <input ref={fileInputRef} type="file" accept=".txt,.doc,.docx,.rtf,.md" onChange={handleFileUpload} className="hidden" />
                    </div>
                    
                    <div className="flex items-center gap-2 text-sm text-muted-foreground">
                      <Shield className="w-4 h-4" />
                      <span>Text is processed securely with end-to-end encryption</span>
                    </div>
                  </div>}

                <Button variant="trust" size="lg" className="w-full" onClick={handleProcess} disabled={processingState === "processing" || !selectedClient || !meetingType}>
                  {processingState === "processing" ? <>
                      <Clock className="w-4 h-4 animate-spin" />
                      Processing with AI...
                    </> : <>
                      <Shield className="w-4 h-4" />
                      Generate SEC-Compliant Notes
                    </>}
                </Button>
              </CardContent>
            </Card>
          </div>

          {/* Results Display */}
          <div className="space-y-6">
            {processingState === "idle" && <Card className="border-dashed">
                <CardContent className="flex items-center justify-center py-12">
                  <div className="text-center text-muted-foreground">
                    <FileText className="w-12 h-12 mx-auto mb-4 opacity-50" />
                    <p>SEC-compliant notes will appear here after processing</p>
                  </div>
                </CardContent>
              </Card>}

            {processingState === "processing" && <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <Clock className="w-5 h-5 animate-spin text-primary" />
                    Processing Meeting Notes
                  </CardTitle>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-3">
                    <div className="flex items-center gap-3">
                      <CheckCircle className="w-4 h-4 text-success" />
                      <span className="text-sm">Audio transcribed successfully</span>
                    </div>
                    <div className="flex items-center gap-3">
                      <Clock className="w-4 h-4 text-primary animate-spin" />
                      <span className="text-sm">Generating SEC-compliant format...</span>
                    </div>
                    <div className="flex items-center gap-3 opacity-50">
                      <Clock className="w-4 h-4" />
                      <span className="text-sm">Flagging for compliance review</span>
                    </div>
                  </div>
                  <div className="mt-4 p-3 bg-muted/30 rounded-lg">
                    <p className="text-sm text-muted-foreground">
                      AI Confidence: <span className="font-mono font-bold text-primary">96%</span>
                    </p>
                  </div>
                </CardContent>
              </Card>}

            {processingState === "complete" && <Card>
                <CardHeader>
                  <CardTitle className="flex items-center gap-2">
                    <CheckCircle className="w-5 h-5 text-success" />
                    SEC-Compliant Meeting Notes Generated
                  </CardTitle>
                  <CardDescription>
                    AI processing complete - Review required before approval
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-6">
                  {/* Client Information Header */}
                  <div className="p-4 bg-card-subtle rounded-lg border">
                    <h3 className="font-semibold mb-2">Client Information</h3>
                    <div className="grid grid-cols-2 gap-4 text-sm">
                      <div>
                        <p className="text-muted-foreground">Client Name</p>
                        <p className="font-medium">{mockMeetingNoteResult.client_information.name}</p>
                      </div>
                      <div>
                        <p className="text-muted-foreground">Account Number</p>
                        <p className="font-mono">{mockMeetingNoteResult.client_information.account_number}</p>
                      </div>
                      <div>
                        <p className="text-muted-foreground">Meeting Type</p>
                        <p className="font-medium">{mockMeetingNoteResult.client_information.meeting_type}</p>
                      </div>
                      <div>
                        <p className="text-muted-foreground">Advisor</p>
                        <p className="font-medium">{mockMeetingNoteResult.client_information.advisor}</p>
                      </div>
                    </div>
                  </div>

                  {/* Discussion Topics */}
                  <div className="space-y-4">
                    <h3 className="font-semibold">Discussion Topics</h3>
                    {mockMeetingNoteResult.discussion_topics.slice(0, 2).map((topic, index) => <div key={index} className="p-4 border rounded-lg">
                        <h4 className="font-medium text-primary mb-2">{topic.category}</h4>
                        <p className="text-sm mb-3">{topic.content}</p>
                        <div className="flex items-center gap-2 text-xs">
                          <Shield className="w-3 h-3 text-success" />
                          <span className="text-muted-foreground">{topic.regulatory_notes}</span>
                        </div>
                      </div>)}
                  </div>

                  {/* Recommendations */}
                  <div className="space-y-3">
                    <h3 className="font-semibold">Recommendations Given</h3>
                    <div className="p-4 border rounded-lg">
                      <p className="font-medium text-sm mb-2">{mockMeetingNoteResult.recommendations_given[0].recommendation}</p>
                      <p className="text-sm text-muted-foreground mb-2">{mockMeetingNoteResult.recommendations_given[0].rationale}</p>
                      <div className="flex items-center gap-2 text-xs">
                        <CheckCircle className="w-3 h-3 text-success" />
                        <span className="text-success">Fiduciary standard applied</span>
                      </div>
                    </div>
                  </div>

                  {/* Compliance Status */}
                  <div className="p-4 bg-success-light/20 border border-success/20 rounded-lg">
                    <div className="flex items-center gap-2 mb-3">
                      <Shield className="w-4 h-4 text-success" />
                      <h3 className="font-semibold text-success">Compliance Verification</h3>
                    </div>
                    <div className="grid grid-cols-2 gap-2 text-sm">
                      <div className="flex items-center gap-2">
                        <CheckCircle className="w-3 h-3 text-success" />
                        <span>SEC Requirements Met</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle className="w-3 h-3 text-success" />
                        <span>Fiduciary Standard Applied</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle className="w-3 h-3 text-success" />
                        <span>Suitability Documented</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <CheckCircle className="w-3 h-3 text-success" />
                        <span>No Conflicts of Interest</span>
                      </div>
                    </div>
                  </div>

                  {/* Action Buttons */}
                  <div className="flex gap-3">
                    <Button variant="trust" className="flex-1">
                      Send for Review
                    </Button>
                    <Button variant="outline" className="flex-1">
                      Edit Notes
                    </Button>
                  </div>

                  {/* Processing Info */}
                  <div className="p-3 bg-muted/30 rounded-lg text-sm space-y-2">
                    <div className="flex justify-between">
                      <span>AI Confidence Score:</span>
                      <span className="font-mono font-bold text-primary">96%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Processing Time:</span>
                      <span className="font-mono">2m 15s</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Status:</span>
                      <ComplianceStatus status="pending" size="sm">
                        Awaiting Review
                      </ComplianceStatus>
                    </div>
                  </div>
                </CardContent>
              </Card>}
          </div>
        </div>
      </div>
    </div>;
}


================================================
FILE: src/pages/ReviewQueue.tsx
================================================
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { ComplianceStatus } from "@/components/ComplianceStatus";
import { mockComplianceDashboard, mockMeetingNoteResult } from "@/data/mockData";
import { 
  CheckCircle, 
  AlertTriangle, 
  Clock, 
  Eye, 
  Edit, 
  Flag,
  User,
  Calendar,
  TrendingUp,
  Shield
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";

export default function ReviewQueue() {
  const [selectedReview, setSelectedReview] = useState<string | null>(null);
  const { toast } = useToast();
  
  const handleApprove = (reviewId: string, clientName: string) => {
    toast({
      title: "Review Approved",
      description: `${clientName} meeting notes have been approved and posted to CRM.`,
    });
  };

  const handleFlag = (reviewId: string, clientName: string) => {
    toast({
      title: "Review Flagged",
      description: `${clientName} meeting notes have been flagged for additional review.`,
      variant: "destructive",
    });
  };

  const getPriorityBadge = (priority: string) => {
    return priority === "high" ? (
      <Badge variant="destructive" className="gap-1">
        <AlertTriangle className="w-3 h-3" />
        High Priority
      </Badge>
    ) : (
      <Badge variant="secondary" className="gap-1">
        <Clock className="w-3 h-3" />
        Normal
      </Badge>
    );
  };

  const getConfidenceColor = (confidence: number) => {
    if (confidence >= 90) return "text-success";
    if (confidence >= 80) return "text-warning";
    return "text-destructive";
  };

  return (
    <div className="flex-1 space-y-6 p-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Review Queue</h1>
          <p className="text-muted-foreground">
            Review and approve AI-generated meeting notes for SEC compliance
          </p>
        </div>
        
        <div className="flex items-center gap-4">
          <div className="text-right">
            <div className="text-sm font-medium">
              {mockComplianceDashboard.pending_reviews.length} Pending Reviews
            </div>
            <div className="text-xs text-muted-foreground">
              Avg Review Time: {mockComplianceDashboard.audit_metrics.human_review_time_avg}
            </div>
          </div>
          <ComplianceStatus status="secure" />
        </div>
      </div>

      <Tabs defaultValue="pending" className="space-y-4">
        <TabsList>
          <TabsTrigger value="pending" className="gap-2">
            <Clock className="w-4 h-4" />
            Pending ({mockComplianceDashboard.pending_reviews.length})
          </TabsTrigger>
          <TabsTrigger value="flagged" className="gap-2">
            <Flag className="w-4 h-4" />
            Flagged (2)
          </TabsTrigger>
          <TabsTrigger value="approved" className="gap-2">
            <CheckCircle className="w-4 h-4" />
            Approved Today (7)
          </TabsTrigger>
        </TabsList>

        <TabsContent value="pending" className="space-y-4">
          {mockComplianceDashboard.pending_reviews.map((review) => (
            <Card key={review.id} className="border-l-4 border-l-warning">
              <CardHeader className="pb-3">
                <div className="flex items-start justify-between">
                  <div className="space-y-1">
                    <CardTitle className="text-lg flex items-center gap-2">
                      <User className="w-5 h-5" />
                      {review.client_name}
                    </CardTitle>
                    <CardDescription className="flex items-center gap-4">
                      <span className="flex items-center gap-1">
                        <Calendar className="w-4 h-4" />
                        {new Date(review.meeting_date).toLocaleDateString()}
                      </span>
                      <span className="flex items-center gap-1">
                        <TrendingUp className="w-4 h-4" />
                        AI Confidence: <span className={getConfidenceColor(review.ai_confidence)}>{review.ai_confidence}%</span>
                      </span>
                    </CardDescription>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    {getPriorityBadge(review.priority)}
                    {review.regulatory_flags > 0 && (
                      <Badge variant="destructive">
                        {review.regulatory_flags} Flag{review.regulatory_flags !== 1 ? 's' : ''}
                      </Badge>
                    )}
                  </div>
                </div>
              </CardHeader>

              <CardContent className="space-y-4">
                {review.requires_attention && (
                  <div className="flex items-start gap-3 p-3 bg-warning/10 border border-warning/20 rounded-lg">
                    <AlertTriangle className="w-5 h-5 text-warning flex-shrink-0 mt-0.5" />
                    <div>
                      <p className="font-medium text-warning">Requires Attention</p>
                      <p className="text-sm text-muted-foreground">{review.flag_reason}</p>
                    </div>
                  </div>
                )}

                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div className="space-y-2">
                    <h4 className="font-medium flex items-center gap-2">
                      <Shield className="w-4 h-4" />
                      Compliance Verification
                    </h4>
                    <div className="space-y-1 text-sm">
                      <div className="flex items-center justify-between">
                        <span>SEC Requirements</span>
                        <CheckCircle className="w-4 h-4 text-success" />
                      </div>
                      <div className="flex items-center justify-between">
                        <span>Fiduciary Standard</span>
                        <CheckCircle className="w-4 h-4 text-success" />
                      </div>
                      <div className="flex items-center justify-between">
                        <span>Suitability Review</span>
                        <CheckCircle className="w-4 h-4 text-success" />
                      </div>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <h4 className="font-medium">Meeting Details</h4>
                    <div className="space-y-1 text-sm text-muted-foreground">
                      <div>Type: Quarterly Review</div>
                      <div>Duration: 47m 23s</div>
                      <div>Advisor: Sarah Johnson, CFP</div>
                    </div>
                  </div>

                  <div className="space-y-2">
                    <h4 className="font-medium">Processing Info</h4>
                    <div className="space-y-1 text-sm text-muted-foreground">
                      <div>Created: {new Date(review.created).toLocaleString()}</div>
                      <div>Processing Time: 2m 15s</div>
                      <div>Retention: 6 years</div>
                    </div>
                  </div>
                </div>

                <Separator />

                <div className="flex items-center justify-between">
                  <Button 
                    variant="outline" 
                    className="gap-2"
                    onClick={() => setSelectedReview(review.id)}
                  >
                    <Eye className="w-4 h-4" />
                    View Details
                  </Button>

                  <div className="flex items-center gap-2">
                    <Button 
                      variant="outline" 
                      className="gap-2"
                      onClick={() => handleFlag(review.id, review.client_name)}
                    >
                      <Flag className="w-4 h-4" />
                      Flag
                    </Button>
                    
                    <Button 
                      variant="outline" 
                      className="gap-2"
                    >
                      <Edit className="w-4 h-4" />
                      Edit
                    </Button>
                    
                    <Button 
                      className="gap-2"
                      onClick={() => handleApprove(review.id, review.client_name)}
                    >
                      <CheckCircle className="w-4 h-4" />
                      Approve & Post to CRM
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </TabsContent>

        <TabsContent value="flagged">
          <Card>
            <CardContent className="flex items-center justify-center py-12">
              <div className="text-center space-y-3">
                <Flag className="w-12 h-12 text-muted-foreground mx-auto" />
                <h3 className="text-lg font-medium">2 Flagged Items</h3>
                <p className="text-muted-foreground">Items requiring additional compliance review</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="approved">
          <Card>
            <CardContent className="flex items-center justify-center py-12">
              <div className="text-center space-y-3">
                <CheckCircle className="w-12 h-12 text-success mx-auto" />
                <h3 className="text-lg font-medium">7 Items Approved Today</h3>
                <p className="text-muted-foreground">Successfully processed and posted to CRM</p>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      {/* Detailed Review Modal would go here when selectedReview is set */}
      {selectedReview && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center p-4 z-50">
          <Card className="w-full max-w-4xl max-h-[90vh] overflow-y-auto">
            <CardHeader>
              <div className="flex items-center justify-between">
                <CardTitle>Detailed Review - {mockMeetingNoteResult.client_information.name}</CardTitle>
                <Button 
                  variant="ghost" 
                  onClick={() => setSelectedReview(null)}
                >
                  ✕
                </Button>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-2 gap-6">
                <div>
                  <h3 className="font-medium mb-2">Discussion Topics</h3>
                  {mockMeetingNoteResult.discussion_topics.map((topic, index) => (
                    <div key={index} className="mb-3 p-3 bg-muted/50 rounded-lg">
                      <h4 className="font-medium text-sm">{topic.category}</h4>
                      <p className="text-sm text-muted-foreground mt-1">{topic.content}</p>
                    </div>
                  ))}
                </div>
                <div>
                  <h3 className="font-medium mb-2">Recommendations</h3>
                  {mockMeetingNoteResult.recommendations_given.map((rec, index) => (
                    <div key={index} className="mb-3 p-3 bg-muted/50 rounded-lg">
                      <h4 className="font-medium text-sm">{rec.recommendation}</h4>
                      <p className="text-sm text-muted-foreground mt-1">{rec.rationale}</p>
                    </div>
                  ))}
                </div>
              </div>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  );
}


================================================
FILE: src/pages/Security.tsx
================================================
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { ComplianceStatus } from "@/components/ComplianceStatus";
import { mockSecurityData } from "@/data/mockData";
import { 
  Shield,
  Lock,
  Eye,
  AlertTriangle,
  CheckCircle,
  Users,
  Activity,
  Clock,
  Globe,
  Database,
  FileText,
  Zap
} from "lucide-react";

export default function Security() {
  const { security_metrics, recent_security_events, compliance_monitoring, access_control } = mockSecurityData;

  const getRiskLevelBadge = (level: string) => {
    switch (level) {
      case "low":
        return <Badge variant="default" className="gap-1"><CheckCircle className="w-3 h-3" />Low Risk</Badge>;
      case "medium":
        return <Badge variant="secondary" className="gap-1"><AlertTriangle className="w-3 h-3" />Medium Risk</Badge>;
      case "high":
        return <Badge variant="destructive" className="gap-1"><AlertTriangle className="w-3 h-3" />High Risk</Badge>;
      default:
        return <Badge variant="outline">{level}</Badge>;
    }
  };

  const getComplianceStatus = (status: string) => {
    return status === "compliant" ? (
      <div className="flex items-center gap-1 text-success">
        <CheckCircle className="w-4 h-4" />
        <span className="text-sm font-medium">Compliant</span>
      </div>
    ) : (
      <div className="flex items-center gap-1 text-destructive">
        <AlertTriangle className="w-4 h-4" />
        <span className="text-sm font-medium">Non-Compliant</span>
      </div>
    );
  };

  const getEventTypeIcon = (eventType: string) => {
    switch (eventType) {
      case "login_success":
        return <CheckCircle className="w-4 h-4 text-success" />;
      case "failed_login":
        return <AlertTriangle className="w-4 h-4 text-destructive" />;
      case "data_access":
        return <Eye className="w-4 h-4 text-primary" />;
      default:
        return <Activity className="w-4 h-4 text-muted-foreground" />;
    }
  };

  return (
    <div className="flex-1 space-y-6 p-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Security Dashboard</h1>
          <p className="text-muted-foreground">
            Monitor system security, access control, and compliance status
          </p>
        </div>
        
        <div className="flex items-center gap-4">
          <div className="text-right">
            <div className="text-sm font-medium">
              Last Security Scan
            </div>
            <div className="text-xs text-muted-foreground">
              {new Date(security_metrics.last_security_scan).toLocaleString()}
            </div>
          </div>
          <ComplianceStatus status="secure" />
        </div>
      </div>

      {/* Security Metrics Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-success/10 rounded-lg">
                <Shield className="w-5 h-5 text-success" />
              </div>
              <div>
                <p className="text-sm font-medium">Encryption Status</p>
                <p className="text-lg font-bold text-success">{security_metrics.encryption_status}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-primary/10 rounded-lg">
                <Users className="w-5 h-5 text-primary" />
              </div>
              <div>
                <p className="text-sm font-medium">Active Sessions</p>
                <p className="text-lg font-bold">{security_metrics.active_sessions}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-warning/10 rounded-lg">
                <AlertTriangle className="w-5 h-5 text-warning" />
              </div>
              <div>
                <p className="text-sm font-medium">Failed Logins (24h)</p>
                <p className="text-lg font-bold text-warning">{security_metrics.failed_login_attempts}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardContent className="p-4">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-success/10 rounded-lg">
                <CheckCircle className="w-5 h-5 text-success" />
              </div>
              <div>
                <p className="text-sm font-medium">Vulnerabilities</p>
                <p className="text-lg font-bold text-success">{security_metrics.vulnerability_count}</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Access Control */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Lock className="w-5 h-5" />
              Access Control
            </CardTitle>
            <CardDescription>User access and authentication monitoring</CardDescription>
          </CardHeader>
          <CardContent className="space-y-4">
            <div className="grid grid-cols-2 gap-4">
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm">Total Users</span>
                  <span className="font-medium">{access_control.total_users}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Active Sessions</span>
                  <span className="font-medium">{access_control.active_sessions}</span>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Failed Attempts</span>
                  <span className="font-medium text-warning">{access_control.failed_access_attempts}</span>
                </div>
              </div>
              <div className="space-y-2">
                <div className="flex items-center justify-between">
                  <span className="text-sm">2FA Status</span>
                  <Badge variant="default">Enforced</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Role-Based Access</span>
                  <Badge variant="default">Enabled</Badge>
                </div>
                <div className="flex items-center justify-between">
                  <span className="text-sm">Privileged Reviews</span>
                  <span className="font-medium">{access_control.privileged_access_reviews}</span>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Compliance Monitoring */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <FileText className="w-5 h-5" />
              Compliance Status
            </CardTitle>
            <CardDescription>SEC and regulatory compliance monitoring</CardDescription>
          </CardHeader>
          <CardContent className="space-y-3">
            <div className="flex items-center justify-between">
              <span className="text-sm">SEC Requirements</span>
              {getComplianceStatus(compliance_monitoring.sec_requirements_status)}
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm">Data Encryption</span>
              {getComplianceStatus(compliance_monitoring.data_encryption_compliance)}
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm">Record Retention</span>
              {getComplianceStatus(compliance_monitoring.record_retention_compliance)}
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm">Access Control</span>
              {getComplianceStatus(compliance_monitoring.access_control_compliance)}
            </div>
            <div className="flex items-center justify-between">
              <span className="text-sm">Audit Trail</span>
              {getComplianceStatus(compliance_monitoring.audit_trail_compliance)}
            </div>
            <Separator />
            <div className="text-xs text-muted-foreground">
              Last Check: {new Date(compliance_monitoring.last_compliance_check).toLocaleString()}
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Recent Security Events */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Activity className="w-5 h-5" />
            Recent Security Events
          </CardTitle>
          <CardDescription>Latest security activities and access logs</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="space-y-4">
            {recent_security_events.map((event) => (
              <div key={event.id} className="flex items-start gap-3 p-3 bg-muted/30 rounded-lg">
                <div className="flex-shrink-0 mt-0.5">
                  {getEventTypeIcon(event.event_type)}
                </div>
                <div className="flex-1 min-w-0">
                  <div className="flex items-center gap-2 mb-1">
                    <span className="font-medium text-sm">
                      {event.event_type.replace('_', ' ').toUpperCase()}
                    </span>
                    {getRiskLevelBadge(event.risk_level)}
                  </div>
                  <p className="text-sm text-muted-foreground mb-2">{event.details}</p>
                  <div className="flex items-center gap-4 text-xs text-muted-foreground">
                    <span className="flex items-center gap-1">
                      <Users className="w-3 h-3" />
                      {event.user}
                    </span>
                    <span className="flex items-center gap-1">
                      <Globe className="w-3 h-3" />
                      {event.ip_address}
                    </span>
                    <span className="flex items-center gap-1">
                      <Clock className="w-3 h-3" />
                      {new Date(event.timestamp).toLocaleString()}
                    </span>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>

      {/* System Status */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Database className="w-5 h-5" />
            System Security Status
          </CardTitle>
          <CardDescription>Current system security and integrity status</CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <div className="text-center p-4 bg-success/10 rounded-lg">
              <Zap className="w-8 h-8 text-success mx-auto mb-2" />
              <p className="font-medium text-success">Data Integrity</p>
              <p className="text-sm text-muted-foreground">{security_metrics.audit_trail_integrity}</p>
            </div>
            <div className="text-center p-4 bg-success/10 rounded-lg">
              <Lock className="w-8 h-8 text-success mx-auto mb-2" />
              <p className="font-medium text-success">Encryption</p>
              <p className="text-sm text-muted-foreground">AES-256 Active</p>
            </div>
            <div className="text-center p-4 bg-success/10 rounded-lg">
              <FileText className="w-8 h-8 text-success mx-auto mb-2" />
              <p className="font-medium text-success">Retention</p>
              <p className="text-sm text-muted-foreground">{security_metrics.data_retention_compliance}</p>
            </div>
            <div className="text-center p-4 bg-success/10 rounded-lg">
              <Shield className="w-8 h-8 text-success mx-auto mb-2" />
              <p className="font-medium text-success">Access Violations</p>
              <p className="text-sm text-muted-foreground">{security_metrics.access_violations_today} Today</p>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}


================================================
FILE: src/pages/Settings.tsx
================================================
import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { ComplianceStatus } from "@/components/ComplianceStatus";
import { 
  User,
  Shield,
  Bell,
  Link as LinkIcon,
  FileText,
  Database,
  Settings as SettingsIcon,
  Key,
  Lock,
  Eye,
  EyeOff,
  Save,
  RefreshCw,
  AlertTriangle,
  CheckCircle,
  Globe
} from "lucide-react";
import { useToast } from "@/hooks/use-toast";

export default function Settings() {
  const [showPassword, setShowPassword] = useState(false);
  const [activeIntegrations, setActiveIntegrations] = useState({
    redtail: true,
    albridge: true,
    blackDiamond: false
  });
  const [notificationSettings, setNotificationSettings] = useState({
    emailAlerts: true,
    complianceFlags: true,
    reviewReminders: true,
    securityAlerts: true,
    dailyReports: false
  });
  const { toast } = useToast();

  const handleSave = (section: string) => {
    toast({
      title: "Settings Updated",
      description: `${section} settings have been saved successfully.`,
    });
  };

  const handleTestConnection = (integration: string) => {
    toast({
      title: "Connection Test",
      description: `Testing connection to ${integration}...`,
    });
  };

  return (
    <div className="flex-1 space-y-6 p-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Settings</h1>
          <p className="text-muted-foreground">
            Manage your account, security, and system preferences
          </p>
        </div>
        
        <div className="flex items-center gap-4">
          <ComplianceStatus status="secure" />
        </div>
      </div>

      <Tabs defaultValue="profile" className="space-y-4">
        <TabsList className="grid w-full grid-cols-6">
          <TabsTrigger value="profile" className="gap-2">
            <User className="w-4 h-4" />
            Profile
          </TabsTrigger>
          <TabsTrigger value="security" className="gap-2">
            <Shield className="w-4 h-4" />
            Security
          </TabsTrigger>
          <TabsTrigger value="notifications" className="gap-2">
            <Bell className="w-4 h-4" />
            Notifications
          </TabsTrigger>
          <TabsTrigger value="integrations" className="gap-2">
            <LinkIcon className="w-4 h-4" />
            Integrations
          </TabsTrigger>
          <TabsTrigger value="compliance" className="gap-2">
            <FileText className="w-4 h-4" />
            Compliance
          </TabsTrigger>
          <TabsTrigger value="system" className="gap-2">
            <SettingsIcon className="w-4 h-4" />
            System
          </TabsTrigger>
        </TabsList>

        {/* Profile Settings */}
        <TabsContent value="profile" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <User className="w-5 h-5" />
                User Profile
              </CardTitle>
              <CardDescription>Manage your personal information and account details</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="firstName">First Name</Label>
                  <Input id="firstName" defaultValue="Jennifer" />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="lastName">Last Name</Label>
                  <Input id="lastName" defaultValue="Walsh" />
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="email">Email Address</Label>
                <Input id="email" type="email" defaultValue="jennifer.walsh@firm.com" />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="title">Professional Title</Label>
                <Input id="title" defaultValue="Chief Compliance Officer" />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="department">Department</Label>
                <Select defaultValue="compliance">
                  <SelectTrigger>
                    <SelectValue placeholder="Select department" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="compliance">Compliance</SelectItem>
                    <SelectItem value="advisory">Advisory</SelectItem>
                    <SelectItem value="operations">Operations</SelectItem>
                    <SelectItem value="management">Management</SelectItem>
                  </SelectContent>
                </Select>
              </div>

              <Separator />
              
              <div className="flex justify-end">
                <Button onClick={() => handleSave("Profile")} className="gap-2">
                  <Save className="w-4 h-4" />
                  Save Changes
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Security Settings */}
        <TabsContent value="security" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Shield className="w-5 h-5" />
                Security & Authentication
              </CardTitle>
              <CardDescription>Manage your security settings and authentication methods</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <h4 className="font-medium flex items-center gap-2">
                  <Key className="w-4 h-4" />
                  Password Settings
                </h4>
                <div className="space-y-2">
                  <Label htmlFor="currentPassword">Current Password</Label>
                  <div className="relative">
                    <Input 
                      id="currentPassword" 
                      type={showPassword ? "text" : "password"} 
                      placeholder="Enter current password"
                    />
                    <Button
                      type="button"
                      variant="ghost"
                      size="sm"
                      className="absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? <EyeOff className="w-4 h-4" /> : <Eye className="w-4 h-4" />}
                    </Button>
                  </div>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="newPassword">New Password</Label>
                  <Input id="newPassword" type="password" placeholder="Enter new password" />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="confirmPassword">Confirm New Password</Label>
                  <Input id="confirmPassword" type="password" placeholder="Confirm new password" />
                </div>
              </div>

              <Separator />

              <div className="space-y-4">
                <h4 className="font-medium flex items-center gap-2">
                  <Lock className="w-4 h-4" />
                  Two-Factor Authentication
                </h4>
                <div className="flex items-center justify-between">
                  <div className="space-y-1">
                    <p className="text-sm font-medium">Enable 2FA</p>
                    <p className="text-sm text-muted-foreground">
                      Add an extra layer of security to your account
                    </p>
                  </div>
                  <Badge variant="default" className="gap-1">
                    <CheckCircle className="w-3 h-3" />
                    Enabled
                  </Badge>
                </div>
                <Button variant="outline" className="gap-2">
                  <RefreshCw className="w-4 h-4" />
                  Regenerate Backup Codes
                </Button>
              </div>

              <Separator />

              <div className="space-y-4">
                <h4 className="font-medium">Session Management</h4>
                <div className="space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span>Current session (Chrome on Windows)</span>
                    <Badge variant="default">Active</Badge>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span>Mobile session (iPhone Safari)</span>
                    <Button variant="ghost" size="sm">Revoke</Button>
                  </div>
                </div>
              </div>

              <Separator />
              
              <div className="flex justify-end">
                <Button onClick={() => handleSave("Security")} className="gap-2">
                  <Save className="w-4 h-4" />
                  Update Security Settings
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Notification Settings */}
        <TabsContent value="notifications" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Bell className="w-5 h-5" />
                Notification Preferences
              </CardTitle>
              <CardDescription>Control how and when you receive notifications</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <h4 className="font-medium">Email Notifications</h4>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <p className="text-sm font-medium">General Email Alerts</p>
                      <p className="text-sm text-muted-foreground">System updates and announcements</p>
                    </div>
                    <Switch 
                      checked={notificationSettings.emailAlerts}
                      onCheckedChange={(checked) => setNotificationSettings(prev => ({...prev, emailAlerts: checked}))}
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <p className="text-sm font-medium">Compliance Flags</p>
                      <p className="text-sm text-muted-foreground">Immediate alerts for compliance issues</p>
                    </div>
                    <Switch 
                      checked={notificationSettings.complianceFlags}
                      onCheckedChange={(checked) => setNotificationSettings(prev => ({...prev, complianceFlags: checked}))}
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <p className="text-sm font-medium">Review Reminders</p>
                      <p className="text-sm text-muted-foreground">Reminders for pending reviews</p>
                    </div>
                    <Switch 
                      checked={notificationSettings.reviewReminders}
                      onCheckedChange={(checked) => setNotificationSettings(prev => ({...prev, reviewReminders: checked}))}
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <p className="text-sm font-medium">Security Alerts</p>
                      <p className="text-sm text-muted-foreground">Login attempts and security events</p>
                    </div>
                    <Switch 
                      checked={notificationSettings.securityAlerts}
                      onCheckedChange={(checked) => setNotificationSettings(prev => ({...prev, securityAlerts: checked}))}
                    />
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <p className="text-sm font-medium">Daily Reports</p>
                      <p className="text-sm text-muted-foreground">Daily summary of system activity</p>
                    </div>
                    <Switch 
                      checked={notificationSettings.dailyReports}
                      onCheckedChange={(checked) => setNotificationSettings(prev => ({...prev, dailyReports: checked}))}
                    />
                  </div>
                </div>
              </div>

              <Separator />

              <div className="space-y-4">
                <h4 className="font-medium">Notification Timing</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="quietHoursStart">Quiet Hours Start</Label>
                    <Select defaultValue="18:00">
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="17:00">5:00 PM</SelectItem>
                        <SelectItem value="18:00">6:00 PM</SelectItem>
                        <SelectItem value="19:00">7:00 PM</SelectItem>
                        <SelectItem value="20:00">8:00 PM</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="quietHoursEnd">Quiet Hours End</Label>
                    <Select defaultValue="08:00">
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="07:00">7:00 AM</SelectItem>
                        <SelectItem value="08:00">8:00 AM</SelectItem>
                        <SelectItem value="09:00">9:00 AM</SelectItem>
                        <SelectItem value="10:00">10:00 AM</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>

              <Separator />
              
              <div className="flex justify-end">
                <Button onClick={() => handleSave("Notifications")} className="gap-2">
                  <Save className="w-4 h-4" />
                  Save Preferences
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Integration Settings */}
        <TabsContent value="integrations" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <LinkIcon className="w-5 h-5" />
                System Integrations
              </CardTitle>
              <CardDescription>Manage connections to external systems and platforms</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-primary/10 rounded-lg">
                      <Database className="w-5 h-5 text-primary" />
                    </div>
                    <div>
                      <p className="font-medium">Redtail CRM</p>
                      <p className="text-sm text-muted-foreground">Client relationship management system</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    {activeIntegrations.redtail ? (
                      <Badge variant="default" className="gap-1">
                        <CheckCircle className="w-3 h-3" />
                        Connected
                      </Badge>
                    ) : (
                      <Badge variant="secondary" className="gap-1">
                        <AlertTriangle className="w-3 h-3" />
                        Disconnected
                      </Badge>
                    )}
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => handleTestConnection("Redtail CRM")}
                    >
                      Test Connection
                    </Button>
                  </div>
                </div>

                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-success/10 rounded-lg">
                      <Globe className="w-5 h-5 text-success" />
                    </div>
                    <div>
                      <p className="font-medium">Albridge Portfolio</p>
                      <p className="text-sm text-muted-foreground">Portfolio management and analysis</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    {activeIntegrations.albridge ? (
                      <Badge variant="default" className="gap-1">
                        <CheckCircle className="w-3 h-3" />
                        Connected
                      </Badge>
                    ) : (
                      <Badge variant="secondary" className="gap-1">
                        <AlertTriangle className="w-3 h-3" />
                        Disconnected
                      </Badge>
                    )}
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => handleTestConnection("Albridge")}
                    >
                      Test Connection
                    </Button>
                  </div>
                </div>

                <div className="flex items-center justify-between p-4 border rounded-lg">
                  <div className="flex items-center gap-3">
                    <div className="p-2 bg-muted rounded-lg">
                      <Database className="w-5 h-5 text-muted-foreground" />
                    </div>
                    <div>
                      <p className="font-medium">Black Diamond</p>
                      <p className="text-sm text-muted-foreground">Future integration - Coming Soon</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge variant="outline">Coming Soon</Badge>
                    <Button variant="outline" size="sm" disabled>
                      Configure
                    </Button>
                  </div>
                </div>
              </div>

              <Separator />

              <div className="space-y-4">
                <h4 className="font-medium">API Configuration</h4>
                <div className="space-y-2">
                  <Label htmlFor="apiTimeout">API Timeout (seconds)</Label>
                  <Select defaultValue="30">
                    <SelectTrigger className="w-48">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="15">15 seconds</SelectItem>
                      <SelectItem value="30">30 seconds</SelectItem>
                      <SelectItem value="60">60 seconds</SelectItem>
                      <SelectItem value="120">120 seconds</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="retryAttempts">Retry Attempts</Label>
                  <Select defaultValue="3">
                    <SelectTrigger className="w-48">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="1">1 attempt</SelectItem>
                      <SelectItem value="3">3 attempts</SelectItem>
                      <SelectItem value="5">5 attempts</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <Separator />
              
              <div className="flex justify-end">
                <Button onClick={() => handleSave("Integrations")} className="gap-2">
                  <Save className="w-4 h-4" />
                  Save Integration Settings
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Compliance Settings */}
        <TabsContent value="compliance" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <FileText className="w-5 h-5" />
                Compliance Configuration
              </CardTitle>
              <CardDescription>Configure SEC compliance and regulatory settings</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <h4 className="font-medium">Data Retention</h4>
                <div className="space-y-2">
                  <Label htmlFor="retentionPeriod">Meeting Notes Retention Period</Label>
                  <Select defaultValue="6">
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="3">3 years</SelectItem>
                      <SelectItem value="5">5 years</SelectItem>
                      <SelectItem value="6">6 years (SEC Standard)</SelectItem>
                      <SelectItem value="7">7 years</SelectItem>
                      <SelectItem value="10">10 years</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="auditRetention">Audit Trail Retention</Label>
                  <Select defaultValue="7">
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="5">5 years</SelectItem>
                      <SelectItem value="7">7 years (Recommended)</SelectItem>
                      <SelectItem value="10">10 years</SelectItem>
                      <SelectItem value="permanent">Permanent</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <Separator />

              <div className="space-y-4">
                <h4 className="font-medium">Review Requirements</h4>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <p className="text-sm font-medium">Require Human Review</p>
                      <p className="text-sm text-muted-foreground">All AI-generated notes must be reviewed</p>
                    </div>
                    <Switch defaultChecked />
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <p className="text-sm font-medium">Auto-flag Low Confidence</p>
                      <p className="text-sm text-muted-foreground">Flag items below confidence threshold</p>
                    </div>
                    <Switch defaultChecked />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="confidenceThreshold">Confidence Threshold (%)</Label>
                    <Select defaultValue="85">
                      <SelectTrigger className="w-48">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="75">75%</SelectItem>
                        <SelectItem value="80">80%</SelectItem>
                        <SelectItem value="85">85%</SelectItem>
                        <SelectItem value="90">90%</SelectItem>
                        <SelectItem value="95">95%</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>

              <Separator />

              <div className="space-y-4">
                <h4 className="font-medium">Data Protection</h4>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <p className="text-sm font-medium">Encrypt Sensitive Data</p>
                      <p className="text-sm text-muted-foreground">AES-256 encryption for all data</p>
                    </div>
                    <Badge variant="default" className="gap-1">
                      <Lock className="w-3 h-3" />
                      Enabled
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <p className="text-sm font-medium">Data Minimization</p>
                      <p className="text-sm text-muted-foreground">Exclude SSNs and sensitive identifiers</p>
                    </div>
                    <Switch defaultChecked />
                  </div>
                </div>
              </div>

              <Separator />
              
              <div className="flex justify-end">
                <Button onClick={() => handleSave("Compliance")} className="gap-2">
                  <Save className="w-4 h-4" />
                  Update Compliance Settings
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* System Settings */}
        <TabsContent value="system" className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <SettingsIcon className="w-5 h-5" />
                System Preferences
              </CardTitle>
              <CardDescription>Configure general system settings and preferences</CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
              <div className="space-y-4">
                <h4 className="font-medium">Display Settings</h4>
                <div className="space-y-2">
                  <Label htmlFor="theme">Theme</Label>
                  <Select defaultValue="system">
                    <SelectTrigger className="w-48">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="light">Light</SelectItem>
                      <SelectItem value="dark">Dark</SelectItem>
                      <SelectItem value="system">System</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="dateFormat">Date Format</Label>
                  <Select defaultValue="mm/dd/yyyy">
                    <SelectTrigger className="w-48">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="mm/dd/yyyy">MM/DD/YYYY</SelectItem>
                      <SelectItem value="dd/mm/yyyy">DD/MM/YYYY</SelectItem>
                      <SelectItem value="yyyy-mm-dd">YYYY-MM-DD</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="timezone">Timezone</Label>
                  <Select defaultValue="et">
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="et">Eastern Time (ET)</SelectItem>
                      <SelectItem value="ct">Central Time (CT)</SelectItem>
                      <SelectItem value="mt">Mountain Time (MT)</SelectItem>
                      <SelectItem value="pt">Pacific Time (PT)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              </div>

              <Separator />

              <div className="space-y-4">
                <h4 className="font-medium">Performance Settings</h4>
                <div className="space-y-3">
                  <div className="flex items-center justify-between">
                    <div className="space-y-1">
                      <p className="text-sm font-medium">Auto-save Draft Notes</p>
                      <p className="text-sm text-muted-foreground">Automatically save work in progress</p>
                    </div>
                    <Switch defaultChecked />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="pageSize">Items per Page</Label>
                    <Select defaultValue="25">
                      <SelectTrigger className="w-48">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="10">10</SelectItem>
                        <SelectItem value="25">25</SelectItem>
                        <SelectItem value="50">50</SelectItem>
                        <SelectItem value="100">100</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                </div>
              </div>

              <Separator />

              <div className="space-y-4">
                <h4 className="font-medium">Backup & Export</h4>
                <div className="space-y-2">
                  <Label htmlFor="backupFrequency">Backup Frequency</Label>
                  <Select defaultValue="daily">
                    <SelectTrigger className="w-48">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="hourly">Hourly</SelectItem>
                      <SelectItem value="daily">Daily</SelectItem>
                      <SelectItem value="weekly">Weekly</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="flex gap-2">
                  <Button variant="outline" className="gap-2">
                    <Database className="w-4 h-4" />
                    Export Data
                  </Button>
                  <Button variant="outline" className="gap-2">
                    <RefreshCw className="w-4 h-4" />
                    Run Backup Now
                  </Button>
                </div>
              </div>

              <Separator />
              
              <div className="flex justify-end">
                <Button onClick={() => handleSave("System")} className="gap-2">
                  <Save className="w-4 h-4" />
                  Save System Settings
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}


================================================
FILE: src/pages/UpcomingFeatures.tsx
================================================
import React from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  Users, 
  TrendingUp, 
  Database, 
  Clock, 
  CheckCircle, 
  AlertCircle,
  ExternalLink,
  Cable,
  Shield,
  Zap,
  FileText,
  Search,
  Brain
} from 'lucide-react';
import { ComplianceStatus } from '@/components/ComplianceStatus';

export default function UpcomingFeatures() {
  return (
    <div className="min-h-screen bg-gradient-subtle">
      {/* Header */}
      <div className="border-b border-border bg-card">
        <div className="container mx-auto px-6 py-6">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-foreground">
                Upcoming Features
              </h1>
              <p className="text-muted-foreground mt-1">
                Next-generation integrations and capabilities coming soon
              </p>
            </div>
            <div className="flex items-center gap-3">
              <ComplianceStatus status="pending" />
              <Badge variant="secondary" className="font-mono">
                <Clock className="w-3 h-3 mr-1" />
                Under Development
              </Badge>
            </div>
          </div>
        </div>
      </div>

      <div className="container mx-auto px-6 py-8 space-y-8">
        {/* Construction Notice */}
        <Card className="border-warning/20 bg-warning-light/10">
          <CardHeader>
            <div className="flex items-center gap-3">
              <div className="w-12 h-12 rounded-lg bg-warning-light flex items-center justify-center">
                <AlertCircle className="w-6 h-6 text-warning" />
              </div>
              <div>
                <CardTitle className="text-warning">Advanced Features In Development</CardTitle>
                <CardDescription>
                  We're building comprehensive MCP (Model Context Protocol) integrations for seamless workflow automation and enhanced AI capabilities.
                </CardDescription>
              </div>
            </div>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="p-4 rounded-lg bg-card border">
                  <div className="flex items-center gap-2 mb-2">
                    <Clock className="w-4 h-4 text-primary" />
                    <span className="font-medium">Estimated Timeline</span>
                  </div>
                  <p className="text-sm text-muted-foreground">Q1 2026 - Full Feature Launch</p>
                </div>
                
                
                <div className="p-4 rounded-lg bg-card border">
                  <div className="flex items-center gap-2 mb-2">
                    <img src="/lovable-uploads/5cfbb876-140b-4ac9-bc63-84e5fd416aa6.png" className="w-4 h-4" alt="Baker Group Logo" />
                    <span className="font-medium">SEC Compliance</span>
                  </div>
                  <p className="text-sm text-muted-foreground">All features fully compliant</p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Core Integrations */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Redtail CRM Integration */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center">
                    <Users className="w-5 h-5 text-primary" />
                  </div>
                  <div>
                    <CardTitle>Redtail CRM Integration</CardTitle>
                    <CardDescription>Client relationship management and data synchronization</CardDescription>
                  </div>
                </div>
                <Badge variant="secondary">
                  <Cable className="w-3 h-3 mr-1" />
                  MCP Ready
                </Badge>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <h4 className="font-medium text-sm">Planned Features:</h4>
                <ul className="space-y-2 text-sm text-muted-foreground">
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Real-time client profile synchronization
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Automated meeting note integration
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Activity logging and follow-up scheduling
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    SEC-compliant communication tracking
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Advanced workflow automation
                  </li>
                </ul>
              </div>
              
              <div className="pt-4 border-t">
                <Button variant="outline" className="w-full" disabled>
                  <ExternalLink className="w-4 h-4 mr-2" />
                  Connect to Redtail (Coming Soon)
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* Albridge Portfolio Integration */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 rounded-lg bg-success/10 flex items-center justify-center">
                    <TrendingUp className="w-5 h-5 text-success" />
                  </div>
                  <div>
                    <CardTitle>Albridge Portfolio Integration</CardTitle>
                    <CardDescription>Portfolio analysis and performance monitoring</CardDescription>
                  </div>
                </div>
                <Badge variant="secondary">
                  <Cable className="w-3 h-3 mr-1" />
                  MCP Ready
                </Badge>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <h4 className="font-medium text-sm">Planned Features:</h4>
                <ul className="space-y-2 text-sm text-muted-foreground">
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Live portfolio data and performance metrics
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    AI-powered investment analysis
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Risk assessment and rebalancing recommendations
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Tax-loss harvesting opportunities
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Custom reporting and alerts
                  </li>
                </ul>
              </div>
              
              <div className="pt-4 border-t">
                <Button variant="outline" className="w-full" disabled>
                  <ExternalLink className="w-4 h-4 mr-2" />
                  Connect to Albridge (Coming Soon)
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* File Server Integration */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center">
                    <FileText className="w-5 h-5 text-primary" />
                  </div>
                  <div>
                    <CardTitle>File Server Integration</CardTitle>
                    <CardDescription>Centralized document management and secure file access</CardDescription>
                  </div>
                </div>
                <Badge variant="outline">
                  <Clock className="w-3 h-3 mr-1" />
                  Future Phase
                </Badge>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <h4 className="font-medium text-sm">Planned Features:</h4>
                <ul className="space-y-2 text-sm text-muted-foreground">
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Secure client document storage and retrieval
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Automated document classification and tagging
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Version control and audit trails
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Integration with meeting notes and templates
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Advanced file analytics and insights
                  </li>
                </ul>
              </div>
              
              <div className="pt-4 border-t">
                <Button variant="outline" className="w-full" disabled>
                  <ExternalLink className="w-4 h-4 mr-2" />
                  Connect File Server (Coming Soon)
                </Button>
              </div>
            </CardContent>
          </Card>

          {/* AI Index Integration */}
          <Card>
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-3">
                  <div className="w-10 h-10 rounded-lg bg-success/10 flex items-center justify-center">
                    <Brain className="w-5 h-5 text-success" />
                  </div>
                  <div>
                    <CardTitle>AI Index Integration</CardTitle>
                    <CardDescription>Intelligent knowledge base and semantic search</CardDescription>
                  </div>
                </div>
                <Badge variant="outline">
                  <Clock className="w-3 h-3 mr-1" />
                  Future Phase
                </Badge>
              </div>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="space-y-3">
                <h4 className="font-medium text-sm">Planned Features:</h4>
                <ul className="space-y-2 text-sm text-muted-foreground">
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Semantic search across all client data
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    AI-powered content recommendations
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Intelligent document summarization
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Contextual insights and suggestions
                  </li>
                  <li className="flex items-center gap-2">
                    <Clock className="w-4 h-4 text-warning" />
                    Advanced query and analysis capabilities
                  </li>
                </ul>
              </div>
              
              <div className="pt-4 border-t">
                <Button variant="outline" className="w-full" disabled>
                  <Search className="w-4 h-4 mr-2" />
                  Connect AI Index (Coming Soon)
                </Button>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Black Diamond Future Integration */}
        <Card>
          <CardHeader>
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-10 h-10 rounded-lg bg-neutral/10 flex items-center justify-center">
                  <Database className="w-5 h-5 text-neutral" />
                </div>
                <div>
                  <CardTitle>Black Diamond Integration</CardTitle>
                  <CardDescription>Advanced portfolio management and reporting platform</CardDescription>
                </div>
              </div>
              <Badge variant="outline">
                <Clock className="w-3 h-3 mr-1" />
                Future Phase
              </Badge>
            </div>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="space-y-3">
                <h4 className="font-medium text-sm">Advanced Capabilities:</h4>
                <ul className="space-y-2 text-sm text-muted-foreground">
                  <li className="flex items-center gap-2">
                    <AlertCircle className="w-4 h-4 text-warning" />
                    Comprehensive portfolio management
                  </li>
                  <li className="flex items-center gap-2">
                    <AlertCircle className="w-4 h-4 text-warning" />
                    Advanced performance attribution
                  </li>
                  <li className="flex items-center gap-2">
                    <AlertCircle className="w-4 h-4 text-warning" />
                    Multi-custodial account aggregation
                  </li>
                  <li className="flex items-center gap-2">
                    <AlertCircle className="w-4 h-4 text-warning" />
                    Institutional-grade reporting
                  </li>
                </ul>
              </div>
              
              <div className="p-4 rounded-lg bg-accent/30 border-2 border-dashed border-accent">
                <div className="text-center space-y-2">
                  <Zap className="w-8 h-8 mx-auto text-primary" />
                  <h4 className="font-medium">Coming in 2026</h4>
                  <p className="text-sm text-muted-foreground">
                    Enhanced integration capabilities planned for the next phase of development.
                  </p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* MCP Technology Overview */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Cable className="w-5 h-5" />
              Model Context Protocol (MCP) Technology
            </CardTitle>
            <CardDescription>
              Secure, compliant, and seamless integration framework
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="text-center space-y-2">
                <div className="w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mx-auto">
                  <img src="/lovable-uploads/5cfbb876-140b-4ac9-bc63-84e5fd416aa6.png" className="w-6 h-6" alt="Baker Group Logo" />
                </div>
                <h4 className="font-medium">SEC Compliant</h4>
                <p className="text-sm text-muted-foreground">
                  All integrations maintain strict regulatory compliance with complete audit trails.
                </p>
              </div>
              
              <div className="text-center space-y-2">
                <div className="w-12 h-12 rounded-lg bg-success/10 flex items-center justify-center mx-auto">
                  <Zap className="w-6 h-6 text-success" />
                </div>
                <h4 className="font-medium">Real-Time</h4>
                <p className="text-sm text-muted-foreground">
                  Live data synchronization for up-to-date client and portfolio information.
                </p>
              </div>
              
              <div className="text-center space-y-2">
                <div className="w-12 h-12 rounded-lg bg-warning/10 flex items-center justify-center mx-auto">
                  <Cable className="w-6 h-6 text-warning" />
                </div>
                <h4 className="font-medium">Seamless</h4>
                <p className="text-sm text-muted-foreground">
                  Unified experience across all platforms with intelligent context sharing.
                </p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}


================================================
FILE: src/types/chat.ts
================================================
// TypeScript interfaces for the chat system with CustomGPT management

export interface CustomGPT {
  id: string;
  name: string;
  description: string;
  systemPrompt: string;
  specialization: 'crm' | 'portfolio' | 'compliance' | 'general' | 'retirement' | 'tax';
  color: string;
  icon: string;
  mcpToolsEnabled: {
    redtailCRM: boolean;
    albridgePortfolio: boolean;
    blackDiamond: boolean;
  };
  isActive: boolean;
  createdAt: string;
  updatedAt: string;
}

export interface Thread {
  id: string;
  title: string;
  customGPTId: string;
  createdAt: string;
  updatedAt: string;
  lastMessage?: string;
  messageCount: number;
  isArchived: boolean;
  tags?: string[];
}

export interface Message {
  id: string;
  threadId: string;
  content: string;
  role: 'user' | 'assistant';
  timestamp: string;
  customGPTId?: string;
  attachments?: FileAttachment[];
  mcpToolInteractions?: MCPToolInteraction[];
  complianceFlags?: string[];
}

export interface FileAttachment {
  id: string;
  name: string;
  type: string;
  size: number;
  url: string;
  uploadedAt: string;
}

export interface MCPToolInteraction {
  toolName: 'redtail-crm' | 'albridge-portfolio' | 'black-diamond';
  action: string;
  data: any;
  timestamp: string;
  success: boolean;
}

export interface SystemPromptTemplate {
  id: string;
  name: string;
  description: string;
  specialization: CustomGPT['specialization'];
  prompt: string;
  mcpToolsRecommended: {
    redtailCRM: boolean;
    albridgePortfolio: boolean;
    blackDiamond: boolean;
  };
}

